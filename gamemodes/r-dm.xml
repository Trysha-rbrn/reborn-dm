<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="file:///C|/Users/PC/Documents/GitHub/reborn-dm/pawno/xml/pawndoc.xsl" type="text/xsl"?>
<doc source="C:\Users\PC\Documents\GitHub\reborn-dm\gamemodes\r-dm.pwn">
	<assembly>
		<name>r-dm.pwn</name>
	</assembly>

	<!-- general -->
	<general>
		MySQL plugin R41-4 <p/> <library name="y_timers">  <section>  Description  </section>  Sets up repeating timers without requiring any SetTimers and arranges them  so that they will be very unlikely to meet (at least for a long time) using  scheduling algorithms to get timers with the same period to be offset.  Also  fixes arrays and strings in timers so they can be passed properly.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_utils">  <section>  Description  </section>  Misc functions used throughout.  <section>  Version  </section>  0.1.3  <section>  Functions  </section>  <subsection>Stock</subsection>  <ul>  <symbol name="StrToLower">Convert a whole string to lower-case.</symbol>  <symbol name="StrToUpper">Convert a whole string to upper-case.</symbol>  <symbol name="Random">Generate a random number, optionally takes lower and upper bounds.</symbol>  <symbol name="RandomFloat">Same as <symbolref name="Random" />, but for floats.</symbol>  <symbol name="StripNL">Strips the newline characters from the end of a string.</symbol>  <symbol name="StripL">Remove whitespace from the start of a string.</symbol>  <symbol name="Strip">Remove whitespace from both ends of a string.</symbol>  <symbol name="endofline">Check if the given position is the end of a string (ignoring whitespace).</symbol>  <symbol name="chrfind">Return the first position (after <symbolref name="start" />) of the given character.</symbol>  <symbol name="chrfindp">Like <symbolref name="chrfind" />, but without the upper-bounds check.</symbol>  <symbol name="bernstein">Generate the Bernstein hash of the given string.</symbol>  <symbol name="ishex">Is the given string hexadecimal?</symbol>  <symbol name="unpack">Version of <symbolref name="strunpack" /> that returns the result.</symbol>  <symbol name="returnstringarg">Get the string passed as a variable argument from the given index.</symbol>  <symbol name="va_return">Like <symbolref name="sprintf" />, formats a string and returns the result.</symbol>  <symbol name="isnumeric">Is the given string a number?</symbol>  <symbol name="hexstr">Return the value of the given hexadecimal string.</symbol>  <symbol name="boolstr">Return the value of the given boolean string.</symbol>  <symbol name="binstr">Return the value of the given binary string.</symbol>  <symbol name="rawMemcpy">Copy memory between two address, instead of two arrays.</symbol>  <symbol name="memset">Set all of an array to a value.</symbol>  <symbol name="rawMemset">Set all of a given memory region to a value.</symbol>  <symbol name="ReturnPlayerName">Return a player's name.</symbol>  <symbol name="ftouch">Ensures that a file exists, but nothing more.</symbol>  <symbol name="InterpolateColour">Get the colour (in 3D RGB space) between two other colours.</symbol>  <symbol name="SkipWhitespace">Return the first position in a string of a non-whitespace character.</symbol>  <symbol name="Trim">Get the first and last positions of non-whitespace characters in the string.  Like  <symbolref name="Strip" />, but doesn't modify the string.</symbol>  <symbol name="Sum">Get the total (sum) of an array.</symbol>  <symbol name="Mean">Get the mathematical mean of an array.</symbol>  <symbol name="Mode">Get the mathematical mode of an array.</symbol>  <symbol name="Median">Get the mathematical median of an array.</symbol>  <symbol name="Range">Get the mathematical range of an array.</symbol>  </ul>  <subsection>Inline</subsection>  <ul>  <symbol name="UCMP">Unsigned compare.</symbol>  <symbol name="VALID_PLAYERID">Check if a player ID is valid (in range).</symbol>  <symbol name="IS_IN_RANGE">Check if a number is in range.</symbol>  <symbol name="NOT_IN_RANGE">Check if a number is outside a range.</symbol>  <symbol name="ceildiv">Divide two numbers and round up.</symbol>  <symbol name="floordiv">Divide two numbers and round down.</symbol>  <symbol name="isnull">Checks if a string is NULL (<c>\1\0</c> or <c>\0</c>).</symbol>  <symbol name="isodd">Checks if a number is odd.</symbol>  <symbol name="iseven">Checks if a number is even.</symbol>  <symbol name="strcpy">Copy one string to another.</symbol>  <symbol name="GetIP">Return the encoded (32-bit) version of a player's IP.</symbol>  <synonym name="getstring" for="returnstringarg"> (there are a lot)</synonym>  <synonym name="GetString" for="returnstringarg"> (there are a lot)</synonym>  <synonym name="getstringarg" for="returnstringarg"> (there are a lot)</synonym>  <synonym name="GetStringArg" for="returnstringarg"> (there are a lot)</synonym>  <synonym name="ReturnStringArg" for="returnstringarg"> (there are a lot)</synonym>  <synonym name="InterpolateColor" for="InterpolateColour" />  <synonym name="StripR" for="StripNL" />  </ul>  <section>  Variables  </section>  <subsection>Global</subsection>  <ul>  <symbol name="TRUE">True hack for infinate loops.</symbol>  <symbol name="FALSE">False hack for one-time loops.</symbol>  <symbol name="NULL">1 long string for passing via Call(Remote|Local)Function.</symbol>  </ul>  </library> <p/> <library name="y_malloc">  <section>  Description  </section>  Functions for using malloc/calloc/free type functions in PAWN.  <section>  Version  </section>  0.1  <section>  Functions  </section>  <subsection>  Stock  </subsection><ul>  <symbol name="malloc">Allocate a block of memory (may be inline).</symbol>  <symbol name="calloc">Allocate a block of memory and blank.</symbol>  <symbol name="free">Free an allocated block of memory (may be inline).</symbol>  <symbol name="Malloc_Set">Set a value in an allocated array (may be inline).</symbol>  <symbol name="Malloc_Get">Get a value in an allocated array (may be inline).</symbol>  <symbol name="Malloc_SetS">Set a string in an allocated array.</symbol>  <symbol name="Malloc_GetS">Get a string in an allocated array.</symbol>  <symbol name="Malloc_Allocate">Do the memory allocation (may be static).</symbol>  <symbol name="Malloc_Free">Do the memory freeing (may be static).</symbol>  <symbol name="Malloc_SlotSize">Get the size of an allocated block (may be inline).</symbol>  <symbol name="Malloc_NewS">Allocate for and store a given string.</symbol>  </ul><subsection>  Static  </subsection><ul>  <symbol name="Malloc_Allocate">Do the memory allocation (may be stock).</symbol>  <symbol name="Malloc_Free">Do the memory freeing (may be stock).</symbol>  </ul><subsection>  Inline  </subsection><ul>  <symbol name="mget">Get data from an allocation unit.</symbol>  <symbol name="mset">Set data in an allocation unit.</symbol>  <symbol name="mgets">Get a string from an allocation unit.</symbol>  <symbol name="msets">Set a string in an allocation unit.</symbol>  <symbol name="malloc">Allocate a block of memory (may be stock).</symbol>  <symbol name="free">Free an allocated block of memory (may be stock).</symbol>  <symbol name="Malloc_Set">Set a value in an allocated array (may be stock).</symbol>  <symbol name="Malloc_Get">Get a value in an allocated array (may be stock).</symbol>  <symbol name="Malloc_NextSlot">Get the next free data block.</symbol>  <symbol name="Malloc_GetSlotSize">Get the size of a slot.</symbol>  <symbol name="Malloc_SetSlotSize">Set the size of a block.</symbol>  <symbol name="Malloc_GetData">Direct data access getter.</symbol>  <symbol name="Malloc_SetData">Direct data access setter.</symbol>  <symbol name="Malloc_SlotSize">Get the size of an allocated block (may be stock).</symbol>  </ul><section>  Definitions  </section><ul>  <symbol name="MALLOC_KB_TO_CELL">Multiplication value to convert kb to cells.</symbol>  <symbol name="NO_ALLOC">A failed allocation (NULL, but YSI already has NULL).</symbol>  </ul><section>  Tags  </section><ul>  <symbol name="Alloc">An allocated block handle variable.</symbol>  </ul><section>  Variables  </section>  <subsection>  Global  </subsection><ul>  <symbol name="YSI_gMallocMemory">Stores the data (may be static).</symbol>  </ul><subsection>  Static  </subsection><ul>  <symbol name="YSI_gMallocMemory">Stores the data (may be global).</symbol>  <symbol name="_YSI_g_sUnusedStart">Start of free memory.</symbol>  </ul><section>Compile options</section><ul>  <symbol name="MALLOC_MEMORY">Number of cells to reserve.</symbol>  <symbol name="MALLOC_MEMORY_KB">Number of killobytes to reserve.</symbol>  <symbol name="MALLOC_MEMORY_B">Number of bytes to reserve.</symbol>  <symbol name="MALLOC_MEMORY_MB">Number of megabytes to reserve.</symbol>  <symbol name="YSI_MALLOC_SECURE">Use enhanced bounds checking.</symbol>  <symbol name="YSI_MALLOC_NO_SHORT">Avoid conflicts with mget/mset.</symbol>  </ul>  </library> <p/> <library name="y_va">  <section>  Description  </section>  This library currently provides two functions - va_printf and va_format  which perform printf and format using variable arguments passed to another  function.  This is bsed on the variable parameter passing method based on code by Zeex.  See page 15 of the code optimisations topic.  <section>  Version  </section>  1.0  </library> <p/> <param name="expr"><code>var : Iterator</code></param>  <remarks>  </remarks> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_remote">  <section>  Description  </section>  Wrapper for "__CallRemoteFunction".  Enforces some features like no returns  and arrays being followed by their length.  <section>  Version  </section>  1.0  <section>  Macros  </section><ul>  <symbol name="remotefunc">Define a function to be called remotely (use like "stock").</symbol>  <symbol name="broadcastfunc">Call the function, but in all scripts.</symbol>  <symbol name="localfunc">Call the function by name, not address, in the current script.</symbol>  </ul><section>Compile options</section><ul>  <symbol name="YSI_NO_MASTER">Disable all knowledge of other scripts.</symbol>  </ul>  </library> <p/> <library name="y_iterate">  <section>  Description  </section>  Provides efficient looping through sparse data sets, such as connected  players.  Significantly improved from the original version to be a generic  loop system, rather then purely a player loop system.  When used for  players this has constant time O(n) for number of connected players (n),  unlike standard player loops which are O(MAX_PLAYERS), regardless of the  actual number of connected players.  Even when n is MAX_PLAYERS this is  still faster.  For extensive documentation on writing and using iterators, see this topic:  <a href="http://forum.sa-mp.com/showthread.php?t=481877" />  <section>  Version  </section>  0.4  <section>  Functions  </section>  <subsection>  Public  </subsection><ul>  <symbol name="OnPlayerDisconnect">Called when a player leaves to remove them.</symbol>  <symbol name="OnPlayerConnect">Called when a player connects to add them.</symbol>  </ul><subsection>  Stock  </subsection><ul>  <symbol name="Iter_ShowArray">Displays the contents of the array.</symbol>  <symbol name="Iter_AddInternal">Add a value to an iterator.</symbol>  <symbol name="Iter_RemoveInternal">Remove a value from an iterator.</symbol>  <symbol name="Iter_RandomInternal">Get a random item from an iterator.</symbol>  <symbol name="Iter_FreeInternal">Gets the first free slot in the iterator.</symbol>  <symbol name="Iter_InitInternal">Initialises a multi-dimensional iterator.</symbol>  </ul><subsection>  Inline  </subsection><ul>  <symbol name="Iter_Create">Create a new iterator value set.</symbol>  <symbol name="Iter_Add">Wraps Iter_AddInternal.</symbol>  <symbol name="Iter_Remove">Wraps Iter_RemoveInternal.</symbol>  <symbol name="Iter_Random">Wraps Iter_RandomInternal.</symbol>  <symbol name="Iter_Count">Gets the number of items in an iterator.</symbol>  <symbol name="Iter_Debug">Wraps around Iter_ShowArray.</symbol>  <symbol name="Iter_Free">Wraps around Iter_FreeInternal.</symbol>  <symbol name="Iter_Create2">Create a new iterator array value set.</symbol>  <symbol name="Iter_Add2">Wraps Iter_AddInternal for arrays.</symbol>  <symbol name="Iter_Remove2">Wraps Iter_RemoveInternal for arrays.</symbol>  <symbol name="Iter_Random2">Wraps Iter_RandomInternal for arrays.</symbol>  <symbol name="Iter_Count2">Gets the number of items in an iterator array.</symbol>  <symbol name="Iter_Debug2">Wraps around Iter_ShowArray for arrays.</symbol>  <symbol name="Iter_Free2">Wraps around Iter_FreeInternal for arrays.</symbol>  </ul><section>  Hooks  </section><ul>  <symbol name="Iter_OnPlayerConnect">Hook for the OnPlayerConnect callback.</symbol>  <symbol name="Iter_OnPlayerDisconnect">Hook for the OnPlayerDisconnect callback.</symbol>  <symbol name="Iter_OnGameModeInit">Only exists to make the code compile correctly...</symbol>  </ul><section>  Keywords  </section><ul>  <symbol name="foreach">Command to loop an iterator.</symbol>  <symbol name="foreachex">Like foreach but without a new variable.</symbol>  <symbol name="foreach2">Command to loop through an iterator array.</symbol>  <symbol name="foreachex">Like foreach2 but without a new variable.</symbol>  </ul><section>  Tags  </section><ul>  <symbol name="Iterator">Declare an iterator.</symbol>  </ul><section>  Variables  </section>  <subsection>  Static  </subsection><ul>  <symbol name="YSI_g_OPC">Records wether Iter_OnPlayerConnect exists for speed.</symbol>  <symbol name="YSI_g_OPDC">Records wether Iter_OnPlayerDisconnect exists for speed.</symbol>  </ul><section>Compile options</section><ul>  <symbol name="YSI_ITTER_NO_SORT">Removed.</symbol>  <symbol name="FOREACH_NO_BOTS">Remove the bot iterators for smaller code.</symbol>  <symbol name="FOREACH_NO_PLAYERS">Remove all default code for player itteration.</symbol>  </ul><section>  Iterators  </section><ul>  <symbol name="Player">List of all players connected.</symbol>  <symbol name="Bot">List of all bots (npcs) connected.</symbol>  <symbol name="NPC">Alias of Bot.</symbol>  <symbol name="Character">All players and bots.</symbol>  </ul><section>  Examples  </section>  <subsection>Basic Iterators</subsection>  <p>  Basic iterators are simply collections of numbers - little more than an array.  A number is either in the array, or not in the array, <em>y_iterate</em> loops  through only the <em>in</em> numbers.</p>  <p><em>Players</em><br /><br />  This code will loop through every player connected to the server.  <code>  foreach (new i : Player)																				<br />  {																				<br /><indent />  printf("player %d is connected", i);																				<br />  }  </code>  </p>  <p><em>Vehicles</em><br /><br />  This code will loop through all the created vehicles on the server (including  those made in other running scripts).  <code>  foreach (new vid : Vehicle)																				<br />  {																				<br /><indent />  printf("vehicleid %d has been created", vid);																				<br />  }  </code>  </p>  <p><em>Create An Iterator</em><br /><br />  To create your own iterator, first declare it, then add things to it, then loop  over it:  <code>  new																				<br /><indent />  Iterator:MyIter&lt;100&gt;; // First declare it (this has room for 100 items numbered 0-99).									 											<br />  // Then add things to it.																				<br />  Iter_Add(MyIter, 0);  // Fine.																				<br />  Iter_Add(MyIter, 55); // Fine.																				<br />  Iter_Add(MyIter, 100); // Will fail.																				<br />  // Then loop over it.																				<br />  foreach (new i : MyIter)																				<br />  {																				<br /><indent />  printf("%d", i); // Will print "0" then "55".																				<br />  }  </code>  </p>  <subsection>Special Iterators</subsection>  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> <p/> <library name="y_hooks">  <section>  Description  </section>  Automatically hooks any callbacks with a very simple syntax.  <section>  Version  </section>  2.0  </library> 
	</general>

	<members>

		<!-- enumerations -->
		<member name="T:AMX_FUNCSTUBNT" value="2">
			<tagname value="AMX_FUNCSTUBNT"/>
			<member name="C:AMX_FUNCSTUBNT_ADDRESS" value="0">
			</member>
			<member name="C:AMX_FUNCSTUBNT_NAMEOFS" value="1">
			</member>
			<referrer name="GetPublicAddressFromIndex"/>
			<referrer name="GetPublicNameFromIndex"/>
			<referrer name="GetNativeAddressFromIndex"/>
			<referrer name="GetNativeNameFromIndex"/>
			<referrer name="GetPubVarAddressFromIndex"/>
			<referrer name="GetPubVarNameFromIndex"/>
			<referrer name="GetTagIDFromIndex"/>
			<referrer name="GetTagNameFromIndex"/>
			<referrer name="IsTagIndexStrong"/>
			<referrer name="IsTagIndexWeak"/>
		</member>
		<member name="T:AMX_HDR" value="17">
			<tagname value="AMX_HDR"/>
			<member name="C:AMX_HDR_SIZE" value="0">
			</member>
			<member name="C:AMX_HDR_MAGIC" value="1">
			</member>
			<member name="C:AMX_HDR_FILE_VERSION" value="2">
			</member>
			<member name="C:AMX_HDR_AMX_VERSION" value="3">
			</member>
			<member name="C:AMX_HDR_FLAGS" value="4">
			</member>
			<member name="C:AMX_HDR_DEFSIZE" value="5">
			</member>
			<member name="C:AMX_HDR_COD" value="6">
			</member>
			<member name="C:AMX_HDR_DAT" value="7">
			</member>
			<member name="C:AMX_HDR_HEA" value="8">
			</member>
			<member name="C:AMX_HDR_STP" value="9">
			</member>
			<member name="C:AMX_HDR_CIP" value="10">
			</member>
			<member name="C:AMX_HDR_PUBLICS" value="11">
			</member>
			<member name="C:AMX_HDR_NATIVES" value="12">
			</member>
			<member name="C:AMX_HDR_LIBRARIES" value="13">
			</member>
			<member name="C:AMX_HDR_PUBVARS" value="14">
			</member>
			<member name="C:AMX_HDR_TAGS" value="15">
			</member>
			<member name="C:AMX_HDR_NAMETABLE" value="16">
			</member>
			<referrer name="GetFrameFunction"/>
			<referrer name="DisasmInit"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="DisasmWriteData"/>
			<referrer name="AsmGetJumpAddressFromOffset"/>
			<referrer name="AsmGetCode"/>
			<referrer name="AsmEmitCallAbs"/>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="Indirect_Init"/>
			<referrer name="Hooks_OnCodeInit"/>
		</member>
		<member name="T:AsmContext" value="21">
			<tagname value="AsmContext"/>
			<member name="C:AsmContext_buffer" value="0">
			</member>
			<member name="C:AsmContext_buffer_size" value="1">
			</member>
			<member name="C:AsmContext_buffer_offset" value="2">
			</member>
			<member name="C:AsmContext_error" value="3">
			</member>
			<member name="C:AsmContext_error_handler" value="4">
			</member>
			<member name="C:AsmContext_label_names" value="5">
				<size value="8"/>
			</member>
			<member name="C:AsmContext_labels" value="13">
				<size value="8"/>
			</member>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
		</member>
		<member name="T:CodeScanMatcher" value="171">
			<tagname value="CodeScanMatcher"/>
			<member name="C:CodeScanMatcher_func" value="0">
			</member>
			<member name="C:CodeScanMatcher_user_data" value="1">
			</member>
			<member name="C:CodeScanMatcher_code" value="2">
				<size value="128"/>
			</member>
			<member name="C:CodeScanMatcher_len" value="130">
			</member>
			<member name="C:CodeScanMatcher_offset" value="131">
				<size value="2"/>
			</member>
			<member name="C:CodeScanMatcher_start" value="133">
				<size value="2"/>
			</member>
			<member name="C:CodeScanMatcher_holeidx" value="135">
				<size value="2"/>
			</member>
			<member name="C:CodeScanMatcher_holes" value="137">
				<size value="32"/>
			</member>
			<member name="C:CodeScanMatcher_next" value="169">
			</member>
			<member name="C:CodeScanMatcher_flags" value="170">
			</member>
			<referrer name="CodeScanDeref"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
		</member>
		<member name="T:CodeScanner" value="164">
			<tagname value="CodeScanner"/>
			<member name="C:CodeScanMatch_func" value="0">
			</member>
			<member name="C:CodeScanMatch_size" value="1">
			</member>
			<member name="C:CodeScanMatch_type" value="2">
			</member>
			<member name="C:CodeScanMatch_heap" value="3">
			</member>
			<member name="C:CodeScanMatch_stack" value="4">
			</member>
			<member name="C:CodeScanMatch_params" value="5">
			</member>
			<member name="C:CodeScanMatch_cip" value="6">
			</member>
			<member name="C:CodeScanMatch_holes" value="7">
				<size value="16"/>
			</member>
			<member name="C:CodeScanMatch_hole_count" value="23">
			</member>
			<member name="C:CodeScanMatch_name" value="24">
				<size value="8"/>
			</member>
			<member name="C:CodeScanner_first" value="32">
			</member>
			<member name="C:CodeScanner_minn" value="33">
			</member>
			<member name="C:CodeScanner_jump_switch" value="34">
				<size value="32"/>
			</member>
			<member name="C:CodeScanner_jump_target" value="66">
				<size value="32"/>
			</member>
			<member name="C:CodeScanner_jump_stack" value="98">
				<size value="32"/>
			</member>
			<member name="C:CodeScanner_jump_heap" value="130">
				<size value="32"/>
			</member>
			<member name="C:CodeScanner_state" value="162">
			</member>
			<member name="C:CodeScanner_param" value="163">
			</member>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
		</member>
		<member name="T:DisasmContext" value="5">
			<tagname value="DisasmContext"/>
			<member name="C:DisasmContext_start_ip" value="0">
			</member>
			<member name="C:DisasmContext_end_ip" value="1">
			</member>
			<member name="C:DisasmContext_nip" value="2">
			</member>
			<member name="C:DisasmContext_cip" value="3">
			</member>
			<member name="C:DisasmContext_opcode" value="4">
				<tagname value="Opcode"/>
			</member>
			<referrer name="DisasmWriteCode"/>
			<referrer name="O@A_"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetStubEntry"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
		</member>
		<member name="T:E_CHAIN_HOOK" value="17">
			<tagname value="E_CHAIN_HOOK"/>
			<member name="C:E_CHAIN_HOOK_NAME" value="0">
				<size value="16"/>
			</member>
			<member name="C:E_CHAIN_HOOK_VALUE" value="16">
			</member>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_DoAllHooks"/>
		</member>
		<member name="T:E_DAMAGE_FEED_HIT" value="28">
			<tagname value="E_DAMAGE_FEED_HIT"/>
			<member name="C:e_Issuer" value="0">
			</member>
			<member name="C:e_Name" value="1">
				<size value="24"/>
			</member>
			<member name="C:e_Amount" value="25">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Weapon" value="26">
			</member>
			<member name="C:e_Tick" value="27">
			</member>
		</member>
		<member name="T:E_DUEL_DATA" value="8">
			<tagname value="E_DUEL_DATA"/>
			<member name="C:E_PLAYER" value="0">
			</member>
			<member name="C:E_WEAPON" value="1">
				<size value="2"/>
			</member>
			<member name="C:E_COUNTDOWN" value="3">
			</member>
			<member name="C:E_ARMOUR" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:E_HEALTH" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:E_LOCATION_ID" value="6">
			</member>
			<member name="C:E_TIMER" value="7">
			</member>
		</member>
		<member name="T:E_DUEL_LOCATION_DATA" value="30">
			<tagname value="E_DUEL_LOCATION_DATA"/>
			<member name="C:E_NAME" value="0">
				<size value="22"/>
			</member>
			<member name="C:E_POS_ONE" value="22">
				<tagname value="Float"/>
				<size value="4"/>
			</member>
			<member name="C:E_POS_TWO" value="26">
				<tagname value="Float"/>
				<size value="4"/>
			</member>
		</member>
		<member name="T:E_HIT_INFO" value="7">
			<tagname value="E_HIT_INFO"/>
			<member name="C:e_Tick" value="0">
			</member>
			<member name="C:e_Issuer" value="1">
			</member>
			<member name="C:e_Weapon" value="2">
			</member>
			<member name="C:e_Amount" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Health" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Armour" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Bodypart" value="6">
			</member>
		</member>
		<member name="T:E_HOOK_NAME_REPLACEMENT_DATA" value="34">
			<tagname value="E_HOOK_NAME_REPLACEMENT_DATA"/>
			<member name="C:E_HOOK_NAME_REPLACEMENT_SHORT" value="0">
				<size value="16"/>
			</member>
			<member name="C:E_HOOK_NAME_REPLACEMENT_LONG" value="16">
				<size value="16"/>
			</member>
			<member name="C:E_HOOK_NAME_REPLACEMENT_MIN" value="32">
			</member>
			<member name="C:E_HOOK_NAME_REPLACEMENT_MAX" value="33">
			</member>
		</member>
		<member name="T:E_ITER_YIELD" value="11">
			<tagname value="E_ITER_YIELD"/>
			<member name="C:E_ITER_YIELD_STACK_START" value="0">
			</member>
			<member name="C:E_ITER_YIELD_STACK_END" value="1">
			</member>
			<member name="C:E_ITER_YIELD_STACK_SIZE" value="2">
			</member>
			<member name="C:E_ITER_YIELD_HEAP_START" value="3">
			</member>
			<member name="C:E_ITER_YIELD_HEAP_END" value="4">
			</member>
			<member name="C:E_ITER_YIELD_HEAP_SIZE" value="5">
			</member>
			<member name="C:E_ITER_YIELD_FIRST" value="6">
			</member>
			<member name="C:E_ITER_YIELD_FRM" value="7">
			</member>
			<member name="C:E_ITER_YIELD_CIP" value="8">
			</member>
			<member name="C:E_ITER_YIELD_FRAME" value="9">
			</member>
			<member name="C:E_ITER_YIELD_RETURN" value="10">
			</member>
		</member>
		<member name="T:E_REJECTED_HIT" value="33">
			<tagname value="E_REJECTED_HIT"/>
			<member name="C:e_Time" value="0">
			</member>
			<member name="C:e_Hour" value="1">
			</member>
			<member name="C:e_Minute" value="2">
			</member>
			<member name="C:e_Second" value="3">
			</member>
			<member name="C:e_Weapon" value="4">
			</member>
			<member name="C:e_Reason" value="5">
			</member>
			<member name="C:e_Info1" value="6">
			</member>
			<member name="C:e_Info2" value="7">
			</member>
			<member name="C:e_Info3" value="8">
			</member>
			<member name="C:e_Name" value="9">
				<size value="24"/>
			</member>
		</member>
		<member name="T:E_RESYNC_DATA" value="35">
			<tagname value="E_RESYNC_DATA"/>
			<member name="C:e_Health" value="0">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Armour" value="1">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Skin" value="2">
			</member>
			<member name="C:e_Team" value="3">
			</member>
			<member name="C:e_PosX" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosY" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosZ" value="6">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosA" value="7">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Weapon" value="8">
			</member>
			<member name="C:e_WeaponId" value="9">
				<size value="13"/>
			</member>
			<member name="C:e_WeaponAmmo" value="22">
				<size value="13"/>
			</member>
		</member>
		<member name="T:E_SHOT_INFO" value="16">
			<tagname value="E_SHOT_INFO"/>
			<member name="C:e_Tick" value="0">
			</member>
			<member name="C:e_Weapon" value="1">
			</member>
			<member name="C:e_HitType" value="2">
			</member>
			<member name="C:e_HitId" value="3">
			</member>
			<member name="C:e_Hits" value="4">
			</member>
			<member name="C:e_X" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Y" value="6">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Z" value="7">
				<tagname value="Float"/>
			</member>
			<member name="C:e_OX" value="8">
				<tagname value="Float"/>
			</member>
			<member name="C:e_OY" value="9">
				<tagname value="Float"/>
			</member>
			<member name="C:e_OZ" value="10">
				<tagname value="Float"/>
			</member>
			<member name="C:e_HX" value="11">
				<tagname value="Float"/>
			</member>
			<member name="C:e_HY" value="12">
				<tagname value="Float"/>
			</member>
			<member name="C:e_HZ" value="13">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Length" value="14">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Valid" value="15">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:E_SPAWN_INFO" value="12">
			<tagname value="E_SPAWN_INFO"/>
			<member name="C:e_Skin" value="0">
			</member>
			<member name="C:e_Team" value="1">
			</member>
			<member name="C:e_PosX" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosY" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosZ" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Rot" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:e_Weapon1" value="6">
			</member>
			<member name="C:e_Ammo1" value="7">
			</member>
			<member name="C:e_Weapon2" value="8">
			</member>
			<member name="C:e_Ammo2" value="9">
			</member>
			<member name="C:e_Weapon3" value="10">
			</member>
			<member name="C:e_Ammo3" value="11">
			</member>
			<referrer name="OnPlayerSpawn"/>
		</member>
		<member name="T:E_VENDING_MACHINE" value="10">
			<tagname value="E_VENDING_MACHINE"/>
			<member name="C:e_Model" value="0">
			</member>
			<member name="C:e_Interior" value="1">
			</member>
			<member name="C:e_PosX" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosY" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:e_PosZ" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:e_RotX" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:e_RotY" value="6">
				<tagname value="Float"/>
			</member>
			<member name="C:e_RotZ" value="7">
				<tagname value="Float"/>
			</member>
			<member name="C:e_FrontX" value="8">
				<tagname value="Float"/>
			</member>
			<member name="C:e_FrontY" value="9">
				<tagname value="Float"/>
			</member>
		</member>
		<member name="T:OpcodeInsnInfo" value="17">
			<tagname value="OpcodeInsnInfo"/>
			<member name="C:OpcodeInsnInfo_name" value="0">
				<size value="15"/>
			</member>
			<member name="C:OpcodeInsnInfo_num_opers" value="15">
			</member>
			<member name="C:OpcodeInsnInfo_needs_reloc" value="16">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:RAGC_PLAYER_DATA" value="12">
			<tagname value="RAGC_PLAYER_DATA"/>
			<member name="C:rAgcWepImmu" value="0">
				<tagname value="bool"/>
			</member>
			<member name="C:rAgcAmmoImmu" value="1">
				<tagname value="bool"/>
			</member>
			<member name="C:rAgcASWarns" value="2">
			</member>
			<member name="C:rAgcFirstTick" value="3">
			</member>
			<member name="C:rAgcSecondTick" value="4">
			</member>
			<member name="C:rAgcFirstShot" value="5">
			</member>
			<member name="C:rAgcSecondShot" value="6">
			</member>
			<member name="C:rAgcConstWep" value="7">
			</member>
			<member name="C:rAgcUpdateTicks" value="8">
			</member>
			<member name="C:rAgcAntibugTicks" value="9">
			</member>
			<member name="C:rAgcRepeater" value="10">
			</member>
			<member name="C:rAgcCheckTimer" value="11">
			</member>
		</member>
		<member name="T:RAGC_WEAP_DATA" value="4">
			<tagname value="RAGC_WEAP_DATA"/>
			<member name="C:rAgcPlayerAmmo" value="0">
			</member>
			<member name="C:rAgcPlayerWeapons" value="1">
			</member>
			<member name="C:rAgcNewAmmo" value="2">
			</member>
			<member name="C:rAgcOldAmmo" value="3">
			</member>
		</member>
		<member name="T:__E_COMPILER_ENUM" value="4">
			<tagname value="__E_COMPILER_ENUM"/>
			<member name="C:__E_COMPILER_ENUM_ENTRY" value="0">
				<size value="3"/>
			</member>
			<member name="C:__E_COMPILER_ENUM_AFTER" value="3">
			</member>
		</member>
		<member name="T:pInfo" value="305">
			<tagname value="pInfo"/>
			<member name="C:pSQLID" value="0">
			</member>
			<member name="C:pPass" value="1">
			</member>
			<member name="C:pEmail" value="2">
				<size value="128"/>
			</member>
			<member name="C:pPlayerIP" value="130">
				<size value="24"/>
			</member>
			<member name="C:pCash" value="154">
			</member>
			<member name="C:pAdmin" value="155">
			</member>
			<member name="C:pKills" value="156">
			</member>
			<member name="C:pDeaths" value="157">
			</member>
			<member name="C:pSkin" value="158">
			</member>
			<member name="C:pMuted" value="159">
			</member>
			<member name="C:pJailed" value="160">
			</member>
			<member name="C:pUbistva" value="161">
			</member>
			<member name="C:pSmrti" value="162">
			</member>
			<member name="C:pRank" value="163">
			</member>
			<member name="C:pLang" value="164">
			</member>
			<member name="C:pDutyTime" value="165">
				<tagname value="Float"/>
			</member>
			<member name="C:pBans" value="166">
			</member>
			<member name="C:pKicks" value="167">
			</member>
			<member name="C:pJails" value="168">
			</member>
			<member name="C:pMutes" value="169">
			</member>
			<member name="C:pHours" value="170">
				<tagname value="Float"/>
			</member>
			<member name="C:pPremium" value="171">
			</member>
			<member name="C:pInClan" value="172">
			</member>
			<member name="C:pRegistrationDate" value="173">
				<size value="80"/>
			</member>
			<member name="C:pClanName" value="253">
				<size value="24"/>
			</member>
			<member name="C:pClanLeader" value="277">
				<size value="24"/>
			</member>
			<member name="C:pClanMembers" value="301">
			</member>
			<member name="C:pCreatedClan" value="302">
			</member>
			<member name="C:pACode" value="303">
			</member>
			<member name="C:pColor" value="304">
			</member>
		</member>

		<!-- constants -->
		<member name="C:AMX_HDR_OFFSET_AMX_VERSION" value="7">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_CIP" value="28">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_COD" value="12">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_DAT" value="16">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_DEFSIZE" value="10">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_FILE_VERSION" value="6">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_FLAGS" value="8">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_HEA" value="20">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_LIBRARIES" value="40">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_MAGIC" value="4">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_NAMETABLE" value="52">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_NATIVES" value="36">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_PUBLICS" value="32">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_PUBVARS" value="44">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_SIZE" value="0">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_STP" value="24">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:AMX_HDR_OFFSET_TAGS" value="48">
			<referrer name="GetAmxHeaderNow"/>
		</member>
		<member name="C:CHECK_FOR_CONTINOUS_SHOTS" value="8">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_ResetPlayerFlags"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="C:CHECK_FOR_OUT_OF_RANGE_SHOTS" value="1">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_ResetPlayerFlags"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="C:CHECK_FOR_PROAIM_TELEPORT" value="2">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_ResetPlayerFlags"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="C:CHECK_FOR_RANDOM_AIM_SHOTS" value="4">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_ResetPlayerFlags"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="C:DAMAGE_TYPE_MULTIPLIER" value="0">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:DAMAGE_TYPE_RANGE" value="3">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:DAMAGE_TYPE_RANGE_MULTIPLIER" value="2">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:DAMAGE_TYPE_STATIC" value="1">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:DIALOG_DM" value="3">
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="C:DIALOG_HELP" value="5">
			<referrer name="pc_cmd_help"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="C:DIALOG_NCOLOR" value="6">
			<referrer name="pc_cmd_color"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="C:DIALOG_NOTHING" value="2">
			<referrer name="Admini"/>
			<referrer name="Premiums"/>
			<referrer name="banInfo"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
		</member>
		<member name="C:DIALOG_REGISTER" value="0">
			<referrer name="ShowRegisterDialog"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:DIALOG_REPORT" value="4">
			<referrer name="pc_cmd_report"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="C:D_ACODE" value="11">
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:D_LOGIN" value="1">
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:EOS" value="0">
			<referrer name="mS_strtok"/>
			<referrer name="number_format"/>
		</member>
		<member name="C:GHOST2_VW" value="2003">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:GTOWN_VW" value="1339">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:HIT_BEING_RESYNCED" value="9">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_DISCONNECTED" value="23">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_DYING_PLAYER" value="5">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_INVALID_DAMAGE" value="19">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="C:HIT_INVALID_HITTYPE" value="8">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_INVALID_VEHICLE" value="22">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_INVALID_WEAPON" value="1">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_MULTIPLE_PLAYERS" value="3">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_MULTIPLE_PLAYERS_SHOTGUN" value="4">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_NOT_SPAWNED" value="10">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_NO_DAMAGEDID" value="0">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_OUT_OF_RANGE" value="11">
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_OWN_VEHICLE" value="21">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_RATE_TOO_FAST" value="15">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_RATE_TOO_FAST_MULTIPLE" value="16">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_SAME_TEAM" value="6">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:HIT_SAME_VEHICLE" value="20">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_TOO_FAR_FROM_ORIGIN" value="18">
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:HIT_TOO_FAR_FROM_SHOT" value="12">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:HIT_UNSTREAMED" value="7">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:IGNORE_PLAYER" value="16">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
		</member>
		<member name="C:INVALID_MAP" value="0">
			<tagname value="Map"/>
		</member>
		<member name="C:JAILED_VW" value="2001">
			<referrer name="pc_cmd_jail"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:LVPD2_VW" value="2002">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:LVPD_VW" value="1338">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:MAX_LINES" value="10">
			<referrer name="resetAltChat"/>
			<referrer name="toggleAltChat"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="CreatePTextdraws"/>
		</member>
		<member name="C:NUM_OPCODES" value="138">
			<referrer name="IsOpcodeValid"/>
			<referrer name="InitOpcodeTable"/>
			<referrer name="UnrelocateOpcode"/>
			<referrer name="GetOpcodeInstructionInformation"/>
			<referrer name="GetOpcodeInstructionName"/>
			<referrer name="GetOpcodeInstructionParameters"/>
			<referrer name="GetOpcodeInstructionRelocatable"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="DisasmNext"/>
			<referrer name="AsmEmitOpcode"/>
		</member>
		<member name="C:PREVIOUS_SHOT_DID_DAMAGE" value="1">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
		</member>
		<member name="C:RCBTF_VW" value="2000">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:SHOOTING_RATE_TOO_FAST" value="13">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:SHOOTING_RATE_TOO_FAST_MULTIPLE" value="14">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:SIX_MIN_MSEC" value="360000">
			<referrer name="@yT_UpdateAdminHours"/>
		</member>
		<member name="C:SORT_IS_PLAYERS" value="1">
			<referrer name="SortArrayUsingCompInto_Entry"/>
		</member>
		<member name="C:SPAWN_VW" value="1337">
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="topQuery"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:WARNING_CONTINOUS_SHOTS" value="8">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
		</member>
		<member name="C:WARNING_OUT_OF_RANGE_SHOT" value="1">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
		</member>
		<member name="C:WARNING_PROAIM_TELEPORT" value="2">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
		</member>
		<member name="C:WARNING_RANDOM_AIM" value="4">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
		</member>
		<member name="C:WC_INVALID_DAMAGE" value="3">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:WC_INVALID_DISTANCE" value="4">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:WC_NO_DAMAGED" value="2">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="C:WC_NO_ERROR" value="0">
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:WC_NO_ISSUER" value="1">
			<referrer name="ProcessDamage"/>
		</member>
		<member name="C:WHOUSE_VW" value="2005">
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="C:__Pawn" value="778">
		</member>
		<member name="C:__PawnBuild" value="8">
		</member>
		<member name="C:cellbits" value="32">
			<referrer name="Base64Encode"/>
			<referrer name="Base64Decode"/>
			<referrer name="CodeScanCheckJumpTarget"/>
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanNOPMatch"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="ThirdParty_OnCodeInit"/>
			<referrer name="realloc"/>
			<referrer name="YVA2_CodeGenDeepCleanup"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="_yH@"/>
			<referrer name="number_format"/>
		</member>
		<member name="C:cellmax" value="2147483647">
			<referrer name="operator!(Float:)"/>
			<referrer name="Range"/>
			<referrer name="CodeScanGetFunctionAsm"/>
			<referrer name="CodeScanGetMatchAsm"/>
			<referrer name="Malloc_SetS"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YHNPS_Insert"/>
			<referrer name="YHNPS_Push"/>
			<referrer name="pc_cmd_gun"/>
		</member>
		<member name="C:cellmin" value="-2147483648">
			<referrer name="operator-(Float:)"/>
			<referrer name="Random"/>
			<referrer name="endofline"/>
			<referrer name="ishex"/>
			<referrer name="isnumeric"/>
			<referrer name="SkipWhitespace"/>
			<referrer name="Trim"/>
			<referrer name="Range"/>
			<referrer name="CallN"/>
			<referrer name="SysreqC"/>
			<referrer name="SysreqD"/>
			<referrer name="SysreqCN"/>
			<referrer name="SysreqDN"/>
			<referrer name="CallNative"/>
			<referrer name="CallNativeByAddress"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="CodeScanInit"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="Iter_Random_Internal"/>
			<referrer name="Iter_RandomFree_InternalC"/>
			<referrer name="Iter_Alloc_InternalC"/>
			<referrer name="Iter_Alloc_InternalD"/>
			<referrer name="Iter_Free_Internal"/>
			<referrer name="Iter_FreeMulti_Internal"/>
			<referrer name="Iter_Add_InternalC"/>
			<referrer name="Iter_Add_InternalD"/>
			<referrer name="Iter_Index_Internal"/>
			<referrer name="Iter_SafeRemove_InternalC"/>
			<referrer name="Iter_SafeRemove_InternalD"/>
			<referrer name="Iter_GetMulti_Internal"/>
			<referrer name="YHNPS_Find"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
			<referrer name="Iter_Func@Range"/>
			<referrer name="Iter_Func@Random"/>
			<referrer name="OnQueryError"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_teleports"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="fr_CheckValidWeapons"/>
			<referrer name="@yH_OnDialogResponse@005"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="OnPlayerModelSelection"/>
			<referrer name="topQuery"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="OnPlayerText"/>
			<referrer name="Free"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckUnban"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:debug" value="2">
			<referrer name="RelocateOpcodeNow"/>
		</member>
		<member name="C:dialog_ADMINSTATS" value="8">
			<referrer name="pc_cmd_adminstats"/>
		</member>
		<member name="C:dialog_CADMINSTATS" value="10">
			<referrer name="pc_cmd_checkadminstats"/>
		</member>
		<member name="C:dialog_CHOOSELANG" value="7">
			<referrer name="pc_cmd_lang"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="C:false" value="0">
			<tagname value="bool"/>
			<referrer name="IsHighRateWeapon"/>
			<referrer name="IsPlayerSpawned"/>
			<referrer name="AverageShootRate"/>
			<referrer name="AverageHitRate"/>
			<referrer name="IsPlayerDying"/>
			<referrer name="WC_SetSpawnInfo"/>
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="WC_DestroyVehicle"/>
			<referrer name="WC_TextDrawCreate"/>
			<referrer name="WC_CreatePlayerTextDraw"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="WC_CbugPunishment"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="WC_KillVehicle"/>
			<referrer name="OnVehicleDeath"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="CreateVendingMachines"/>
			<referrer name="DestroyVendingMachines"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="OnRejectedHit"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<referrer name="IsCrashDetectPresent"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="YVers_Callback"/>
			<referrer name="Utils_PreSort"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicNameFromIndex"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeNameFromIndex"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarNameFromIndex"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagNameFromIndex"/>
			<referrer name="GetOpcodeInstructionRelocatable"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="DisasmWrite"/>
			<referrer name="O@A_"/>
			<referrer name="Push"/>
			<referrer name="Pop"/>
			<referrer name="CodeScanCheckJumpTarget"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="CodeScanGetFuncName"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanFindOneFastPattern3"/>
			<referrer name="CodeScanFindOneFastPattern2"/>
			<referrer name="CodeScanRunFastPrescan"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="AddressofResolve"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="Hooks_IsolateName"/>
			<referrer name="Iter_YieldEnter"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="@yH_OnPlayerDisconnect@001"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="Iter_DestroyVehicle"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="_y_utils_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_ProtHandler"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="@yH_OnPlayerConnect@005"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="OnPlayerCommandReceived"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="@yH_OnPlayerConnect@011"/>
			<referrer name="@yH_OnPlayerConnect@012"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="OnPlayerText"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="C:tag_uid_unknown" value="0">
			<tagname value="tag_uid"/>
		</member>
		<member name="C:true" value="1">
			<tagname value="bool"/>
			<referrer name="IsHighRateWeapon"/>
			<referrer name="IsPlayerSpawned"/>
			<referrer name="AverageShootRate"/>
			<referrer name="AverageHitRate"/>
			<referrer name="ResyncPlayer"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="WC_SetPlayerArmour"/>
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="WC_CreateVehicle"/>
			<referrer name="WC_AddStaticVehicle"/>
			<referrer name="WC_AddStaticVehicleEx"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="OnVehicleSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="SetHealthBarVisible"/>
			<referrer name="SpawnPlayerInPlace"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="WC_SetSpawnForStreamedIn"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="WC_DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHit"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<referrer name="OnJITCompile"/>
			<referrer name="OnRuntimeError"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="boolstr"/>
			<referrer name="Utils_PreSort"/>
			<referrer name="ResetStaticAmxHeader"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagNameFromIndex"/>
			<referrer name="GetTagNameFromID"/>
			<referrer name="InitOpcodeTable"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="DisasmWrite"/>
			<referrer name="Push"/>
			<referrer name="Pop"/>
			<referrer name="AsmEmitJrelLabelStringize"/>
			<referrer name="CodeScanCheckJumpTarget"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="CodeScanGetFuncName"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanFindOneFastPattern3"/>
			<referrer name="CodeScanFindOneFastPattern2"/>
			<referrer name="CodeScanRunFastPrescan"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="AddressofResolve"/>
			<referrer name="calloc"/>
			<referrer name="Hooks_GetPreHooks"/>
			<referrer name="Hooks_GetFunctionWritePoint"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Iter_YieldEnter"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="_Timer_D"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="MP_OPC"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_admins"/>
			<referrer name="Admini"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="@yH_OnPlayerConnect@005"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="OnPlayerCommandPerformed"/>
			<referrer name="OnPlayerCommandReceived"/>
			<referrer name="pc_cmd_help"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="aliasCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="GetPlayerID"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_color"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="ShowRegisterDialog"/>
			<referrer name="GiveMoney"/>
			<referrer name="AMessage"/>
			<referrer name="SpawnSetup"/>
			<referrer name="ClearFPlayer"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="@yH_OnGameModeInit@010"/>
			<referrer name="topQuery"/>
			<referrer name="@yH_OnPlayerConnect@011"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="PTime"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="BustAim_OnPlayerUpdate"/>
			<referrer name="HitRemove"/>
			<referrer name="Free"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="SaveAccount"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>

		<!-- variables -->
		<member name="F:@_">
			<attribute name="public"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="E@"/>
			<referrer name="@@Iter_ActorDo"/>
			<referrer name="@@Iter_VehicleDo"/>
		</member>
		<member name="F:AMX_BASE_ADDRESS">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetEntry"/>
			<referrer name="AMX_GetEntryPrefix"/>
			<referrer name="AMX_GetEntrySuffix"/>
			<referrer name="AMX_GetName"/>
			<referrer name="AMX_GetNamePrefix"/>
			<referrer name="AMX_GetNameSuffix"/>
			<referrer name="AMX_GetStringFromEntry"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_InvalidateName"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_ComparePublics"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Yield_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_AMX_VERSION">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_CIP">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_COD">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetGlobal"/>
			<referrer name="AMX_TraceCode"/>
			<referrer name="CGen_GetAddr"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GenerateCode"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
		</member>
		<member name="F:AMX_HEADER_DAT">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_TraceCode"/>
			<referrer name="AMX_TraceMemory"/>
		</member>
		<member name="F:AMX_HEADER_DEFSIZE">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_FILE_VERSION">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_FLAGS">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_HEA">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_TraceMemory"/>
		</member>
		<member name="F:AMX_HEADER_LIBRARIES">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
		</member>
		<member name="F:AMX_HEADER_MAGIC">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_NAMETABLE">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
		</member>
		<member name="F:AMX_HEADER_NATIVES">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
			<referrer name="AMX_GetEntryFromNativeIndex"/>
			<referrer name="AMX_GetNativeIndexFromEntry"/>
			<referrer name="Hooks_SortPublics"/>
		</member>
		<member name="F:AMX_HEADER_PUBLICS">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
			<referrer name="AMX_GetEntryFromPublicIndex"/>
			<referrer name="AMX_GetPublicIndexFromEntry"/>
			<referrer name="CGen_GetAddr"/>
			<referrer name="Hooks_ComparePublics"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:AMX_HEADER_PUBVARS">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
		</member>
		<member name="F:AMX_HEADER_SIZE">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_STP">
			<referrer name="Debug_OnCodeInit"/>
		</member>
		<member name="F:AMX_HEADER_TAGS">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetBaseCount"/>
		</member>
		<member name="F:AMX_REAL_ADDRESS">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="Hooks_WriteFunction"/>
		</member>
		<member name="F:AMX_REAL_DATA">
			<referrer name="Debug_OnCodeInit"/>
			<referrer name="AMX_GetGlobalAddress"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GenerateCode"/>
		</member>
		<member name="F:ASM_ARGUMENTS_OFFSET">
			<referrer name="AsmGetArgOffset"/>
		</member>
		<member name="F:ASM_CALLER_FRAME_OFFSET">
		</member>
		<member name="F:ASM_CTRL_CIP">
		</member>
		<member name="F:ASM_CTRL_COD">
		</member>
		<member name="F:ASM_CTRL_DAT">
		</member>
		<member name="F:ASM_CTRL_FRM">
		</member>
		<member name="F:ASM_CTRL_HEA">
		</member>
		<member name="F:ASM_CTRL_JIT">
		</member>
		<member name="F:ASM_CTRL_JMP">
		</member>
		<member name="F:ASM_CTRL_STK">
		</member>
		<member name="F:ASM_CTRL_STP">
		</member>
		<member name="F:ASM_LOCALS_OFFSET">
		</member>
		<member name="F:ASM_RETURN_ADDR_OFFSET">
		</member>
		<member name="F:AdminDuty">
			<tagname value="bool"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="UpdateAdminHours"/>
			<referrer name="Admini"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<referrer name="@yH_OnPlayerConnect@011"/>
		</member>
		<member name="F:AltChatTD_Player">
			<tagname value="PlayerText"/>
			<referrer name="resetAltChat"/>
			<referrer name="toggleAltChat"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="CreatePTextdraws"/>
		</member>
		<member name="F:AltChatTD_Text">
			<referrer name="resetAltChat"/>
			<referrer name="sendAltChatMessage"/>
		</member>
		<member name="F:ArenaTime">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:BustAim_g_AimWarningStats">
			<tagname value="Float"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetRandomAimStats"/>
		</member>
		<member name="F:BustAim_g_ContinousShots">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_DCTTL_temp">
			<tagname value="Float"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
		</member>
		<member name="F:BustAim_g_IntrnlPlayerSettings">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_LastUpdateTick">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerUpdate"/>
		</member>
		<member name="F:BustAim_g_MaxContinousShots">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_OutOfRangeShots">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_PlayerPrevWeapon">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
		</member>
		<member name="F:BustAim_g_PlayerSettings">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_SetPlayerFlags"/>
			<referrer name="BS_GetPlayerFlags"/>
			<referrer name="BS_ResetPlayerFlags"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_RandomAimShots">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_RangeWarningStats">
			<tagname value="Float"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetRangeStats"/>
		</member>
		<member name="F:BustAim_g_ShotsFired">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_ShotsHit">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_TeleportShots">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_TeleportWarningStats">
			<tagname value="Float"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetTeleportStats"/>
		</member>
		<member name="F:BustAim_g_TotalOutOfRangeWarns">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_TotalRandomAimWarns">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_TotalTeleportWarns">
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="BS_GetPlayerWeaponProfile"/>
			<referrer name="BS_ResetPlayerWeaponProfile"/>
			<referrer name="BS_GetPlayerProfile"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
		</member>
		<member name="F:BustAim_g_WeaponRange">
			<tagname value="Float"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
		</member>
		<member name="F:BustAim_g_WeaponRangeOriginal">
			<tagname value="Float"/>
		</member>
		<member name="F:CELLMIN_ON_MATCHES">
		</member>
		<member name="F:DONE_FALSE">
			<tagname value="bool"/>
		</member>
		<member name="F:DTD">
			<tagname value="PlayerText"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
		</member>
		<member name="F:F@o">
		</member>
		<member name="F:FALSE">
			<tagname value="bool"/>
			<referrer name="Hooks_RepairJITInit"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="Iter_ActorDo"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="Iter_VehicleDo"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
		</member>
		<member name="F:FLOAT_TAG_">
			<tagname value="Float"/>
		</member>
		<member name="F:FreeroamSpawn">
			<tagname value="Float"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
		</member>
		<member name="F:FreeroamTDs">
			<tagname value="PlayerText"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
		</member>
		<member name="F:GHOST2">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:GTOWN">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:GUI">
			<tagname value="PlayerText"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="SetPlayerSkinn"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
		</member>
		<member name="F:GunSpawn">
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
		</member>
		<member name="F:HitMark">
			<tagname value="Text"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="CreateGTextdraws"/>
			<referrer name="HitRemove"/>
		</member>
		<member name="F:I@">
			<referrer name="Iter_YieldReturn"/>
			<referrer name="_@Iter_ActorDo"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="_@Iter_VehicleDo"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
			<referrer name="_Timer_C"/>
			<referrer name="t_Kick_yT@"/>
		</member>
		<member name="F:INDIRECTION_DATA">
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
		</member>
		<member name="F:INDIRECTION_TAG">
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
		</member>
		<member name="F:InDM">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="PTime"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:InDM1">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM2">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM3">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM4">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM5">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM6">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InDM7">
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="afkCheck"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
		</member>
		<member name="F:InFreeroam">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@005"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_teleports"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:Iter_Single@Actor">
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="Iter_ActorDo"/>
		</member>
		<member name="F:Iter_Single@Bot">
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
		</member>
		<member name="F:Iter_Single@Character">
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
		</member>
		<member name="F:Iter_Single@LocalActor">
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
		</member>
		<member name="F:Iter_Single@LocalVehicle">
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
		</member>
		<member name="F:Iter_Single@Player">
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
		</member>
		<member name="F:Iter_Single@Vehicle">
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="Iter_VehicleDo"/>
		</member>
		<member name="F:Iterator@Actor">
			<tagname value="_no_itertag"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="Iter_ActorDo"/>
		</member>
		<member name="F:Iterator@Bot">
			<tagname value="_no_itertag"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
		</member>
		<member name="F:Iterator@Character">
			<tagname value="_no_itertag"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
		</member>
		<member name="F:Iterator@Fib">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Filter">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@LocalActor">
			<tagname value="_no_itertag"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
		</member>
		<member name="F:Iterator@LocalVehicle">
			<tagname value="_no_itertag"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
		</member>
		<member name="F:Iterator@NonNull">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Null">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Player">
			<tagname value="_no_itertag"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="_Timer_D"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="GetPlayerID"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="GetPlayerIdFromName"/>
			<referrer name="AMessage"/>
			<referrer name="OnPlayerText"/>
			Create the internal iterators. 
		</member>
		<member name="F:Iterator@Powers">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Random">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Range">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Until">
			<tagname value="F@z"/>
		</member>
		<member name="F:Iterator@Vehicle">
			<tagname value="_no_itertag"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="Iter_VehicleDo"/>
		</member>
		<member name="F:J@">
			<referrer name="_@Iter_ActorDo"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="_@Iter_VehicleDo"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
			<referrer name="t_Kick_yT@"/>
		</member>
		<member name="F:JAIL">
			<tagname value="Float"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:Killed">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="SpawnSetup"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
		</member>
		<member name="F:Killstreak">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="dm_Kick"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
		</member>
		<member name="F:LVPD">
			<tagname value="Float"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:LVPD2">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:LoggedIn">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:LoginTD">
			<tagname value="PlayerText"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="UpdateLoginTime"/>
		</member>
		<member name="F:LoginTimer">
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:MATCH_NAME_PARTIAL">
		</member>
		<member name="F:NULL">
		</member>
		<member name="F:O@V_">
			<referrer name="O@A_"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="YVA2_Initalise"/>
			<referrer name="Hooks_GenerateContinue"/>
		</member>
		<member name="F:OLD_DEFAULT_CUSTOM">
		</member>
		<member name="F:OLD_DEFAULT_KUSTOM">
		</member>
		<member name="F:OLD_DEFAULT_NAME">
		</member>
		<member name="F:OwnerActor">
			<referrer name="PawnCmd_OnGameModeInit"/>
		</member>
		<member name="F:PI">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="UpdateAdminHours"/>
			<referrer name="pc_cmd_admins"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_teleports"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="fr_CheckValidWeapons"/>
			<referrer name="pc_cmd_premiums"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="OnPlayerCommandPerformed"/>
			<referrer name="OnPlayerCommandReceived"/>
			<referrer name="pc_cmd_help"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_banlist"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="ipCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_color"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="OnPlayerModelSelection"/>
			<referrer name="GiveMoney"/>
			<referrer name="AMessage"/>
			<referrer name="SpawnSetup"/>
			<referrer name="CheckLoggedIn"/>
			<referrer name="sql_user_update_integer"/>
			<referrer name="sql_user_update_string"/>
			<referrer name="sql_user_update_float"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="afkCheck"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="PTime"/>
			<referrer name="OnPlayerText"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="Free"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="SaveAccount"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckUnban"/>
			<referrer name="sql_LoadPlayerData"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:PasswordCheck">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:PlayerColors">
		</member>
		<member name="F:PlayerWhoInvite">
			<referrer name="sql_OnAccountCreate"/>
		</member>
		<member name="F:Q@">
			<referrer name="C@"/>
			<referrer name="S@"/>
			<referrer name="G@"/>
		</member>
		<member name="F:RCRAND">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:ReportCooldown">
			<referrer name="pc_cmd_report"/>
		</member>
		<member name="F:ReportReason">
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="F:ReportedID">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="@yH_OnDialogResponse@007"/>
		</member>
		<member name="F:RespawningDM">
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
		</member>
		<member name="F:SAMP_INCLUDES_VERSION">
			<attribute name="public"/>
		</member>
		<member name="F:SQL">
			<tagname value="MySQL"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_admins"/>
			<referrer name="pc_cmd_premiums"/>
			<referrer name="pc_cmd_banlist"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="aliasCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="unbanIP"/>
			<referrer name="sql_user_update_integer"/>
			<referrer name="sql_user_update_string"/>
			<referrer name="sql_user_update_float"/>
			<referrer name="topCheck"/>
			<referrer name="SaveAccount"/>
			<referrer name="CheckUnban"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="check_account_registered"/>
			<referrer name="sql_LoadPlayerData"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:SSCANF_QUIET">
		</member>
		<member name="F:SSCANF_gInit">
			<tagname value="bool"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
		</member>
		<member name="F:SSCANF_g_sPlayers">
		</member>
		<member name="F:SoarArena">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:Streamer_IncludeFileVersion">
			<attribute name="public"/>
		</member>
		<member name="F:TRUE">
			<tagname value="bool"/>
			<referrer name="YVA2_DummyPush"/>
		</member>
		<member name="F:TakeSpectateID">
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
		</member>
		<member name="F:TogHud">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="PTime"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:ToggleTeleport">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@005"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
		</member>
		<member name="F:UNIQUE_SYMBOL_DOESNT_EXIST">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UNIQUE_SYMBOL_LESS_THAN_100">
		</member>
		<member name="F:UlogovanProvera">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_help"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_color"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="pc_cmd_lang"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<referrer name="CheckLoggedIn"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="OnPlayerText"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
		</member>
		<member name="F:WHOUSE">
			<tagname value="Float"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
		</member>
		<member name="F:YSI_FILTERSCRIPT">
			<tagname value="bool"/>
			<referrer name="Server_IsFilterscript"/>
			<referrer name="Server_IsGameMode"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="WC_OnFilterScriptExit"/>
			<referrer name="WC_OnGameModeExit"/>
			<referrer name="ScriptInit_OnCodeInit"/>
		</member>
		<member name="F:YSI_gDebugLevel">
			<referrer name="Debug_Level"/>
		</member>
		<member name="F:YSI_gIteratorDepth">
			<referrer name="Iter_YieldEnter"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_YieldReturn"/>
		</member>
		<member name="F:YSI_gMallocMemory">
			<referrer name="ThirdParty_OnCodeInit"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="Malloc_GetS"/>
			<referrer name="Malloc_SetS"/>
			<referrer name="Malloc_SetVAS"/>
			<referrer name="Malloc_GetA"/>
			<referrer name="Malloc_SetA"/>
			<referrer name="Malloc_SetVAA"/>
			<referrer name="realloc"/>
			<referrer name="Malloc_Allocate"/>
			<referrer name="Malloc_Free"/>
			<referrer name="Malloc_Resolve"/>
			<referrer name="Malloc_Reconcile"/>
			<referrer name="Timer_GetSingleSlot"/>
			<referrer name="_Timer_C"/>
			<referrer name="_Timer_F"/>
		</member>
		<member name="F:YSI_gPlayerIP">
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="SSCANF_OnPlayerDisconnect"/>
		</member>
		<member name="F:YSI_gUnsafeHugeString">
		</member>
		<member name="F:YSI_g_sActiveHooks">
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="ScriptInit_OnRuntimeError"/>
		</member>
		<member name="F:YSI_g_sCallData">
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="F@"/>
		</member>
		<member name="F:YSI_g_sCodeEnd">
			<referrer name="CGen_SetupCodeSpace"/>
			<referrer name="CGen_UseCodeSpace"/>
		</member>
		<member name="F:YSI_g_sCodeJITed">
			<tagname value="bool"/>
			<referrer name="Server_JITComplete"/>
			<referrer name="OnJITCompile"/>
		</member>
		<member name="F:YSI_g_sCodeJITing">
			<tagname value="bool"/>
			<referrer name="Server_JITExists"/>
			<referrer name="OnJITCompile"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
		</member>
		<member name="F:YSI_g_sCodeSpace">
			<referrer name="CGen_SetupCodeSpace"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="CGen_UseCodeSpace"/>
			<referrer name="CGen_GetCodeSpace"/>
			<referrer name="CGen_AddCodeSpace"/>
		</member>
		<member name="F:YSI_g_sContexts">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sCrashdetect">
			<tagname value="bool"/>
			<referrer name="Server_CrashDetectExists"/>
			<referrer name="OnRuntimeError"/>
		</member>
		<member name="F:YSI_g_sFirstSlot">
			<tagname value="Alloc"/>
			<referrer name="Timer_GetSingleSlot"/>
			<referrer name="_Timer_C"/>
		</member>
		<member name="F:YSI_g_sInitFSIdx">
			<referrer name="CGen_OnCodeInit"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitFSPtr">
			<referrer name="_Hooks_RepairStubFS"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitFSRep">
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitGMIdx">
			<referrer name="CGen_OnCodeInit"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitGMPtr">
			<referrer name="_Hooks_RepairStubGM"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitGMRep">
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
		</member>
		<member name="F:YSI_g_sInitPublicDiff">
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
		</member>
		<member name="F:YSI_g_sInitialised">
			<referrer name="YVA2_DummyPush"/>
			<referrer name="Malloc_OnCodeInit"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sIteratorStack">
			<referrer name="Iter_YieldEnter"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_YieldReturn"/>
		</member>
		<member name="F:YSI_g_sLastSlot">
			<tagname value="Alloc"/>
			<referrer name="Timer_GetSingleSlot"/>
			<referrer name="_Timer_C"/>
		</member>
		<member name="F:YSI_g_sLength">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sMaxNesting">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sNPSBaseCall">
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
		</member>
		<member name="F:YSI_g_sNPSReplace">
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
		</member>
		<member name="F:YSI_g_sNPSStack">
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
		</member>
		<member name="F:YSI_g_sNPSTrampoline">
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
		</member>
		<member name="F:YSI_g_sPassthroughNestings">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sPlayerTimers">
			<referrer name="@yH_OnPlayerConnect@002"/>
			<referrer name="@yH_OnPlayerDisconnect@002"/>
			<referrer name="_Timer_D"/>
		</member>
		<member name="F:YSI_g_sPropCaller">
			<referrer name="C@"/>
			<referrer name="D@"/>
		</member>
		<member name="F:YSI_g_sPropEmpty">
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="T@"/>
		</member>
		<member name="F:YSI_g_sPropReturn">
			<referrer name="D@"/>
			<referrer name="L@"/>
		</member>
		<member name="F:YSI_g_sPropVarArg">
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="L@"/>
			<referrer name="T@"/>
		</member>
		<member name="F:YSI_g_sPtr">
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_YieldReturn"/>
		</member>
		<member name="F:YSI_g_sReplacePtr">
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Hooks_SortReplacements"/>
		</member>
		<member name="F:YSI_g_sReplacements">
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Hooks_SortReplacements"/>
		</member>
		<member name="F:YSI_g_sReplacementsLongOrder">
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Hooks_SortReplacements"/>
		</member>
		<member name="F:YSI_g_sReplacementsShortOrder">
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Hooks_SortReplacements"/>
		</member>
		<member name="F:YSI_g_sSkips">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sSortedOnce">
			<tagname value="bool"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
		</member>
		<member name="F:YSI_g_sStack">
			<referrer name="YHNPS_OnCodeInit"/>
		</member>
		<member name="F:YSI_g_sStackPtr">
			<referrer name="YHNPS_OnCodeInit"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_YieldReturn"/>
		</member>
		<member name="F:YSI_g_sStacks">
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
		</member>
		<member name="F:YSI_g_sTempRet">
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
		</member>
		<member name="F:YSI_g_sYSIM_STRING">
			<referrer name="C@"/>
		</member>
		<member name="F:YSI_g_sYSI_MAX_STRING">
			<referrer name="C@"/>
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:Y_UNIQUE_000_to_099_CALLED">
		</member>
		<member name="F:_PP@TMP1">
		</member>
		<member name="F:_PP@TMP2">
		</member>
		<member name="F:_PP@TMP3">
		</member>
		<member name="F:_PP@TRUE">
		</member>
		<member name="F:__ARR">
		</member>
		<member name="F:__REF">
		</member>
		<member name="F:__YSI_g_sHeapStart">
			<referrer name="ThirdParty_OnCodeInit"/>
			<referrer name="Malloc_Allocate"/>
			<referrer name="Malloc_Free"/>
		</member>
		<member name="F:__YSI_g_sUnusedStart">
			<referrer name="ThirdParty_OnCodeInit"/>
			<referrer name="Malloc_Allocate"/>
			<referrer name="Malloc_Free"/>
		</member>
		<member name="F:__YSI_gsCompilerEnum">
		</member>
		<member name="F:__date">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__time">
		</member>
		<member name="F:_pawncmd_is_gamemode">
			<tagname value="bool"/>
			<attribute name="public"/>
		</member>
		<member name="F:_pawncmd_version">
			<attribute name="public"/>
		</member>
		<member name="F:afkTimer">
			<referrer name="@yH_OnPlayerConnect@011"/>
			<referrer name="@yH_OnPlayerDisconnect@011"/>
		</member>
		<member name="F:altchatToggled">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="toggleAltChat"/>
			<referrer name="isAltChatToggled"/>
			<referrer name="pc_cmd_altchat"/>
		</member>
		<member name="F:fr_SpawnedVehicle">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@005"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
		</member>
		<member name="F:fr_VehicleID">
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
		</member>
		<member name="F:gBackgroundTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
		</member>
		<member name="F:gBase">
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanInit"/>
		</member>
		<member name="F:gCancelButtonTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
		</member>
		<member name="F:gCodBase">
			<referrer name="CodeScanRunFastPrescan"/>
			<referrer name="CodeScanInit"/>
		</member>
		<member name="F:gCodBase">
			<referrer name="DisasmInit"/>
			<referrer name="DisasmReloc"/>
			<referrer name="DisasmWriteCode"/>
		</member>
		<member name="F:gCodeScanCallback_match">
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
		</member>
		<member name="F:gCurrentPageTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
		</member>
		<member name="F:gCustomList">
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="ShowModelSelectionMenuEx"/>
		</member>
		<member name="F:gDat">
			<referrer name="CodeScanRun"/>
			<referrer name="CodeScanInit"/>
			<referrer name="CodeScanGetMatchFunc"/>
			<referrer name="CodeScanGetMatchAddress"/>
		</member>
		<member name="F:gHdr">
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanInit"/>
		</member>
		<member name="F:gHdr">
			<referrer name="ResetStaticAmxHeader"/>
			<referrer name="GetAmxHeader"/>
			<referrer name="GetAmxHeaderComponent"/>
			<referrer name="PrintAmxHeader"/>
			<referrer name="GetPublicIndexFromAddress"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="HookPublic"/>
			<referrer name="GetNativeIndexFromAddress"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="HookNative"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetPubVarIndexFromAddress"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagIndexFromName"/>
			<referrer name="GetTagIndexFromID"/>
		</member>
		<member name="F:gHeaderTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
		</member>
		<member name="F:gInitialized">
			<tagname value="bool"/>
			<referrer name="ResetStaticAmxHeader"/>
			<referrer name="GetAmxHeader"/>
			<referrer name="GetAmxHeaderComponent"/>
			<referrer name="PrintAmxHeader"/>
			<referrer name="GetPublicIndexFromAddress"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="HookPublic"/>
			<referrer name="GetNativeIndexFromAddress"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="HookNative"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetPubVarIndexFromAddress"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagIndexFromName"/>
			<referrer name="GetTagIndexFromID"/>
		</member>
		<member name="F:gItemAmount">
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gItemAt">
			<referrer name="_y_utils_OnPlayerConnect"/>
		</member>
		<member name="F:gItemList">
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gListAmount">
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gLists">
			<referrer name="mS_GetAmountOfListItems"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gNextButtonTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
		</member>
		<member name="F:gOP_CASETBL">
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanInit"/>
		</member>
		<member name="F:gOP_NOP">
			<referrer name="CodeScanInit"/>
			<referrer name="CodeScanNOPMatch"/>
		</member>
		<member name="F:gOpArgCount">
			<referrer name="CodeScanRunFastPrescan"/>
		</member>
		<member name="F:gPrevButtonTextDrawId">
			<tagname value="PlayerText"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
		</member>
		<member name="F:gPreviousWriteOffset">
			<referrer name="AsmEmitInstruction"/>
			<referrer name="AsmEmitJumpLabelInstruction"/>
			<referrer name="AsmGetPreviousWriteOffset"/>
		</member>
		<member name="F:gRotZoom">
			<tagname value="Float"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gRotZoomAmount">
			<referrer name="LoadModelSelectionMenu"/>
		</member>
		<member name="F:gSelectionItems">
			<tagname value="PlayerText"/>
			<referrer name="mS_DestroyPlayerMPs"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
		</member>
		<member name="F:gSelectionItemsTag">
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
		</member>
		<member name="F:g_HitRejectReasons">
			<referrer name="GetRejectedHit"/>
		</member>
		<member name="F:g_WeaponList">
			<referrer name="@yH_OnDialogResponse@012"/>
		</member>
		<member name="F:g_WeaponName">
			<referrer name="SetWeaponName"/>
			<referrer name="WC_GetWeaponName"/>
		</member>
		<member name="F:g_args">
			<referrer name="Push"/>
			<referrer name="Pop"/>
			<referrer name="Call"/>
			<referrer name="CallN"/>
			<referrer name="SysreqC"/>
			<referrer name="SysreqD"/>
			<referrer name="SysreqCN"/>
			<referrer name="SysreqDN"/>
		</member>
		<member name="F:g_duelData">
			<referrer name="@yH_OnPlayerConnect@012"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<referrer name="forfeitPlayerDuel"/>
			<referrer name="OnDuelTimer"/>
		</member>
		<member name="F:g_duelLocationData">
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ShowPlayerDuelMenu"/>
		</member>
		<member name="F:g_nargs">
			<referrer name="Push"/>
			<referrer name="Pop"/>
			<referrer name="Call"/>
			<referrer name="CallN"/>
			<referrer name="SysreqC"/>
			<referrer name="SysreqD"/>
			<referrer name="SysreqCN"/>
			<referrer name="SysreqDN"/>
		</member>
		<member name="F:g_sort_cmp_array">
		</member>
		<member name="F:g_sort_cmp_offset">
			<referrer name="SortDeepArray_Entry"/>
			<referrer name="_SortDeepArray"/>
		</member>
		<member name="F:g_sort_cmp_type">
			<referrer name="SortDeepArray_Entry"/>
			<referrer name="_SortDeepArray"/>
		</member>
		<member name="F:g_sort_ignorecase">
			<tagname value="bool"/>
			<referrer name="SortDeepArray_Entry"/>
			<referrer name="_SortDeepArray"/>
		</member>
		<member name="F:g_sort_order">
			<tagname value="E_SORT_ORDER"/>
			<referrer name="SortDeepArray_Entry"/>
			<referrer name="_SortDeepArray"/>
		</member>
		<member name="F:g_sort_stack">
			<referrer name="_SortDeepArray"/>
			<referrer name="SortArrayUsingComparator_QS"/>
			<referrer name="SortArrayUsingCompInto_QS"/>
		</member>
		<member name="F:gsCodSize">
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
			<referrer name="Indirect_GetMeta_"/>
			<referrer name="Indirect_SetMeta_"/>
			<referrer name="Indirect_Claim_"/>
			<referrer name="Indirect_Release_"/>
			<referrer name="Indirect_Ref_"/>
			<referrer name="Indirect_Ptr_"/>
			<referrer name="Indirect_DeRef_"/>
			<referrer name="Indirect_DePtr_"/>
			<referrer name="Indirect_Init"/>
		</member>
		<member name="F:gtc_Cmd">
			<referrer name="OnPlayerCommandReceived"/>
		</member>
		<member name="F:gtc_text">
			<referrer name="OnPlayerText"/>
		</member>
		<member name="F:insn_table">
			<referrer name="GetOpcodeInstructionInformation"/>
			<referrer name="GetOpcodeInstructionName"/>
			<referrer name="GetOpcodeInstructionParameters"/>
			<referrer name="GetOpcodeInstructionRelocatable"/>
		</member>
		<member name="F:iterstart@Fib">
		</member>
		<member name="F:iterstart@Filter">
		</member>
		<member name="F:iterstart@NonNull">
		</member>
		<member name="F:iterstart@Null">
		</member>
		<member name="F:iterstart@Powers">
		</member>
		<member name="F:iterstart@Random">
		</member>
		<member name="F:iterstart@Range">
		</member>
		<member name="F:iterstart@Until">
		</member>
		<member name="F:lastPM">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
		</member>
		<member name="F:opcode_table">
			<tagname value="Opcode"/>
			<referrer name="InitOpcodeTable"/>
			<referrer name="RelocateOpcode"/>
			<referrer name="UnrelocateOpcode"/>
		</member>
		<member name="F:opcode_table_is_ready">
			<tagname value="bool"/>
			<referrer name="InitOpcodeTable"/>
			<referrer name="RelocateOpcode"/>
			<referrer name="UnrelocateOpcode"/>
		</member>
		<member name="F:pDrunkLevelLast">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="BustAim_OnPlayerUpdate"/>
		</member>
		<member name="F:pFPS">
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
			<referrer name="BustAim_OnPlayerUpdate"/>
		</member>
		<member name="F:p_duelInvitation">
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ClearDuelInvites"/>
		</member>
		<member name="F:p_playerDueling">
			<tagname value="bool"/>
			<referrer name="@yH_OnPlayerConnect@012"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="IsPlayerDueling"/>
		</member>
		<member name="F:playerIP">
			<referrer name="@yH_OnPlayerConnect@003"/>
		</member>
		<member name="F:rAgc_Player">
			<referrer name="MP_OPC"/>
			<referrer name="_y_utils_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="WC_OnPlayerUpdate"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_DelayRapid"/>
			<referrer name="rAgc_Detector"/>
			<referrer name="rAgc_ProtHandler"/>
			<referrer name="rAgc_IsPlayerPaused"/>
		</member>
		<member name="F:rAgc_Weapons">
			<referrer name="WC_OnPlayerSpawn"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_Detector"/>
		</member>
		<member name="F:repeatspawn">
			<referrer name="@yH_OnGameModeInit@010"/>
			<referrer name="topQuery"/>
		</member>
		<member name="F:s_AlreadyConnected">
			<tagname value="bool"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_BeingResynced">
			<referrer name="IsPlayerSpawned"/>
			<referrer name="ResyncPlayer"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="UpdateHealthBar"/>
		</member>
		<member name="F:s_CbugAllowed">
			<tagname value="bool"/>
			<referrer name="SetCbugAllowed"/>
			<referrer name="GetCbugAllowed"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
		</member>
		<member name="F:s_CbugFroze">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_CbugGlobal">
			<tagname value="bool"/>
			<referrer name="SetCbugAllowed"/>
			<referrer name="GetCbugAllowed"/>
			<referrer name="OnPlayerConnect"/>
		</member>
		<member name="F:s_ClassSpawnInfo">
			<referrer name="WC_AddPlayerClass"/>
			<referrer name="WC_AddPlayerClassEx"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_CustomFallDamage">
			<referrer name="SetCustomFallDamage"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:s_CustomVendingMachines">
			<tagname value="bool"/>
			<referrer name="SetCustomVendingMachines"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_DamageArmour">
			<referrer name="SetWeaponArmourRule"/>
			<referrer name="InflictDamage"/>
		</member>
		<member name="F:s_DamageArmourToggle">
			<tagname value="bool"/>
			<referrer name="SetCustomArmourRules"/>
			<referrer name="InflictDamage"/>
		</member>
		<member name="F:s_DamageDoneArmour">
			<tagname value="Float"/>
			<referrer name="GetLastDamageArmour"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
		</member>
		<member name="F:s_DamageDoneHealth">
			<tagname value="Float"/>
			<referrer name="GetLastDamageHealth"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
		</member>
		<member name="F:s_DamageFeed">
			<referrer name="IsDamageFeedActive"/>
			<referrer name="SetDamageFeed"/>
		</member>
		<member name="F:s_DamageFeedGiven">
			<tagname value="PlayerText"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="ScriptExit"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdateText"/>
		</member>
		<member name="F:s_DamageFeedHideDelay">
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHit"/>
		</member>
		<member name="F:s_DamageFeedHitsGiven">
			<referrer name="OnPlayerConnect"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="DamageFeedAddHitGiven"/>
		</member>
		<member name="F:s_DamageFeedHitsTaken">
			<referrer name="OnPlayerConnect"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="DamageFeedAddHitTaken"/>
		</member>
		<member name="F:s_DamageFeedLastUpdate">
			<referrer name="OnPlayerConnect"/>
			<referrer name="ScriptInit"/>
			<referrer name="DamageFeedUpdate"/>
		</member>
		<member name="F:s_DamageFeedMaxUpdateRate">
			<referrer name="DamageFeedUpdate"/>
		</member>
		<member name="F:s_DamageFeedPlayer">
			<referrer name="SetDamageFeedForPlayer"/>
			<referrer name="IsDamageFeedActive"/>
			<referrer name="OnPlayerConnect"/>
		</member>
		<member name="F:s_DamageFeedTaken">
			<tagname value="PlayerText"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="ScriptExit"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdateText"/>
		</member>
		<member name="F:s_DamageFeedTimer">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="WC_DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdate"/>
		</member>
		<member name="F:s_DamageGivenSound">
			<referrer name="SetDamageSounds"/>
			<referrer name="OnPlayerDamageDone"/>
		</member>
		<member name="F:s_DamageRangeRanges">
			<tagname value="Float"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_DamageRangeSteps">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_DamageRangeValues">
			<tagname value="Float"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_DamageTakenSound">
			<referrer name="SetDamageSounds"/>
			<referrer name="ScriptInit"/>
			<referrer name="OnPlayerDamageDone"/>
		</member>
		<member name="F:s_DamageType">
			<referrer name="SetWeaponDamage"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_DeathSkip">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_DeathSkipTick">
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_DeathTimer">
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="PlayerDeath"/>
			<referrer name="OnPlayerDeathFinished"/>
		</member>
		<member name="F:s_DelayedDeathTimer">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="WC_DelayedDeath"/>
		</member>
		<member name="F:s_FallDeathVelocity">
			<tagname value="Float"/>
			<referrer name="SetCustomFallDamage"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_FirstSpawn">
			<tagname value="bool"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
		</member>
		<member name="F:s_ForceClassSelection">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="UpdateHealthBar"/>
		</member>
		<member name="F:s_HealthBarBackground">
			<tagname value="Text"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="SetHealthBarVisible"/>
		</member>
		<member name="F:s_HealthBarBorder">
			<tagname value="Text"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="SetHealthBarVisible"/>
		</member>
		<member name="F:s_HealthBarForeground">
			<tagname value="PlayerText"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="SetHealthBarVisible"/>
			<referrer name="PlayerDeath"/>
		</member>
		<member name="F:s_HealthBarVisible">
			<tagname value="bool"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="SetHealthBarVisible"/>
		</member>
		<member name="F:s_HitsIssued">
			<referrer name="AverageHitRate"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_InClassSelection">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_InternalPlayerTextDraw">
			<tagname value="bool"/>
			<referrer name="WC_CreatePlayerTextDraw"/>
			<referrer name="WC_PlayerTextDrawDestroy"/>
			<referrer name="WC_PlayerTextDrawLetterSize"/>
			<referrer name="WC_PlayerTextDrawTextSize"/>
			<referrer name="WC_PlayerTextDrawAlignment"/>
			<referrer name="WC_PlayerTextDrawColor"/>
			<referrer name="WC_PlayerTextDrawUseBox"/>
			<referrer name="WC_PlayerTextDrawBoxColor"/>
			<referrer name="WC_PlayerTextDrawSetShadow"/>
			<referrer name="WC_PlayerTextDrawSetOutline"/>
			<referrer name="WC_PlayerTextDrawBackgroundColo"/>
			<referrer name="WC_PlayerTextDrawFont"/>
			<referrer name="WC_PlayerTextDrawSetProportiona"/>
			<referrer name="WC_PlayerTextDrawSetSelectable"/>
			<referrer name="WC_PlayerTextDrawShow"/>
			<referrer name="WC_PlayerTextDrawHide"/>
			<referrer name="WC_PlayerTextDrawSetString"/>
			<referrer name="WC_PlayerTextDrawSetPreviewMode"/>
			<referrer name="WC_PlayerTextDrawSetPreviewRot"/>
			<referrer name="WC_PlayerTextDrawSetPreviewVehC"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdate"/>
		</member>
		<member name="F:s_InternalTextDraw">
			<tagname value="bool"/>
			<referrer name="WC_TextDrawCreate"/>
			<referrer name="WC_TextDrawDestroy"/>
			<referrer name="WC_TextDrawLetterSize"/>
			<referrer name="WC_TextDrawTextSize"/>
			<referrer name="WC_TextDrawAlignment"/>
			<referrer name="WC_TextDrawColor"/>
			<referrer name="WC_TextDrawUseBox"/>
			<referrer name="WC_TextDrawBoxColor"/>
			<referrer name="WC_TextDrawSetShadow"/>
			<referrer name="WC_TextDrawSetOutline"/>
			<referrer name="WC_TextDrawBackgroundColor"/>
			<referrer name="WC_TextDrawFont"/>
			<referrer name="WC_TextDrawSetProportional"/>
			<referrer name="WC_TextDrawSetSelectable"/>
			<referrer name="WC_TextDrawShowForPlayer"/>
			<referrer name="WC_TextDrawHideForPlayer"/>
			<referrer name="WC_TextDrawShowForAll"/>
			<referrer name="WC_TextDrawHideForAll"/>
			<referrer name="WC_TextDrawSetString"/>
			<referrer name="WC_TextDrawSetPreviewModel"/>
			<referrer name="WC_TextDrawSetPreviewRot"/>
			<referrer name="WC_TextDrawSetPreviewVehCol"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
		</member>
		<member name="F:s_IsDying">
			<referrer name="IsPlayerSpawned"/>
			<referrer name="IsPlayerDying"/>
			<referrer name="WC_SpawnPlayer"/>
			<referrer name="WC_GetPlayerState"/>
			<referrer name="WC_ApplyAnimation"/>
			<referrer name="WC_ClearAnimations"/>
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="WC_TogglePlayerControllable"/>
			<referrer name="WC_SetPlayerPos"/>
			<referrer name="WC_SetPlayerPosFindZ"/>
			<referrer name="WC_SetPlayerVelocity"/>
			<referrer name="wc_SetPlayerVirtualWorld"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerStreamIn"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerLeaveCheckpoint"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="PlayerDeath"/>
			<referrer name="WC_VendingMachineUsed"/>
			<referrer name="WC_PlayerDeathRespawn"/>
		</member>
		<member name="F:s_KnifeTimeout">
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:s_LagCompMode">
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_LastAnim">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_LastExplosive">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_LastHitIdx">
			<referrer name="AverageHitRate"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_LastHitTicks">
			<referrer name="AverageHitRate"/>
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_LastHitWeapons">
			<referrer name="AverageHitRate"/>
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_LastSentArmour">
			<referrer name="OnPlayerConnect"/>
			<referrer name="UpdateHealthBar"/>
		</member>
		<member name="F:s_LastSentHealth">
			<referrer name="OnPlayerConnect"/>
			<referrer name="UpdateHealthBar"/>
		</member>
		<member name="F:s_LastShot">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_LastShotIdx">
			<referrer name="AverageShootRate"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_LastShotTicks">
			<referrer name="AverageShootRate"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_LastShotWeapons">
			<referrer name="AverageShootRate"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_LastStop">
			<referrer name="WC_ClearAnimations"/>
			<referrer name="WC_TogglePlayerControllable"/>
			<referrer name="WC_SetPlayerPos"/>
			<referrer name="WC_SetPlayerPosFindZ"/>
			<referrer name="WC_SetPlayerVelocity"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_LastUpdate">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="ScriptInit"/>
			<referrer name="IsPlayerPaused"/>
			<referrer name="afkCheck"/>
		</member>
		<member name="F:s_LastVehicleEnterTime">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="ScriptInit"/>
			<referrer name="InflictDamage"/>
		</member>
		<member name="F:s_LastVehicleShooter">
			<referrer name="WC_DestroyVehicle"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_LastVehicleTick">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="OnPlayerExitVehicle"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="WasPlayerInVehicle"/>
		</member>
		<member name="F:s_LastZ">
			<tagname value="Float"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_LastZVelo">
			<tagname value="Float"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerUpdate"/>
		</member>
		<member name="F:s_MaxHitRateSamples">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_MaxShootRateSamples">
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_MaxWeaponShootRate">
			<referrer name="SetWeaponShootRate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_PlayerArmour">
			<tagname value="Float"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="WC_GetPlayerArmour"/>
			<referrer name="WC_SetPlayerArmour"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
		</member>
		<member name="F:s_PlayerClass">
			<referrer name="WC_SetSpawnInfo"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
		</member>
		<member name="F:s_PlayerFallbackSpawnInfo">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
		</member>
		<member name="F:s_PlayerHealth">
			<tagname value="Float"/>
			<referrer name="WC_SpawnPlayer"/>
			<referrer name="WC_GetPlayerHealth"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="OnPlayerDeathFinished"/>
			<referrer name="WC_VendingMachineUsed"/>
		</member>
		<member name="F:s_PlayerMaxArmour">
			<tagname value="Float"/>
			<referrer name="SetPlayerMaxArmour"/>
			<referrer name="GetPlayerMaxArmour"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="WC_SetPlayerArmour"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="UpdateHealthBar"/>
		</member>
		<member name="F:s_PlayerMaxHealth">
			<tagname value="Float"/>
			<referrer name="SetPlayerMaxHealth"/>
			<referrer name="GetPlayerMaxHealth"/>
			<referrer name="WC_SpawnPlayer"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="OnPlayerDeathFinished"/>
			<referrer name="WC_VendingMachineUsed"/>
		</member>
		<member name="F:s_PlayerSpawnInfo">
			<referrer name="WC_SetSpawnInfo"/>
			<referrer name="OnPlayerSpawn"/>
		</member>
		<member name="F:s_PlayerTeam">
			<referrer name="WC_GetPlayerTeam"/>
			<referrer name="WC_SetPlayerTeam"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="HasSameTeam"/>
		</member>
		<member name="F:s_PreviousHitI">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDamageDone"/>
		</member>
		<member name="F:s_PreviousHits">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerDamageDone"/>
		</member>
		<member name="F:s_RejectedHits">
			<referrer name="GetRejectedHit"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="AddRejectedHit"/>
		</member>
		<member name="F:s_RejectedHitsIdx">
			<referrer name="GetRejectedHit"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="AddRejectedHit"/>
		</member>
		<member name="F:s_RespawnTime">
			<referrer name="SetRespawnTime"/>
			<referrer name="GetRespawnTime"/>
			<referrer name="PlayerDeath"/>
		</member>
		<member name="F:s_ShotsFired">
			<referrer name="AverageShootRate"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_SpawnForStreamedIn">
			<tagname value="bool"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="WC_SetSpawnForStreamedIn"/>
		</member>
		<member name="F:s_SpawnInfoModified">
			<tagname value="bool"/>
			<referrer name="WC_SetSpawnInfo"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="SpawnPlayerInPlace"/>
		</member>
		<member name="F:s_Spectating">
			<referrer name="WC_PlayerSpectatePlayer"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="DamageFeedAddHitGiven"/>
			<referrer name="DamageFeedAddHitTaken"/>
			<referrer name="OnPlayerDamageDone"/>
		</member>
		<member name="F:s_SyncData">
			<referrer name="OnPlayerSpawn"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="SaveSyncData"/>
		</member>
		<member name="F:s_TrueDeath">
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="ScriptInit"/>
			<referrer name="WC_PlayerDeathRespawn"/>
		</member>
		<member name="F:s_ValidDamageGiven">
			<referrer name="OnPlayerGiveDamage"/>
		</member>
		<member name="F:s_ValidDamageTaken">
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:s_VehicleAlive">
			<tagname value="bool"/>
			<referrer name="WC_DestroyVehicle"/>
			<referrer name="WC_CreateVehicle"/>
			<referrer name="WC_AddStaticVehicle"/>
			<referrer name="WC_AddStaticVehicleEx"/>
			<referrer name="OnVehicleSpawn"/>
			<referrer name="OnVehicleDeath"/>
		</member>
		<member name="F:s_VehiclePassengerDamage">
			<referrer name="SetVehiclePassengerDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_VehicleRespawnTimer">
			<referrer name="WC_DestroyVehicle"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="WC_KillVehicle"/>
			<referrer name="WC_OnDeadVehicleSpawn"/>
			<referrer name="OnVehicleSpawn"/>
			<referrer name="OnVehicleDeath"/>
		</member>
		<member name="F:s_VehicleUnoccupiedDamage">
			<referrer name="SetVehicleUnoccupiedDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_VendingMachineObject">
			<referrer name="CreateVendingMachines"/>
			<referrer name="DestroyVendingMachines"/>
		</member>
		<member name="F:s_VendingUseTimer">
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ScriptExit"/>
			<referrer name="WC_VendingMachineUsed"/>
		</member>
		<member name="F:s_WeaponDamage">
			<tagname value="Float"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="SetCustomFallDamage"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
		</member>
		<member name="F:s_WeaponRange">
			<tagname value="Float"/>
			<referrer name="SetWeaponMaxRange"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="F:s_World">
			<referrer name="wc_SetPlayerVirtualWorld"/>
			<referrer name="WC_GetPlayerVirtualWorld"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="ScriptInit"/>
			<referrer name="UpdatePlayerVirtualWorld"/>
		</member>
		<member name="F:sc_VendingMachines">
			<tagname value="Float"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="RemoveDefaultVendingMachines"/>
			<referrer name="CreateVendingMachines"/>
		</member>
		<member name="F:size_l">
			<remarks>  <p>Because of the strange way we manipulate the stack, this function actually  gets called twice as often as you would expect.  Essentially, for this  (psudo-)loop:</p>  <code>  for (new i = iter_func(); Iter_YieldLoop(); )                              <br />  {                                                                          <br />  }  </code>  <p>The loop is entered and <c>iter_func()</c> is called.  This indirectly  calls <c>yield</c>, which returns to the call point of that function.  The  loop check is then entered and <c>Iter_YieldLoop()</c> is called.  Depending  on if <c>yield</c> was actually used, the main loop body is entered.  At the  end of that iteration, the loop check is run again and so  <c>Iter_YieldLoop()</c> is called again.</p>  <p>This is where it gets wierd!</p>  <p><c>Iter_YieldLoop()</c> does a stack copy and a jump in to the earlier  call to <c>iter_func</c>, whose return address is earlier in the code.  When  a <c>yield</c> is done again, that return is to the first part of the  <c>for</c> loop, which then instantly enters the loop check section and calls  <c>Iter_YieldLoop()</c> again (as a side-effect, saving the iterator value in  the loop variable).</p>  <p>So for <c>N</c> iterations of the loop, <c>Iter_YieldLoop()</c> is called  <c>2N + 1</c> times, and should be made aware of which phase of its calls it  is in.</p>  <p>This is, of course, made more complicated by nested loops, but that just  means we need to store the state on our own stack.</p>  </remarks> 
		</member>
		<member name="F:skinList">
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnPlayerModelSelection"/>
		</member>
		<member name="F:src_l">
		</member>
		<member name="F:szBigString">
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="ShowPlayerDuelMenu"/>
		</member>
		<member name="F:szSmallString">
			<referrer name="OnDuelTimer"/>
		</member>
		<member name="F:tfActor">
			<referrer name="topQuery"/>
		</member>
		<member name="F:tfLabel">
			<tagname value="Text3D"/>
			<referrer name="topQuery"/>
		</member>
		<member name="F:tfTimer">
			<referrer name="@yH_OnGameModeInit@010"/>
			<referrer name="@yH_OnGameModeExit@010"/>
		</member>
		<member name="F:using_deprecated_foreach_syntax">
			<tagname value="bool"/>
			The workings of these macros are very extensively documented at:  <a href="http://forum.sa-mp.com/showpost.php?p=2823668" /> 
		</member>
		<member name="F:using_deprecated_itertag_syntax">
			<tagname value="bool"/>
		</member>

		<!-- functions -->
		<member name="M:operator!(Handle:)" syntax="operator!(Handle:)(handle)">
			<tagname value="bool"/>
			<stacksize value="3"/>
			<dependency name="handle_alive"/>
			<param name="handle">
				<paraminfo>Handle </paraminfo>
			</param>
		</member>
		<member name="M:operator!(Float:)" syntax="operator!(Float:)(oper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="cellmax"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(Handle:,Handle:)" syntax="operator!=(Handle:,Handle:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(Handle:,Handle:)"/>
			<param name="arg1">
				<paraminfo>Handle </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Handle </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(Iter:,Iter:)" syntax="operator!=(Iter:,Iter:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(Iter:,Iter:)"/>
			<param name="arg1">
				<paraminfo>Iter </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Iter </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(String@Const:,String@Const:)" syntax="operator!=(String@Const:,String@Const:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(String@Const:,String@Const:)"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(String@Const:,String:)" syntax="operator!=(String@Const:,String:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(String@Const:,String:)"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(String:,String@Const:)" syntax="operator!=(String:,String@Const:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(String:,String@Const:)"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(String:,String:)" syntax="operator!=(String:,String:)(arg1, arg2)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="operator==(String:,String:)"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,_:)" syntax="operator+(AmxVariantBuffer:,_:)(arg1, arg2)">
			<tagname value="AmxVariantBuffer"/>
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,_:)" syntax="operator+(AmxStringBuffer:,_:)(arg1, arg2)">
			<tagname value="AmxStringBuffer"/>
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,AmxVariantBuffer:)" syntax="operator%(AmxVariantBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,AmxVariantBuffer:)" syntax="operator/(AmxVariantBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,AmxVariantBuffer:)" syntax="operator*(AmxVariantBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,AmxVariantBuffer:)" syntax="operator-(AmxVariantBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,AmxVariantBuffer:)" syntax="operator+(AmxVariantBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,ConstAmxVariant:)" syntax="operator%(AmxVariantBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,ConstAmxVariant:)" syntax="operator/(AmxVariantBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,ConstAmxVariant:)" syntax="operator*(AmxVariantBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,ConstAmxVariant:)" syntax="operator-(AmxVariantBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,ConstAmxVariant:)" syntax="operator+(AmxVariantBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,AmxVariant:)" syntax="operator%(AmxVariantBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,AmxVariant:)" syntax="operator/(AmxVariantBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,AmxVariant:)" syntax="operator*(AmxVariantBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,AmxVariant:)" syntax="operator-(AmxVariantBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,AmxVariant:)" syntax="operator+(AmxVariantBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,AmxStringBuffer:)" syntax="operator%(AmxVariantBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,AmxStringBuffer:)" syntax="operator/(AmxVariantBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,AmxStringBuffer:)" syntax="operator*(AmxVariantBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,AmxStringBuffer:)" syntax="operator-(AmxVariantBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,AmxStringBuffer:)" syntax="operator+(AmxVariantBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,ConstAmxString:)" syntax="operator%(AmxVariantBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,ConstAmxString:)" syntax="operator/(AmxVariantBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,ConstAmxString:)" syntax="operator*(AmxVariantBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,ConstAmxString:)" syntax="operator-(AmxVariantBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,ConstAmxString:)" syntax="operator+(AmxVariantBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,AmxString:)" syntax="operator%(AmxVariantBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,AmxString:)" syntax="operator/(AmxVariantBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,AmxString:)" syntax="operator*(AmxVariantBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,AmxString:)" syntax="operator-(AmxVariantBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,AmxString:)" syntax="operator+(AmxVariantBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,String@Const:)" syntax="operator%(AmxVariantBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,String@Const:)" syntax="operator/(AmxVariantBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,String@Const:)" syntax="operator*(AmxVariantBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,String@Const:)" syntax="operator-(AmxVariantBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,String@Const:)" syntax="operator+(AmxVariantBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,String:)" syntax="operator%(AmxVariantBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,String:)" syntax="operator/(AmxVariantBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,String:)" syntax="operator*(AmxVariantBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,String:)" syntax="operator-(AmxVariantBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,String:)" syntax="operator+(AmxVariantBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,Float:)" syntax="operator%(AmxVariantBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,Float:)" syntax="operator/(AmxVariantBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,Float:)" syntax="operator*(AmxVariantBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,Float:)" syntax="operator-(AmxVariantBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariantBuffer:,Float:)" syntax="operator+(AmxVariantBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariantBuffer:,_:)" syntax="operator%(AmxVariantBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(AmxVariantBuffer:,_:)" syntax="operator/(AmxVariantBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(AmxVariantBuffer:,_:)" syntax="operator*(AmxVariantBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:,_:)" syntax="operator-(AmxVariantBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,AmxVariantBuffer:)" syntax="operator%(ConstAmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,AmxVariantBuffer:)" syntax="operator/(ConstAmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,AmxVariantBuffer:)" syntax="operator*(ConstAmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,AmxVariantBuffer:)" syntax="operator-(ConstAmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,AmxVariantBuffer:)" syntax="operator+(ConstAmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,ConstAmxVariant:)" syntax="operator%(ConstAmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,ConstAmxVariant:)" syntax="operator/(ConstAmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,ConstAmxVariant:)" syntax="operator*(ConstAmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,ConstAmxVariant:)" syntax="operator-(ConstAmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,ConstAmxVariant:)" syntax="operator+(ConstAmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,AmxVariant:)" syntax="operator%(ConstAmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,AmxVariant:)" syntax="operator/(ConstAmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,AmxVariant:)" syntax="operator*(ConstAmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,AmxVariant:)" syntax="operator-(ConstAmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,AmxVariant:)" syntax="operator+(ConstAmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,AmxStringBuffer:)" syntax="operator%(ConstAmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,AmxStringBuffer:)" syntax="operator/(ConstAmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,AmxStringBuffer:)" syntax="operator*(ConstAmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,AmxStringBuffer:)" syntax="operator-(ConstAmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,AmxStringBuffer:)" syntax="operator+(ConstAmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,ConstAmxString:)" syntax="operator%(ConstAmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,ConstAmxString:)" syntax="operator/(ConstAmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,ConstAmxString:)" syntax="operator*(ConstAmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,ConstAmxString:)" syntax="operator-(ConstAmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,ConstAmxString:)" syntax="operator+(ConstAmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,AmxString:)" syntax="operator%(ConstAmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,AmxString:)" syntax="operator/(ConstAmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,AmxString:)" syntax="operator*(ConstAmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,AmxString:)" syntax="operator-(ConstAmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,AmxString:)" syntax="operator+(ConstAmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,String@Const:)" syntax="operator%(ConstAmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,String@Const:)" syntax="operator/(ConstAmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,String@Const:)" syntax="operator*(ConstAmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,String@Const:)" syntax="operator-(ConstAmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,String@Const:)" syntax="operator+(ConstAmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,String:)" syntax="operator%(ConstAmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,String:)" syntax="operator/(ConstAmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,String:)" syntax="operator*(ConstAmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,String:)" syntax="operator-(ConstAmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,String:)" syntax="operator+(ConstAmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,Float:)" syntax="operator%(ConstAmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,Float:)" syntax="operator/(ConstAmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,Float:)" syntax="operator*(ConstAmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,Float:)" syntax="operator-(ConstAmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,Float:)" syntax="operator+(ConstAmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxVariant:,_:)" syntax="operator%(ConstAmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(ConstAmxVariant:,_:)" syntax="operator/(ConstAmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(ConstAmxVariant:,_:)" syntax="operator*(ConstAmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:,_:)" syntax="operator-(ConstAmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(ConstAmxVariant:,_:)" syntax="operator+(ConstAmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,AmxVariantBuffer:)" syntax="operator%(AmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,AmxVariantBuffer:)" syntax="operator/(AmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,AmxVariantBuffer:)" syntax="operator*(AmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,AmxVariantBuffer:)" syntax="operator-(AmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,AmxVariantBuffer:)" syntax="operator+(AmxVariant:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,ConstAmxVariant:)" syntax="operator%(AmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,ConstAmxVariant:)" syntax="operator/(AmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,ConstAmxVariant:)" syntax="operator*(AmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,ConstAmxVariant:)" syntax="operator-(AmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,ConstAmxVariant:)" syntax="operator+(AmxVariant:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,AmxVariant:)" syntax="operator%(AmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,AmxVariant:)" syntax="operator/(AmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,AmxVariant:)" syntax="operator*(AmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,AmxVariant:)" syntax="operator-(AmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,AmxVariant:)" syntax="operator+(AmxVariant:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,AmxStringBuffer:)" syntax="operator%(AmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,AmxStringBuffer:)" syntax="operator/(AmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,AmxStringBuffer:)" syntax="operator*(AmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,AmxStringBuffer:)" syntax="operator-(AmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,AmxStringBuffer:)" syntax="operator+(AmxVariant:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,ConstAmxString:)" syntax="operator%(AmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,ConstAmxString:)" syntax="operator/(AmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,ConstAmxString:)" syntax="operator*(AmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,ConstAmxString:)" syntax="operator-(AmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,ConstAmxString:)" syntax="operator+(AmxVariant:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,AmxString:)" syntax="operator%(AmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,AmxString:)" syntax="operator/(AmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,AmxString:)" syntax="operator*(AmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,AmxString:)" syntax="operator-(AmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,AmxString:)" syntax="operator+(AmxVariant:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,String@Const:)" syntax="operator%(AmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,String@Const:)" syntax="operator/(AmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,String@Const:)" syntax="operator*(AmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,String@Const:)" syntax="operator-(AmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,String@Const:)" syntax="operator+(AmxVariant:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,String:)" syntax="operator%(AmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,String:)" syntax="operator/(AmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,String:)" syntax="operator*(AmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,String:)" syntax="operator-(AmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,String:)" syntax="operator+(AmxVariant:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,Float:)" syntax="operator%(AmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,Float:)" syntax="operator/(AmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,Float:)" syntax="operator*(AmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,Float:)" syntax="operator-(AmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,Float:)" syntax="operator+(AmxVariant:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxVariant:,_:)" syntax="operator%(AmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(AmxVariant:,_:)" syntax="operator/(AmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(AmxVariant:,_:)" syntax="operator*(AmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(AmxVariant:,_:)" syntax="operator-(AmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(AmxVariant:,_:)" syntax="operator+(AmxVariant:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxVariant </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,AmxVariantBuffer:)" syntax="operator%(AmxStringBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,AmxVariantBuffer:)" syntax="operator/(AmxStringBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,AmxVariantBuffer:)" syntax="operator*(AmxStringBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,AmxVariantBuffer:)" syntax="operator-(AmxStringBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,AmxVariantBuffer:)" syntax="operator+(AmxStringBuffer:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,ConstAmxVariant:)" syntax="operator%(AmxStringBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,ConstAmxVariant:)" syntax="operator/(AmxStringBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,ConstAmxVariant:)" syntax="operator*(AmxStringBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,ConstAmxVariant:)" syntax="operator-(AmxStringBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,ConstAmxVariant:)" syntax="operator+(AmxStringBuffer:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,AmxVariant:)" syntax="operator%(AmxStringBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,AmxVariant:)" syntax="operator/(AmxStringBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,AmxVariant:)" syntax="operator*(AmxStringBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,AmxVariant:)" syntax="operator-(AmxStringBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,AmxVariant:)" syntax="operator+(AmxStringBuffer:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,AmxStringBuffer:)" syntax="operator%(AmxStringBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,AmxStringBuffer:)" syntax="operator/(AmxStringBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,AmxStringBuffer:)" syntax="operator*(AmxStringBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,AmxStringBuffer:)" syntax="operator-(AmxStringBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,AmxStringBuffer:)" syntax="operator+(AmxStringBuffer:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,ConstAmxString:)" syntax="operator%(AmxStringBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,ConstAmxString:)" syntax="operator/(AmxStringBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,ConstAmxString:)" syntax="operator*(AmxStringBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,ConstAmxString:)" syntax="operator-(AmxStringBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,ConstAmxString:)" syntax="operator+(AmxStringBuffer:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,AmxString:)" syntax="operator%(AmxStringBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,AmxString:)" syntax="operator/(AmxStringBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,AmxString:)" syntax="operator*(AmxStringBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,AmxString:)" syntax="operator-(AmxStringBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,AmxString:)" syntax="operator+(AmxStringBuffer:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,String@Const:)" syntax="operator%(AmxStringBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,String@Const:)" syntax="operator/(AmxStringBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,String@Const:)" syntax="operator*(AmxStringBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,String@Const:)" syntax="operator-(AmxStringBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,String@Const:)" syntax="operator+(AmxStringBuffer:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,String:)" syntax="operator%(AmxStringBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,String:)" syntax="operator/(AmxStringBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,String:)" syntax="operator*(AmxStringBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,String:)" syntax="operator-(AmxStringBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,String:)" syntax="operator+(AmxStringBuffer:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,Float:)" syntax="operator%(AmxStringBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,Float:)" syntax="operator/(AmxStringBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,Float:)" syntax="operator*(AmxStringBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,Float:)" syntax="operator-(AmxStringBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxStringBuffer:,Float:)" syntax="operator+(AmxStringBuffer:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxStringBuffer:,_:)" syntax="operator%(AmxStringBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(AmxStringBuffer:,_:)" syntax="operator/(AmxStringBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(AmxStringBuffer:,_:)" syntax="operator*(AmxStringBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:,_:)" syntax="operator-(AmxStringBuffer:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,AmxVariantBuffer:)" syntax="operator%(ConstAmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,AmxVariantBuffer:)" syntax="operator/(ConstAmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,AmxVariantBuffer:)" syntax="operator*(ConstAmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,AmxVariantBuffer:)" syntax="operator-(ConstAmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,AmxVariantBuffer:)" syntax="operator+(ConstAmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,ConstAmxVariant:)" syntax="operator%(ConstAmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,ConstAmxVariant:)" syntax="operator/(ConstAmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,ConstAmxVariant:)" syntax="operator*(ConstAmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,ConstAmxVariant:)" syntax="operator-(ConstAmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,ConstAmxVariant:)" syntax="operator+(ConstAmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,AmxVariant:)" syntax="operator%(ConstAmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,AmxVariant:)" syntax="operator/(ConstAmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,AmxVariant:)" syntax="operator*(ConstAmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,AmxVariant:)" syntax="operator-(ConstAmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,AmxVariant:)" syntax="operator+(ConstAmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,AmxStringBuffer:)" syntax="operator%(ConstAmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,AmxStringBuffer:)" syntax="operator/(ConstAmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,AmxStringBuffer:)" syntax="operator*(ConstAmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,AmxStringBuffer:)" syntax="operator-(ConstAmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,AmxStringBuffer:)" syntax="operator+(ConstAmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,ConstAmxString:)" syntax="operator%(ConstAmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,ConstAmxString:)" syntax="operator/(ConstAmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,ConstAmxString:)" syntax="operator*(ConstAmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,ConstAmxString:)" syntax="operator-(ConstAmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,ConstAmxString:)" syntax="operator+(ConstAmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,AmxString:)" syntax="operator%(ConstAmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,AmxString:)" syntax="operator/(ConstAmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,AmxString:)" syntax="operator*(ConstAmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,AmxString:)" syntax="operator-(ConstAmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,AmxString:)" syntax="operator+(ConstAmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,String@Const:)" syntax="operator%(ConstAmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,String@Const:)" syntax="operator/(ConstAmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,String@Const:)" syntax="operator*(ConstAmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,String@Const:)" syntax="operator-(ConstAmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,String@Const:)" syntax="operator+(ConstAmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,String:)" syntax="operator%(ConstAmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,String:)" syntax="operator/(ConstAmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,String:)" syntax="operator*(ConstAmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,String:)" syntax="operator-(ConstAmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,String:)" syntax="operator+(ConstAmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,Float:)" syntax="operator%(ConstAmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,Float:)" syntax="operator/(ConstAmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,Float:)" syntax="operator*(ConstAmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,Float:)" syntax="operator-(ConstAmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,Float:)" syntax="operator+(ConstAmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(ConstAmxString:,_:)" syntax="operator%(ConstAmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(ConstAmxString:,_:)" syntax="operator/(ConstAmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(ConstAmxString:,_:)" syntax="operator*(ConstAmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:,_:)" syntax="operator-(ConstAmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(ConstAmxString:,_:)" syntax="operator+(ConstAmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(AmxString:,AmxVariantBuffer:)" syntax="operator%(AmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,AmxVariantBuffer:)" syntax="operator/(AmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,AmxVariantBuffer:)" syntax="operator*(AmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,AmxVariantBuffer:)" syntax="operator-(AmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,AmxVariantBuffer:)" syntax="operator+(AmxString:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,ConstAmxVariant:)" syntax="operator%(AmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,ConstAmxVariant:)" syntax="operator/(AmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,ConstAmxVariant:)" syntax="operator*(AmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,ConstAmxVariant:)" syntax="operator-(AmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,ConstAmxVariant:)" syntax="operator+(AmxString:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,AmxVariant:)" syntax="operator%(AmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,AmxVariant:)" syntax="operator/(AmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,AmxVariant:)" syntax="operator*(AmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,AmxVariant:)" syntax="operator-(AmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,AmxVariant:)" syntax="operator+(AmxString:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,AmxStringBuffer:)" syntax="operator%(AmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,AmxStringBuffer:)" syntax="operator/(AmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,AmxStringBuffer:)" syntax="operator*(AmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,AmxStringBuffer:)" syntax="operator-(AmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,AmxStringBuffer:)" syntax="operator+(AmxString:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,ConstAmxString:)" syntax="operator%(AmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,ConstAmxString:)" syntax="operator/(AmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,ConstAmxString:)" syntax="operator*(AmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,ConstAmxString:)" syntax="operator-(AmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,ConstAmxString:)" syntax="operator+(AmxString:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,AmxString:)" syntax="operator%(AmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,AmxString:)" syntax="operator/(AmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,AmxString:)" syntax="operator*(AmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,AmxString:)" syntax="operator-(AmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,AmxString:)" syntax="operator+(AmxString:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,String@Const:)" syntax="operator%(AmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,String@Const:)" syntax="operator/(AmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,String@Const:)" syntax="operator*(AmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,String@Const:)" syntax="operator-(AmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,String@Const:)" syntax="operator+(AmxString:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,String:)" syntax="operator%(AmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,String:)" syntax="operator/(AmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,String:)" syntax="operator*(AmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,String:)" syntax="operator-(AmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,String:)" syntax="operator+(AmxString:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,Float:)" syntax="operator%(AmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(AmxString:,Float:)" syntax="operator/(AmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(AmxString:,Float:)" syntax="operator*(AmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:,Float:)" syntax="operator-(AmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(AmxString:,Float:)" syntax="operator+(AmxString:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(AmxString:,_:)" syntax="operator%(AmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(AmxString:,_:)" syntax="operator/(AmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(AmxString:,_:)" syntax="operator*(AmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(AmxString:,_:)" syntax="operator-(AmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(AmxString:,_:)" syntax="operator+(AmxString:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>AmxString </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(String@Const:,AmxVariantBuffer:)" syntax="operator%(String@Const:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,AmxVariantBuffer:)" syntax="operator/(String@Const:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,AmxVariantBuffer:)" syntax="operator*(String@Const:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,AmxVariantBuffer:)" syntax="operator-(String@Const:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,AmxVariantBuffer:)" syntax="operator+(String@Const:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,ConstAmxVariant:)" syntax="operator%(String@Const:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,ConstAmxVariant:)" syntax="operator/(String@Const:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,ConstAmxVariant:)" syntax="operator*(String@Const:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,ConstAmxVariant:)" syntax="operator-(String@Const:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,ConstAmxVariant:)" syntax="operator+(String@Const:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,AmxVariant:)" syntax="operator%(String@Const:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,AmxVariant:)" syntax="operator/(String@Const:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,AmxVariant:)" syntax="operator*(String@Const:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,AmxVariant:)" syntax="operator-(String@Const:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,AmxVariant:)" syntax="operator+(String@Const:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,AmxStringBuffer:)" syntax="operator%(String@Const:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,AmxStringBuffer:)" syntax="operator/(String@Const:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,AmxStringBuffer:)" syntax="operator*(String@Const:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,AmxStringBuffer:)" syntax="operator-(String@Const:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,AmxStringBuffer:)" syntax="operator+(String@Const:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,ConstAmxString:)" syntax="operator%(String@Const:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,ConstAmxString:)" syntax="operator/(String@Const:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,ConstAmxString:)" syntax="operator*(String@Const:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,ConstAmxString:)" syntax="operator-(String@Const:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,ConstAmxString:)" syntax="operator+(String@Const:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,AmxString:)" syntax="operator%(String@Const:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,AmxString:)" syntax="operator/(String@Const:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,AmxString:)" syntax="operator*(String@Const:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,AmxString:)" syntax="operator-(String@Const:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,AmxString:)" syntax="operator+(String@Const:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,String@Const:)" syntax="operator/(String@Const:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,String@Const:)" syntax="operator*(String@Const:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,String@Const:)" syntax="operator-(String@Const:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,String:)" syntax="operator/(String@Const:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,String:)" syntax="operator*(String@Const:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,String:)" syntax="operator-(String@Const:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,Float:)" syntax="operator%(String@Const:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String@Const:,Float:)" syntax="operator/(String@Const:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String@Const:,Float:)" syntax="operator*(String@Const:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:,Float:)" syntax="operator-(String@Const:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String@Const:,Float:)" syntax="operator+(String@Const:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String@Const:,_:)" syntax="operator%(String@Const:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(String@Const:,_:)" syntax="operator/(String@Const:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(String@Const:,_:)" syntax="operator*(String@Const:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(String@Const:,_:)" syntax="operator-(String@Const:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(String@Const:,_:)" syntax="operator+(String@Const:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator%(String:,AmxVariantBuffer:)" syntax="operator%(String:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,AmxVariantBuffer:)" syntax="operator/(String:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,AmxVariantBuffer:)" syntax="operator*(String:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,AmxVariantBuffer:)" syntax="operator-(String:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,AmxVariantBuffer:)" syntax="operator+(String:,AmxVariantBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,ConstAmxVariant:)" syntax="operator%(String:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,ConstAmxVariant:)" syntax="operator/(String:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,ConstAmxVariant:)" syntax="operator*(String:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,ConstAmxVariant:)" syntax="operator-(String:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,ConstAmxVariant:)" syntax="operator+(String:,ConstAmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,AmxVariant:)" syntax="operator%(String:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,AmxVariant:)" syntax="operator/(String:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,AmxVariant:)" syntax="operator*(String:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,AmxVariant:)" syntax="operator-(String:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,AmxVariant:)" syntax="operator+(String:,AmxVariant:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,AmxStringBuffer:)" syntax="operator%(String:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,AmxStringBuffer:)" syntax="operator/(String:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,AmxStringBuffer:)" syntax="operator*(String:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,AmxStringBuffer:)" syntax="operator-(String:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,AmxStringBuffer:)" syntax="operator+(String:,AmxStringBuffer:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,ConstAmxString:)" syntax="operator%(String:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,ConstAmxString:)" syntax="operator/(String:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,ConstAmxString:)" syntax="operator*(String:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,ConstAmxString:)" syntax="operator-(String:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,ConstAmxString:)" syntax="operator+(String:,ConstAmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,AmxString:)" syntax="operator%(String:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,AmxString:)" syntax="operator/(String:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,AmxString:)" syntax="operator*(String:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,AmxString:)" syntax="operator-(String:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,AmxString:)" syntax="operator+(String:,AmxString:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,String@Const:)" syntax="operator/(String:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,String@Const:)" syntax="operator*(String:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,String@Const:)" syntax="operator-(String:,String@Const:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,String:)" syntax="operator/(String:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,String:)" syntax="operator*(String:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,String:)" syntax="operator-(String:,String:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,Float:)" syntax="operator%(String:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(String:,Float:)" syntax="operator/(String:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(String:,Float:)" syntax="operator*(String:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:,Float:)" syntax="operator-(String:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(String:,Float:)" syntax="operator+(String:,Float:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(String:,_:)" syntax="operator%(String:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator/(String:,_:)" syntax="operator/(String:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator*(String:,_:)" syntax="operator*(String:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator-(String:,_:)" syntax="operator-(String:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator+(String:,_:)" syntax="operator+(String:,_:)(arg1, arg2)">
			<stacksize value="1"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
			</param>
		</member>
		<member name="M:operator++(AmxVariantBuffer:)" syntax="operator++(AmxVariantBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator++(ConstAmxVariant:)" syntax="operator++(ConstAmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator++(AmxVariant:)" syntax="operator++(AmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator++(AmxStringBuffer:)" syntax="operator++(AmxStringBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator++(ConstAmxString:)" syntax="operator++(ConstAmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator++(AmxString:)" syntax="operator++(AmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator++(String@Const:)" syntax="operator++(String@Const:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator++(String:)" syntax="operator++(String:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator--(AmxVariantBuffer:)" syntax="operator--(AmxVariantBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariantBuffer:)" syntax="operator-(AmxVariantBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator--(ConstAmxVariant:)" syntax="operator--(ConstAmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxVariant:)" syntax="operator-(ConstAmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator--(AmxVariant:)" syntax="operator--(AmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxVariant:)" syntax="operator-(AmxVariant:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator--(AmxStringBuffer:)" syntax="operator--(AmxStringBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxStringBuffer:)" syntax="operator-(AmxStringBuffer:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:operator--(ConstAmxString:)" syntax="operator--(ConstAmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(ConstAmxString:)" syntax="operator-(ConstAmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator--(AmxString:)" syntax="operator--(AmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator-(AmxString:)" syntax="operator-(AmxString:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:operator--(String@Const:)" syntax="operator--(String@Const:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String@Const:)" syntax="operator-(String@Const:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator--(String:)" syntax="operator--(String:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator-(String:)" syntax="operator-(String:)(arg)">
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator*(_no_itertag:,_:)" syntax="operator*(_no_itertag:,_:)(a, b)">
			<stacksize value="1"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="Iter_ActorDo"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="Iter_VehicleDo"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
			<param name="a">
				<paraminfo>_no_itertag </paraminfo>
			</param>
			<param name="b">
			</param>
			<remarks>  Suppress warnings when `_:` is used (correctly) instead of `_no_itertag:`.  </remarks> 
		</member>
		<member name="M:operator%(_:,Float:)" syntax="operator%(_:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator%(Float:,_:)" syntax="operator%(Float:,_:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator%(Float:,Float:)" syntax="operator%(Float:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator!=(Float:,_:)" syntax="operator!=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator!=(Float:,Float:)" syntax="operator!=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="RandomFloat"/>
			<referrer name="_SortDeepArray"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(_:,Float:)" syntax="operator-(_:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:,_:)" syntax="operator-(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator+(Float:,_:)" syntax="operator+(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="float"/>
			<dependency name="floatadd"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator/(_:,Float:)" syntax="operator/(_:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(Float:,_:)" syntax="operator/(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator*(Float:,_:)" syntax="operator*(Float:,_:)(oper1, oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatmul"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator++(Float:)" syntax="operator++(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator+(Float:,Float:)"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:)" syntax="operator-(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="SetCustomFallDamage"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="PosInFront"/>
			<referrer name="AngleBetweenPoints"/>
			<referrer name="InflictDamage"/>
			<referrer name="RandomFloat"/>
			<referrer name="internal_BS_GXYIFOP"/>
			<dependency name="cellmin"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator--(Float:)" syntax="operator--(Float:)(oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator-(Float:,Float:)"/>
			<param name="oper">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator-(Float:,Float:)" syntax="operator-(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator--(Float:)"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="AngleBetweenPoints"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="RandomFloat"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="internal_BS_DCTTL"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="CreatePTextdraws"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator+(Float:,Float:)" syntax="operator+(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator++(Float:)"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="PosInFront"/>
			<referrer name="InflictDamage"/>
			<referrer name="WC_VendingMachineUsed"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="DamageFeedAddHit"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="RandomFloat"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="UpdateAdminHours"/>
			<referrer name="internal_BS_DCTTL"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="internal_BS_GXYIFOP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="GetSpeed"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="WC_OnPlayerDeath"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator/(Float:,Float:)" syntax="operator/(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="ProcessDamage"/>
			<referrer name="__TU"/>
			<referrer name="RandomFloat"/>
			<referrer name="internal_BS_GPATP"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator*(Float:,Float:)" syntax="operator*(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="PosInFront"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<referrer name="RandomFloat"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="internal_BS_DCTTL"/>
			<referrer name="internal_BS_GXYIFOP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="GetSpeed"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:Float:operator=(_:)" syntax="Float:operator=(_:)(oper)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
			<param name="oper">
			</param>
		</member>
		<member name="M:operator==(Float:,Float:)" syntax="operator==(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="WC_SpawnPlayer"/>
			<referrer name="WC_SetPlayerVelocity"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="OnPlayerDeathFinished"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="internal_BS_GPATP"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator==(Float:,_:)" syntax="operator==(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="internal_BS_GPATP"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;(Float:,Float:)" syntax="operator&gt;(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="WC_SetPlayerArmour"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<referrer name="WC_VendingMachineUsed"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="_SortDeepArray"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;(Float:,_:)" syntax="operator&gt;(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;(_:,Float:)" syntax="operator&gt;(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;=(Float:,Float:)" syntax="operator&gt;=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<referrer name="internal_BS_GPATP"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&gt;=(Float:,_:)" syntax="operator&gt;=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&gt;=(_:,Float:)" syntax="operator&gt;=(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;(Float:,Float:)" syntax="operator&lt;(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="DamagePlayer"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="RandomFloat"/>
			<referrer name="_SortDeepArray"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="pc_cmd_lobby"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;(Float:,_:)" syntax="operator&lt;(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="internal_BS_GPATP"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&lt;(_:,Float:)" syntax="operator&lt;(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;=(Float:,Float:)" syntax="operator&lt;=(Float:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="InflictDamage"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:operator&lt;=(Float:,_:)" syntax="operator&lt;=(Float:,_:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
		</member>
		<member name="M:operator&lt;=(_:,Float:)" syntax="operator&lt;=(_:,Float:)(oper1, oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:_:operator=(_no_itertag:)" syntax="_:operator=(_no_itertag:)(a)">
			<stacksize value="1"/>
			<referrer name="_Timer_D"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="GetPlayerID"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="GetPlayerIdFromName"/>
			<referrer name="AMessage"/>
			<referrer name="OnPlayerText"/>
			<param name="a">
				<paraminfo>_no_itertag </paraminfo>
			</param>
			<remarks>  Suppress warnings when `_:` is used (correctly) instead of `_no_itertag:`.  </remarks> 
		</member>
		<member name="M:_no_itertag:operator=(_:)" syntax="_no_itertag:operator=(_:)(a)">
			<tagname value="_no_itertag"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<remarks>  Suppress warnings when `_:` is used (correctly) instead of `_no_itertag:`.  </remarks> 
		</member>
		<member name="M:signed:operator=(_:)" syntax="signed:operator=(_:)(a)">
			<tagname value="signed"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
		</member>
		<member name="M:unsigned:operator=(_:)" syntax="unsigned:operator=(_:)(a)">
			<tagname value="unsigned"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
		</member>
		<member name="M:String:operator=(_:)" syntax="String:operator=(_:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:String:operator=(Float:)" syntax="String:operator=(Float:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:String@Const:operator=(_:)" syntax="String@Const:operator=(_:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:String@Const:operator=(Float:)" syntax="String@Const:operator=(Float:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:AmxString:operator=(_:)" syntax="AmxString:operator=(_:)(arg)">
			<tagname value="AmxString"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:AmxString:operator=(Float:)" syntax="AmxString:operator=(Float:)(arg)">
			<tagname value="AmxString"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:ConstAmxString:operator=(_:)" syntax="ConstAmxString:operator=(_:)(arg)">
			<tagname value="ConstAmxString"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:ConstAmxString:operator=(Float:)" syntax="ConstAmxString:operator=(Float:)(arg)">
			<tagname value="ConstAmxString"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:AmxStringBuffer:operator=(_:)" syntax="AmxStringBuffer:operator=(_:)(arg)">
			<tagname value="AmxStringBuffer"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:AmxStringBuffer:operator=(Float:)" syntax="AmxStringBuffer:operator=(Float:)(arg)">
			<tagname value="AmxStringBuffer"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:AmxVariant:operator=(_:)" syntax="AmxVariant:operator=(_:)(arg)">
			<tagname value="AmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:AmxVariant:operator=(Float:)" syntax="AmxVariant:operator=(Float:)(arg)">
			<tagname value="AmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:ConstAmxVariant:operator=(_:)" syntax="ConstAmxVariant:operator=(_:)(arg)">
			<tagname value="ConstAmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:ConstAmxVariant:operator=(Float:)" syntax="ConstAmxVariant:operator=(Float:)(arg)">
			<tagname value="ConstAmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:AmxVariantBuffer:operator=(_:)" syntax="AmxVariantBuffer:operator=(_:)(arg)">
			<tagname value="AmxVariantBuffer"/>
			<stacksize value="1"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:AmxVariantBuffer:operator=(Float:)" syntax="AmxVariantBuffer:operator=(Float:)(arg)">
			<tagname value="AmxVariantBuffer"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:String:operator=(AmxString:)" syntax="String:operator=(AmxString:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:String@Const:operator=(AmxString:)" syntax="String@Const:operator=(AmxString:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:String:operator=(ConstAmxString:)" syntax="String:operator=(ConstAmxString:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:String@Const:operator=(ConstAmxString:)" syntax="String@Const:operator=(ConstAmxString:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:String:operator=(AmxStringBuffer:)" syntax="String:operator=(AmxStringBuffer:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:String@Const:operator=(AmxStringBuffer:)" syntax="String@Const:operator=(AmxStringBuffer:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxStringBuffer </paraminfo>
			</param>
		</member>
		<member name="M:Variant:operator=(AmxVariant:)" syntax="Variant:operator=(AmxVariant:)(arg)">
			<tagname value="Variant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:Variant@Const:operator=(AmxVariant:)" syntax="Variant@Const:operator=(AmxVariant:)(arg)">
			<tagname value="Variant@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:Variant:operator=(ConstAmxVariant:)" syntax="Variant:operator=(ConstAmxVariant:)(arg)">
			<tagname value="Variant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:Variant@Const:operator=(ConstAmxVariant:)" syntax="Variant@Const:operator=(ConstAmxVariant:)(arg)">
			<tagname value="Variant@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:Variant:operator=(AmxVariantBuffer:)" syntax="Variant:operator=(AmxVariantBuffer:)(arg)">
			<tagname value="Variant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:Variant@Const:operator=(AmxVariantBuffer:)" syntax="Variant@Const:operator=(AmxVariantBuffer:)(arg)">
			<tagname value="Variant@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariantBuffer </paraminfo>
			</param>
		</member>
		<member name="M:String@Const:operator=(String:)" syntax="String@Const:operator=(String:)(arg)">
			<tagname value="String@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:String:operator=(String@Const:)" syntax="String:operator=(String@Const:)(arg)">
			<tagname value="String"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:ConstAmxString:operator=(String:)" syntax="ConstAmxString:operator=(String:)(arg)">
			<tagname value="ConstAmxString"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<param name="arg">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:ConstAmxString:operator=(AmxString:)" syntax="ConstAmxString:operator=(AmxString:)(arg)">
			<tagname value="ConstAmxString"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxString </paraminfo>
			</param>
		</member>
		<member name="M:AmxString:operator=(String@Const:)" syntax="AmxString:operator=(String@Const:)(arg)">
			<tagname value="AmxString"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:AmxString:operator=(ConstAmxString:)" syntax="AmxString:operator=(ConstAmxString:)(arg)">
			<tagname value="AmxString"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:ConstAmxVariant:operator=(AmxVariant:)" syntax="ConstAmxVariant:operator=(AmxVariant:)(arg)">
			<tagname value="ConstAmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>AmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:AmxVariant:operator=(Variant@Const:)" syntax="AmxVariant:operator=(Variant@Const:)(arg)">
			<tagname value="AmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Variant@Const </paraminfo>
			</param>
		</member>
		<member name="M:AmxVariant:operator=(ConstAmxVariant:)" syntax="AmxVariant:operator=(ConstAmxVariant:)(arg)">
			<tagname value="AmxVariant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>ConstAmxVariant </paraminfo>
			</param>
		</member>
		<member name="M:operator==(String:,String:)" syntax="operator==(String:,String:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(String:,String:)"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator==(String:,String@Const:)" syntax="operator==(String:,String@Const:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(String:,String@Const:)"/>
			<param name="arg1">
				<paraminfo>String </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator==(String@Const:,String:)" syntax="operator==(String@Const:,String:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(String@Const:,String:)"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String </paraminfo>
			</param>
		</member>
		<member name="M:operator==(String@Const:,String@Const:)" syntax="operator==(String@Const:,String@Const:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(String@Const:,String@Const:)"/>
			<param name="arg1">
				<paraminfo>String@Const </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>String@Const </paraminfo>
			</param>
		</member>
		<member name="M:Variant@Const:operator=(Variant:)" syntax="Variant@Const:operator=(Variant:)(arg)">
			<tagname value="Variant@Const"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Variant </paraminfo>
			</param>
		</member>
		<member name="M:Variant:operator=(Variant@Const:)" syntax="Variant:operator=(Variant@Const:)(arg)">
			<tagname value="Variant"/>
			<stacksize value="1"/>
			<param name="arg">
				<paraminfo>Variant@Const </paraminfo>
			</param>
		</member>
		<member name="M:operator==(Iter:,Iter:)" syntax="operator==(Iter:,Iter:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(Iter:,Iter:)"/>
			<param name="arg1">
				<paraminfo>Iter </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Iter </paraminfo>
			</param>
		</member>
		<member name="M:operator==(Handle:,Handle:)" syntax="operator==(Handle:,Handle:)(arg1, arg2)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!=(Handle:,Handle:)"/>
			<param name="arg1">
				<paraminfo>Handle </paraminfo>
			</param>
			<param name="arg2">
				<paraminfo>Handle </paraminfo>
			</param>
		</member>
		<member name="M:Expression:operator=(_:)" syntax="Expression:operator=(_:)(arg)">
			<tagname value="Expression"/>
			<stacksize value="4"/>
			<dependency name="expr_const"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:Expression:operator=(Float:)" syntax="Expression:operator=(Float:)(arg)">
			<tagname value="Expression"/>
			<stacksize value="4"/>
			<dependency name="expr_const"/>
			<param name="arg">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:Expression:operator=(bool:)" syntax="Expression:operator=(bool:)(arg)">
			<tagname value="Expression"/>
			<stacksize value="4"/>
			<dependency name="expr_const"/>
			<param name="arg">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:@@Iter_ActorDo" syntax="@@Iter_ActorDo(add, actorid, __m)">
			<tagname value="I@R"/>
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="@_"/>
			<dependency name="Iter_ActorDo"/>
			<dependency name="L@"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="actorid">
			</param>
			<param name="__m">
			</param>
		</member>
		<member name="M:@@Iter_VehicleDo" syntax="@@Iter_VehicleDo(add, vehicleid, __m)">
			<tagname value="I@R"/>
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="@_"/>
			<dependency name="Iter_VehicleDo"/>
			<dependency name="L@"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="vehicleid">
			</param>
			<param name="__m">
			</param>
		</member>
		<member name="M:@CO_CGen" syntax="@CO_CGen()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="@CO_Malloc"/>
		</member>
		<member name="M:@CO_Debug" syntax="@CO_Debug()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="@CO_Malloc"/>
			<dependency name="@CO_YVers"/>
		</member>
		<member name="M:@CO_Malloc" syntax="@CO_Malloc()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="@CO_CGen"/>
			<dependency name="@CO_Debug"/>
		</member>
		<member name="M:@CO_ScriptInit" syntax="@CO_ScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<referrer name="@CO_YVers"/>
		</member>
		<member name="M:@CO_YVers" syntax="@CO_YVers()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="@CO_Debug"/>
			<dependency name="@CO_ScriptInit"/>
		</member>
		<member name="M:@_yHCheckpoint" syntax="@_yHCheckpoint()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHCommand" syntax="@_yHCommand()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHContainer" syntax="@_yHContainer()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHDynamic" syntax="@_yHDynamic()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHDynamicCP" syntax="@_yHDynamicCP()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHInventory" syntax="@_yHInventory()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHObject" syntax="@_yHObject()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHTextDraw" syntax="@_yHTextDraw()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@_yHUpdate" syntax="@_yHUpdate()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="_Hooks_AddReplacement"/>
		</member>
		<member name="M:@receivepacket" syntax="@receivepacket(packet[], size, source[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="packet">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@receivestring" syntax="@receivestring(message[], source[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="message">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@yH_OnDialogResponse@005" syntax="@yH_OnDialogResponse@005(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="cellmin"/>
			<param name="playerid">
			</param>
			<param name="dialogid">
			</param>
			<param name="response">
			</param>
			<param name="listitem">
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@yH_OnDialogResponse@007" syntax="@yH_OnDialogResponse@007(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="408"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="AMessage"/>
			<dependency name="DIALOG_DM"/>
			<dependency name="DIALOG_HELP"/>
			<dependency name="DIALOG_NCOLOR"/>
			<dependency name="DIALOG_REPORT"/>
			<dependency name="GHOST2"/>
			<dependency name="GHOST2"/>
			<dependency name="GHOST2_VW"/>
			<dependency name="GTOWN"/>
			<dependency name="GTOWN"/>
			<dependency name="GTOWN_VW"/>
			<dependency name="GetName"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="Iterator@Player"/>
			<dependency name="LVPD2"/>
			<dependency name="LVPD2"/>
			<dependency name="LVPD2_VW"/>
			<dependency name="LVPD_VW"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="RCBTF_VW"/>
			<dependency name="RCRAND"/>
			<dependency name="RCRAND"/>
			<dependency name="ReportReason"/>
			<dependency name="ReportedID"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetCbugAllowed"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="SoarArena"/>
			<dependency name="SoarArena"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WHOUSE"/>
			<dependency name="WHOUSE"/>
			<dependency name="WHOUSE_VW"/>
			<dependency name="dialog_CHOOSELANG"/>
			<dependency name="false"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pColor"/>
			<dependency name="pLang"/>
			<dependency name="pPremium"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="random"/>
			<dependency name="sql_user_update_integer"/>
			<dependency name="strcat"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="dialogid">
			</param>
			<param name="response">
			</param>
			<param name="listitem">
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@yH_OnDialogResponse@012" syntax="@yH_OnDialogResponse@012(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="481"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="E_ARMOUR"/>
			<dependency name="E_HEALTH"/>
			<dependency name="E_LOCATION_ID"/>
			<dependency name="E_NAME"/>
			<dependency name="E_PLAYER"/>
			<dependency name="E_WEAPON"/>
			<dependency name="GetDistanceBetweenPlayers"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="InFreeroam"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerDueling"/>
			<dependency name="PI"/>
			<dependency name="ReturnWeaponName"/>
			<dependency name="ReturnWeaponName"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="ShowPlayerDuelMenu"/>
			<dependency name="WC_GetWeaponName"/>
			<dependency name="cellmin"/>
			<dependency name="format"/>
			<dependency name="g_WeaponList"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="gettime"/>
			<dependency name="pLang"/>
			<dependency name="p_duelInvitation"/>
			<dependency name="p_duelInvitation"/>
			<dependency name="sscanf"/>
			<dependency name="szBigString"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="dialogid">
			</param>
			<param name="response">
			</param>
			<param name="listitem">
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:@yH_OnGameModeExit@010" syntax="@yH_OnGameModeExit@010()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="KillTimer"/>
			<dependency name="tfTimer"/>
		</member>
		<member name="M:@yH_OnGameModeInit@009" syntax="@yH_OnGameModeInit@009()">
			<attribute name="public"/>
			<stacksize value="17"/>
			<dependency name="CreateDynamicObject"/>
			<dependency name="CreateObject"/>
			<dependency name="SetObjectMaterial"/>
			<dependency name="SetObjectMaterialText"/>
		</member>
		<member name="M:@yH_OnGameModeInit@010" syntax="@yH_OnGameModeInit@010()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="SetTimer"/>
			<dependency name="repeatspawn"/>
			<dependency name="tfTimer"/>
			<dependency name="true"/>
		</member>
		<member name="M:@yH_OnPlayerClickPlayerTD@008" syntax="@yH_OnPlayerClickPlayerTD@008(playerid, playertextid)">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="FreeroamSpawn"/>
			<dependency name="FreeroamSpawn"/>
			<dependency name="FreeroamTDs"/>
			<dependency name="InFreeroam"/>
			<dependency name="Iter_DestroyVehicle"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SetCbugAllowed"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerSkin"/>
			<dependency name="ShowFreeroamTextDraws"/>
			<dependency name="SpawnSetup"/>
			<dependency name="ToggleTeleport"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="false"/>
			<dependency name="fr_SpawnedVehicle"/>
			<dependency name="fr_VehicleID"/>
			<dependency name="pSkin"/>
			<dependency name="random"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="playertextid">
				<paraminfo>PlayerText </paraminfo>
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@001" syntax="@yH_OnPlayerConnect@001(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Single@Bot"/>
			<dependency name="Iter_Single@Character"/>
			<dependency name="Iter_Single@Player"/>
			<dependency name="Iterator@Bot"/>
			<dependency name="Iterator@Character"/>
			<dependency name="Iterator@Player"/>
			<param name="playerid">
				Player who joined.
			</param>
			  <remarks>  Adds a player to the loop data.  Now sorts the list too.  Note that I found  the most bizzare bug ever (I *think* it may be a compiler but, but it  requires further investigation), basically it seems that multiple variables  were being treated as the same variable (namely @YSII_EgotS and  @YSII_CgharacterS were the same and @YSII_EgotC and @YSII_CgharacterC were the  same).  Adding print statements which reference these variables seem to fix  the problem, and I've tried to make sure that the values will never actually  get printed.  </remarks> 
		</member>
		<member name="M:@yH_OnPlayerConnect@002" syntax="@yH_OnPlayerConnect@002(playerid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="YSI_g_sPlayerTimers"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@003" syntax="@yH_OnPlayerConnect@003(playerid)">
			<attribute name="public"/>
			<stacksize value="208"/>
			<dependency name="CreatePTextdraws"/>
			<dependency name="GetPlayerIP"/>
			<dependency name="GetPlayerIp"/>
			<dependency name="InDM"/>
			<dependency name="Killed"/>
			<dependency name="Killstreak"/>
			<dependency name="LoggedIn"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="PasswordCheck"/>
			<dependency name="ReportedID"/>
			<dependency name="SQL"/>
			<dependency name="SetCbugAllowed"/>
			<dependency name="TogHud"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="altchatToggled"/>
			<dependency name="false"/>
			<dependency name="lastPM"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pDrunkLevelLast"/>
			<dependency name="pFPS"/>
			<dependency name="pSmrti"/>
			<dependency name="pUbistva"/>
			<dependency name="playerIP"/>
			<dependency name="playerIP"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@005" syntax="@yH_OnPlayerConnect@005(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="InFreeroam"/>
			<dependency name="ToggleTeleport"/>
			<dependency name="false"/>
			<dependency name="fr_SpawnedVehicle"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@009" syntax="@yH_OnPlayerConnect@009(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@011" syntax="@yH_OnPlayerConnect@011(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="AdminDuty"/>
			<dependency name="SetTimerEx"/>
			<dependency name="afkTimer"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerConnect@012" syntax="@yH_OnPlayerConnect@012(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="E_ARMOUR"/>
			<dependency name="E_HEALTH"/>
			<dependency name="E_PLAYER"/>
			<dependency name="E_WEAPON"/>
			<dependency name="false"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="p_playerDueling"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:@yH_OnPlayerDeath@012" syntax="@yH_OnPlayerDeath@012(playerid, killerid, reason)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="forfeitPlayerDuel"/>
			<param name="playerid">
			</param>
			<param name="killerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:@yH_OnPlayerDisconnect@001" syntax="@yH_OnPlayerDisconnect@001(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<param name="playerid">
				Player who left.
			</param>
			<param name="reason">
			</param>
			  <remarks>  Removes a player from the loop data.  No longer uses "hook" to ENSURE  that this is always last.  Previously I think that the order of  evaluation in y_hooks meant that this got called before the user  "OnPlayerDisconnect".  </remarks> 
		</member>
		<member name="M:@yH_OnPlayerDisconnect@002" syntax="@yH_OnPlayerDisconnect@002(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="YSI_g_sPlayerTimers"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:@yH_OnPlayerDisconnect@011" syntax="@yH_OnPlayerDisconnect@011(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="KillTimer"/>
			<dependency name="afkTimer"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:@yH_OnPlayerDisconnect@012" syntax="@yH_OnPlayerDisconnect@012(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="forfeitPlayerDuel"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:@yH_OnScriptInit@001" syntax="@yH_OnScriptInit@001()">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="GetVehicleModel"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="IsValidActor"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Clear_InternalC"/>
			<dependency name="Iter_Single@Actor"/>
			<dependency name="Iter_Single@Bot"/>
			<dependency name="Iter_Single@Character"/>
			<dependency name="Iter_Single@Player"/>
			<dependency name="Iter_Single@Vehicle"/>
			<dependency name="Iterator@Actor"/>
			<dependency name="Iterator@Bot"/>
			<dependency name="Iterator@Character"/>
			<dependency name="Iterator@Player"/>
			<dependency name="Iterator@Vehicle"/>
			<remarks>  Sets up all existing iterators.  Does nothing for "XXLocal" ones, since they  are by definition empty when a script starts.  </remarks> 
		</member>
		<member name="M:@yT_CheckPlayerWeapons" syntax="@yT_CheckPlayerWeapons(g, p)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="_Timer_D"/>
			<param name="g">
			</param>
			<param name="p">
			</param>
		</member>
		<member name="M:@yT_PTime" syntax="@yT_PTime(g, p)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="_Timer_D"/>
			<param name="g">
			</param>
			<param name="p">
			</param>
		</member>
		<member name="M:@yT_UpdateAdminHours" syntax="@yT_UpdateAdminHours(g, p)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="SIX_MIN_MSEC"/>
			<dependency name="_Timer_D"/>
			<param name="g">
			</param>
			<param name="p">
			</param>
		</member>
		<member name="M:@yT_UpdateLoginTime" syntax="@yT_UpdateLoginTime(g, p)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="_Timer_D"/>
			<param name="g">
			</param>
			<param name="p">
			</param>
		</member>
		<member name="M:@y_HOnPlayerCommandText" syntax="@y_HOnPlayerCommandText()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:@y_HOnRconCommand" syntax="@y_HOnRconCommand()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:AMX_DoNothing" syntax="AMX_DoNothing()">
			<stacksize value="1"/>
			<referrer name="AMX_GetGlobal"/>
		</member>
		<member name="M:AMX_DumpHeader" syntax="AMX_DumpHeader()">
			<stacksize value="41"/>
			<dependency name="AMX_GetName"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="printf"/>
			<dependency name="strunpack"/>
		</member>
		<member name="M:AMX_GetBaseCount" syntax="AMX_GetBaseCount(table, &amp;base, &amp;count)">
			<stacksize value="1"/>
			<referrer name="AMX_GetEntry"/>
			<referrer name="AMX_GetEntryPrefix"/>
			<referrer name="AMX_GetEntrySuffix"/>
			<referrer name="AMX_GetName"/>
			<referrer name="AMX_GetNamePrefix"/>
			<referrer name="AMX_GetNameSuffix"/>
			<dependency name="AMX_HEADER_LIBRARIES"/>
			<dependency name="AMX_HEADER_NAMETABLE"/>
			<dependency name="AMX_HEADER_NATIVES"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_HEADER_PUBVARS"/>
			<dependency name="AMX_HEADER_TAGS"/>
			<dependency name="AMX_TABLE_LIBRARIES"/>
			<dependency name="AMX_TABLE_NATIVES"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="AMX_TABLE_PUBVARS"/>
			<dependency name="AMX_TABLE_TAGS"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="base">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:AMX_GetEntry" syntax="AMX_GetEntry(table, idx, &amp;buffer, pattern[], exact)">
			<stacksize value="42"/>
			<referrer name="AMX_GetPointer"/>
			<referrer name="Hooks_GetPreHooks"/>
			<referrer name="Hooks_GetFunctionWritePoint"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<dependency name="AMX_ReadString"/>
			<dependency name="strcmp"/>
			<dependency name="strfind"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="exact">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AMX_GetEntryFromNativeIndex" syntax="AMX_GetEntryFromNativeIndex(index)">
			<stacksize value="1"/>
			<dependency name="AMX_HEADER_NATIVES"/>
			<param name="index">
			</param>
		</member>
		<member name="M:AMX_GetEntryFromPublicIndex" syntax="AMX_GetEntryFromPublicIndex(index)">
			<stacksize value="1"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<param name="index">
			</param>
		</member>
		<member name="M:AMX_GetEntryPointer" syntax="AMX_GetEntryPointer(entry)">
			<stacksize value="1"/>
			<param name="entry">
			</param>
		</member>
		<member name="M:AMX_GetEntryPrefix" syntax="AMX_GetEntryPrefix(table, idx, &amp;buffer, pattern)">
			<stacksize value="9"/>
			<referrer name="AMX_GetPointerPrefix"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_CountInvalidPublics"/>
			<referrer name="CGen_OnCodeInit"/>
			<referrer name="Yield_OnCodeInit"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetEntrySuffix" syntax="AMX_GetEntrySuffix(table, idx, &amp;buffer, pattern)">
			<stacksize value="10"/>
			<referrer name="AMX_GetPointerSuffix"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetGlobal" syntax="AMX_GetGlobal()">
			<stacksize value="4"/>
			<referrer name="Debug_OnCodeInit"/>
			<dependency name="AMX_DoNothing"/>
			<dependency name="AMX_HEADER_COD"/>
		</member>
		<member name="M:AMX_GetGlobalAddress" syntax="AMX_GetGlobalAddress(...)">
			<stacksize value="2"/>
			<dependency name="AMX_REAL_DATA"/>
			<param name="...">
			</param>
		</member>
		<member name="M:AMX_GetName" syntax="AMX_GetName(table, idx, buffer[], pattern[], exact)">
			<stacksize value="10"/>
			<referrer name="AMX_DumpHeader"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<dependency name="AMX_ReadString"/>
			<dependency name="strcmp"/>
			<dependency name="strfind"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="exact">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AMX_GetNamePrefix" syntax="AMX_GetNamePrefix(table, idx, buffer[], pattern)">
			<stacksize value="9"/>
			<referrer name="Hooks_DoAllHooks"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<dependency name="AMX_ReadString"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetNameSuffix" syntax="AMX_GetNameSuffix(table, idx, buffer[], pattern)">
			<stacksize value="10"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetBaseCount"/>
			<dependency name="AMX_ReadString"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetNativeIndexFromEntry" syntax="AMX_GetNativeIndexFromEntry(entry)">
			<stacksize value="1"/>
			<dependency name="AMX_HEADER_NATIVES"/>
			<param name="entry">
			</param>
		</member>
		<member name="M:AMX_GetPointer" syntax="AMX_GetPointer(table, idx, &amp;buffer, pattern[], exact)">
			<stacksize value="9"/>
			<referrer name="AMX_GetValue"/>
			<dependency name="AMX_GetEntry"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="exact">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AMX_GetPointerPrefix" syntax="AMX_GetPointerPrefix(table, idx, &amp;buffer, pattern)">
			<stacksize value="8"/>
			<referrer name="AMX_GetValuePrefix"/>
			<referrer name="ScriptInit_PreInitFuncs_"/>
			<referrer name="ScriptInit_PostInitFuncs_"/>
			<referrer name="ScriptInit_PreExitFuncs_"/>
			<referrer name="ScriptInit_PostExitFuncs_"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="Yield_OnCodeInit"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetPointerSuffix" syntax="AMX_GetPointerSuffix(table, idx, &amp;buffer, pattern)">
			<stacksize value="8"/>
			<referrer name="AMX_GetValueSuffix"/>
			<dependency name="AMX_GetEntrySuffix"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetPublicIndexFromEntry" syntax="AMX_GetPublicIndexFromEntry(entry)">
			<stacksize value="1"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<param name="entry">
			</param>
		</member>
		<member name="M:AMX_GetRelativeAddress" syntax="AMX_GetRelativeAddress(...)">
			<stacksize value="2"/>
			<param name="...">
			</param>
		</member>
		<member name="M:AMX_GetStringFromEntry" syntax="AMX_GetStringFromEntry(entry, str[], size)">
			<stacksize value="6"/>
			<referrer name="Hooks_GetAllHooks"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_ReadString"/>
			<param name="entry">
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:AMX_GetValue" syntax="AMX_GetValue(table, idx, &amp;buffer, pattern[], exact)">
			<stacksize value="9"/>
			<dependency name="AMX_GetPointer"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="exact">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AMX_GetValuePrefix" syntax="AMX_GetValuePrefix(table, idx, &amp;buffer, pattern)">
			<stacksize value="8"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_GetValueSuffix" syntax="AMX_GetValueSuffix(table, idx, &amp;buffer, pattern)">
			<stacksize value="8"/>
			<dependency name="AMX_GetPointerSuffix"/>
			<param name="table">
				<paraminfo>E_AMX_TABLE </paraminfo>
			</param>
			<param name="idx">
			</param>
			<param name="buffer">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="pattern">
			</param>
		</member>
		<member name="M:AMX_OnCodeInit" syntax="AMX_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="AddressofResolve"/>
			<dependency name="Indirect_Init"/>
		</member>
		<member name="M:AMX_RawRead" syntax="AMX_RawRead(addr)">
			<stacksize value="1"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:AMX_RawWrite" syntax="AMX_RawWrite(addr, value)">
			<stacksize value="1"/>
			<param name="addr">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AMX_Read" syntax="AMX_Read(addr)">
			<stacksize value="1"/>
			<referrer name="CGen_GetAddr"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GenerateCode"/>
			<referrer name="Hooks_InvalidateName"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_CompareNextCell"/>
			<referrer name="Hooks_ComparePublics"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="CGen_OnCodeInit"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
			<referrer name="ScriptInit_OnRuntimeError"/>
			<referrer name="YHNPS_Find"/>
			<referrer name="YHNPS_Insert"/>
			<referrer name="Hooks_OnCodeInit"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:AMX_ReadArray" syntax="AMX_ReadArray(addr, dest[], len)">
			<stacksize value="1"/>
			<param name="addr">
			</param>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:AMX_ReadString" syntax="AMX_ReadString(addr, str[], len)">
			<stacksize value="5"/>
			<referrer name="AMX_GetEntry"/>
			<referrer name="AMX_GetName"/>
			<referrer name="AMX_GetNamePrefix"/>
			<referrer name="AMX_GetNameSuffix"/>
			<referrer name="AMX_GetStringFromEntry"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Yield_OnCodeInit"/>
			<dependency name="swapchars"/>
			<param name="addr">
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:AMX_ReadUnpackedString" syntax="AMX_ReadUnpackedString(addr, str[], len)">
			<stacksize value="2"/>
			<param name="addr">
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:AMX_TraceCode" syntax="AMX_TraceCode(pattern[], &amp;addrRet, &amp;dataRet, size)">
			<stacksize value="4"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_HEADER_DAT"/>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="addrRet">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="dataRet">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:AMX_TraceMemory" syntax="AMX_TraceMemory(pattern[], &amp;addrRet, &amp;dataRet, size)">
			<stacksize value="4"/>
			<dependency name="AMX_HEADER_DAT"/>
			<dependency name="AMX_HEADER_HEA"/>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="addrRet">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="dataRet">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:AMX_Write" syntax="AMX_Write(addr, value)">
			<stacksize value="1"/>
			<referrer name="CGen_SetupCodeSpace"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GenerateCode"/>
			<referrer name="Hooks_InvalidateName"/>
			<referrer name="Hooks_ComparePublics"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
			<referrer name="Hooks_RepairJITInit"/>
			<referrer name="YHNPS_Insert"/>
			<referrer name="Hooks_OnCodeInit"/>
			<param name="addr">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AMX_WriteArray" syntax="AMX_WriteArray(addr, src[], len)">
			<stacksize value="1"/>
			<param name="addr">
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:AMX_WriteString" syntax="AMX_WriteString(addr, str[], len)">
			<stacksize value="4"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<param name="addr">
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:AMessage" syntax="AMessage(color, string[])">
			<stacksize value="6"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="checkIPUnban"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="IsPlayerAdmin"/>
			<dependency name="Iterator@Player"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="pAdmin"/>
			<dependency name="true"/>
			<param name="color">
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AbsToRel" syntax="AbsToRel(address)">
			<stacksize value="3"/>
			<referrer name="ReadPhysMemory"/>
			<referrer name="WritePhysMemory"/>
			<referrer name="ReadPhysMemoryCell"/>
			<referrer name="WritePhysMemoryCell"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetDat"/>
			<param name="address">
			</param>
		</member>
		<member name="M:AddPlayerClass" syntax="AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<attribute name="native"/>
			<referrer name="WC_AddPlayerClass"/>
			<param name="modelid">
				The <a href="http://wiki.sa-mp.com/wiki/Skins">skin</a> which the player will spawn with
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
				The X coordinate of the spawnpoint of this class
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
				The Y coordinate of the spawnpoint of this class
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
				The Z coordinate of the spawnpoint of this class
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
				The direction in which the player should face after spawning
			</param>
			<param name="weapon1">
				The first spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon1_ammo">
				The amount of ammunition for the primary spawn weapon
			</param>
			<param name="weapon2">
				The second spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon2_ammo">
				The amount of ammunition for the second spawn weapon
			</param>
			<param name="weapon3">
				The third spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon3_ammo">
				The amount of ammunition for the third spawn weapon
			</param>
			<summary>Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.</summary>            <returns> <ul> <li>The <b>ID of the class</b> which was just added.</li> <li><b><c>319</c></b> if the class limit (<b><c>320</c></b>) was reached. The highest possible class ID is <b><c>319</c></b>.</li> </ul> </returns> <remarks> The maximum class ID is <b><c>319</c></b> (starting from <b><c>0</c></b>, so a total of <b><c>320</c></b> classes). When this limit is reached, any more classes that are added will replace ID <b><c>319</c></b>. </remarks> <seealso name="AddPlayerClassEx"/> <seealso name="SetSpawnInfo"/> <seealso name="SetPlayerSkin"/>
		</member>
		<member name="M:AddPlayerClassEx" syntax="AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<attribute name="native"/>
			<referrer name="WC_AddPlayerClassEx"/>
			<param name="teamid">
				The team you want the player to spawn in
			</param>
			<param name="modelid">
				The <a href="http://wiki.sa-mp.com/wiki/Skins">skin</a> which the player will spawn with
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
				The X coordinate of the class' spawn position
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
				The Y coordinate of the class' spawn position
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
				The Z coordinate of the class' spawn position
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
				The direction in which the player will face after spawning
			</param>
			<param name="weapon1">
				The first spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon1_ammo">
				The amount of ammunition for the first spawn weapon
			</param>
			<param name="weapon2">
				The second spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon2_ammo">
				The amount of ammunition for the second spawn weapon
			</param>
			<param name="weapon3">
				The third spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon3_ammo">
				The amount of ammunition for the third spawn weapon
			</param>
			<summary>This function is exactly the same as the <a href="#AddPlayerClass">AddPlayerClass</a> function, with the addition of a team parameter.</summary>             <returns> <ul> <li>The <b>ID of the class</b> which was just added.</li> <li><b><c>319</c></b> if the class limit (<b><c>320</c></b>) was reached. The highest possible class ID is <b><c>319</c></b>.</li> </ul> </returns> <remarks>The maximum class ID is <b><c>319</c></b> (starting from <b><c>0</c></b>, so a total of <b><c>320</c></b> classes). When this limit is reached, any more classes that are added will replace ID <b><c>319</c></b>.</remarks> <seealso name="AddPlayerClass"/> <seealso name="SetSpawnInfo"/> <seealso name="SetPlayerTeam"/> <seealso name="SetPlayerSkin"/>
		</member>
		<member name="M:AddRejectedHit" syntax="AddRejectedHit(playerid, damagedid, reason, weapon, i1, i2, i3)">
			<stacksize value="10"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<dependency name="GetPlayerName"/>
			<dependency name="OnRejectedHit"/>
			<dependency name="e_Hour"/>
			<dependency name="e_Info1"/>
			<dependency name="e_Info2"/>
			<dependency name="e_Info3"/>
			<dependency name="e_Minute"/>
			<dependency name="e_Name"/>
			<dependency name="e_Reason"/>
			<dependency name="e_Second"/>
			<dependency name="e_Time"/>
			<dependency name="e_Weapon"/>
			<dependency name="gettime"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHitsIdx"/>
			<param name="playerid">
			</param>
			<param name="damagedid">
			</param>
			<param name="reason">
			</param>
			<param name="weapon">
			</param>
			<param name="i1">
			</param>
			<param name="i2">
			</param>
			<param name="i3">
			</param>
		</member>
		<member name="M:AddStaticVehicle" syntax="AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2)">
			<attribute name="native"/>
			<referrer name="WC_AddStaticVehicle"/>
			<param name="modelid">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">Model ID</a> for the vehicle
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
				The X-coordinate for the vehicle
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
				The Y-coordinate for the vehicle
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
				The Z-coordinate for the vehicle
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
				Direction of vehicle - angle
			</param>
			<param name="color1">
				The primary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>. <b><c>-1</c></b> for random (random color chosen by client)
			</param>
			<param name="color2">
				The secondary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>. <b><c>-1</c></b> for random (random color chosen by client)
			</param>
			<summary>Adds a 'static' vehicle (models are pre-loaded for players) to the gamemode.</summary>        <returns> <ul> <li>The vehicle ID of the vehicle created (between <b><c>1</c></b> and <b><c>MAX_VEHICLES</c></b>).</li> <li><b><c>INVALID_VEHICLE_ID</c></b> (<b><c>65535</c></b>) if vehicle was not created (vehicle limit reached or invalid vehicle model ID passed).</li> </ul> </returns> <remarks>Can only be used when the server first starts (under <a href="#OnGameModeInit">OnGameModeInit</a>).</remarks> <seealso name="AddStaticVehicleEx"/> <seealso name="CreateVehicle"/> <seealso name="DestroyVehicle"/>
		</member>
		<member name="M:AddStaticVehicleEx" syntax="AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren)">
			<attribute name="native"/>
			<referrer name="WC_AddStaticVehicleEx"/>
			<param name="modelid">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">Model ID</a> for the vehicle
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
				The X-coordinate for the vehicle
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
				The Y-coordinate for the vehicle
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
				The Z-coordinate for the vehicle
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
				The facing - angle for the vehicle
			</param>
			<param name="color1">
				The primary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>. <b><c>-1</c></b> for random (random color chosen by client)
			</param>
			<param name="color2">
				The secondary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>. <b><c>-1</c></b> for random (random color chosen by client)
			</param>
			<param name="respawn_delay">
				The delay until the car is respawned without a driver, in seconds
			</param>
			<param name="addsiren">
				<b>Added in 0.3.7; will not work in earlier versions.</b> Enables the vehicle to have a siren, providing the vehicle has a horn (optional=<b><c>0</c></b>)
			</param>
			<summary>Adds a 'static' vehicle (models are pre-loaded for players)to the gamemode. Differs from <a href="#AddStaticVehicle">AddStaticVehicle</a> in only one way: allows a respawn time to be set for when the vehicle is left unoccupied by the driver.</summary>          <returns> <ul> <li>The vehicle ID of the vehicle created (between <b><c>1</c></b> and <b><c>MAX_VEHICLES</c></b>).</li> <li><b><c>INVALID_VEHICLE_ID</c></b> (<b><c>65535</c></b>) if vehicle was not created (vehicle limit reached or invalid vehicle model ID passed).</li> </ul> </returns> <remarks>Can only be used when the server first starts (under <a href="#OnGameModeInit">OnGameModeInit</a>).</remarks> <seealso name="AddStaticVehicle"/> <seealso name="CreateVehicle"/> <seealso name="DestroyVehicle"/>
		</member>
		<member name="M:AddressofResolve" syntax="AddressofResolve()">
			<stacksize value="753"/>
			<referrer name="Indirect_Init"/>
			<referrer name="AMX_OnCodeInit"/>
			<dependency name="AddressofResolveFoundEnd"/>
			<dependency name="AddressofResolveFoundStart"/>
			<dependency name="CodeScanAddMatcher"/>
			<dependency name="CodeScanInit"/>
			<dependency name="CodeScanMatcher"/>
			<dependency name="CodeScanMatcherInit_"/>
			<dependency name="CodeScanMatcherPattern_"/>
			<dependency name="CodeScanRunFast"/>
			<dependency name="CodeScanner"/>
			<dependency name="GetAmxJITBaseAddress"/>
			<dependency name="O@A_"/>
			<dependency name="O@V_"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CONST_PRI"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_JUMP"/>
			<dependency name="OP_JZER"/>
			<dependency name="OP_LOAD_PRI"/>
			<dependency name="OP_PUSH_C"/>
			<dependency name="false"/>
			<dependency name="gCodeScanCallback_match"/>
			<dependency name="ref"/>
			<dependency name="true"/>
		</member>
		<member name="M:AddressofResolveFoundEnd" syntax="AddressofResolveFoundEnd(scanner[])">
			<stacksize value="27"/>
			<referrer name="AddressofResolve"/>
			<dependency name="AsmContext"/>
			<dependency name="AsmEmitConstPri"/>
			<dependency name="CodeScanGetMatchAsm"/>
			<dependency name="CodeScanGetMatchHole"/>
			<dependency name="CodeScanGetMatchLength"/>
			<dependency name="cellbits"/>
			<param name="scanner">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:AddressofResolveFoundStart" syntax="AddressofResolveFoundStart(scanner[])">
			<stacksize value="44"/>
			<referrer name="AddressofResolve"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AsmContext"/>
			<dependency name="AsmEmitJump"/>
			<dependency name="CodeScanGetMatchAsm"/>
			<dependency name="CodeScanGetMatchHole"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<param name="scanner">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:Admini" syntax="Admini(playerid)">
			<attribute name="public"/>
			<stacksize value="3794"/>
			<dependency name="AdminDuty"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="GetAdminRank"/>
			<dependency name="GetPlayerIdFromName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_get_value_name_float"/>
			<dependency name="cache_get_value_name_int"/>
			<dependency name="cache_num_rows"/>
			<dependency name="format"/>
			<dependency name="strcat"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:AngleBetweenPoints" syntax="AngleBetweenPoints(x1, y1, x2, y2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="atan2"/>
			<param name="x1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="x2">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:ApplyAnimation" syntax="ApplyAnimation(playerid, animlib[], animname[], fDelta, loop, lockx, locky, freeze, time, forcesync)">
			<attribute name="native"/>
			<referrer name="WC_ApplyAnimation"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="WC_SecondKnifeAnim"/>
			<param name="playerid">
				The ID of the player to apply the animation to
			</param>
			<param name="animlib">
				<paraminfo> [] </paraminfo>
				The animation library from which to apply an animation
			</param>
			<param name="animname">
				<paraminfo> [] </paraminfo>
				The name of the animation to apply, within the specified library
			</param>
			<param name="fDelta">
				<paraminfo>Float </paraminfo>
				The speed to play the animation (use 4.1)
			</param>
			<param name="loop">
				If set to <b><c>1</c></b>, the animation will loop. If set to <b><c>0</c></b>, the animation will play once
			</param>
			<param name="lockx">
				If set to <b><c>0</c></b>, the player is returned to their old X coordinate once the animation is complete (for animations that move the player such as walking). <b><c>1</c></b> will not return them to their old position
			</param>
			<param name="locky">
				Same as above but for the Y axis. Should be kept the same as the previous parameter
			</param>
			<param name="freeze">
				Setting this to <b><c>1</c></b> will freeze the player at the end of the animation. <b><c>0</c></b> will not
			</param>
			<param name="time">
				Timer in milliseconds. For a never-ending loop it should be <b><c>0</c></b>
			</param>
			<param name="forcesync">
				Set to <b><c>1</c></b> to make server sync the animation with all other players in streaming radius. <b><c>2</c></b> works same as <b><c>1</c></b>, but will ONLY apply the animation to streamed-in players, but NOT the actual player being animated (useful for npc animations and persistent animations when players are being streamed) (optional=<b><c>0</c></b>)
			</param>
			<summary>Apply an animation to a player.</summary>           <seealso name="ClearAnimations"/> <seealso name="SetPlayerSpecialAction"/> <remarks>The <paramref name="forcesync"/> optional parameter, which defaults to <b><c>0</c></b>, in most cases is not needed since players sync animations themselves. The <paramref name="forcesync"/> parameter can force all players who can see <paramref name="playerid"/> to play the animation regardless of whether the player is performing that animation. This is useful in circumstances where the player can't sync the animation themselves. For example, they may be paused.</remarks> <remarks>An invalid animation library will crash the player's game.</remarks> <returns>This function always returns <b><c>1</c></b>, even if the player specified does not exist, or any of the parameters are invalid (e.g. invalid library).</returns>
		</member>
		<member name="M:AsmClearError" syntax="AsmClearError(ctx[])">
			<stacksize value="5"/>
			<referrer name="CGen_OOM"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmSetError"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitAdd" syntax="AsmEmitAdd(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ADD"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitAddC" syntax="AsmEmitAddC(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ADD_C"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitAddrAlt" syntax="AsmEmitAddrAlt(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ADDR_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitAddrPri" syntax="AsmEmitAddrPri(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ADDR_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitAlignAlt" syntax="AsmEmitAlignAlt(ctx[], number)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ALIGN_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="number">
			</param>
		</member>
		<member name="M:AsmEmitAlignPri" syntax="AsmEmitAlignPri(ctx[], number)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ALIGN_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="number">
			</param>
		</member>
		<member name="M:AsmEmitAnd" syntax="AsmEmitAnd(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_AND"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitBounds" syntax="AsmEmitBounds(ctx[], bound)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_BOUNDS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="bound">
			</param>
		</member>
		<member name="M:AsmEmitBreak" syntax="AsmEmitBreak(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_BREAK"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitCall" syntax="AsmEmitCall(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_CALL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitCallAbs" syntax="AsmEmitCallAbs(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="24"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="_yH@"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="OP_CALL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitCallLabelStringize" syntax="AsmEmitCallLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_CALL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitCell" syntax="AsmEmitCell(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="AsmEmitJumpStringize"/>
			<referrer name="AsmEmitOpcode"/>
			<referrer name="AsmEmitOperand"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="ASM_ERROR_SPACE"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_buffer_size"/>
			<dependency name="AsmRaiseError"/>
			<dependency name="WriteAmxMemory"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitCmps" syntax="AsmEmitCmps(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_CMPS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitConstAlt" syntax="AsmEmitConstAlt(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_CONST_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitConstPri" syntax="AsmEmitConstPri(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_CONST_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitDec" syntax="AsmEmitDec(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_DEC"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitDecAlt" syntax="AsmEmitDecAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_DEC_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitDecI" syntax="AsmEmitDecI(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_DEC_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitDecPri" syntax="AsmEmitDecPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_DEC_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitDecS" syntax="AsmEmitDecS(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_DEC_S"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitEq" syntax="AsmEmitEq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_EQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitEqCAlt" syntax="AsmEmitEqCAlt(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_EQ_C_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitEqCPri" syntax="AsmEmitEqCPri(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_EQ_C_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitFill" syntax="AsmEmitFill(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_FILL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitGeq" syntax="AsmEmitGeq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_GEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitGrtr" syntax="AsmEmitGrtr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_GRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitHalt" syntax="AsmEmitHalt(ctx[], code)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_HALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="code">
			</param>
		</member>
		<member name="M:AsmEmitHeap" syntax="AsmEmitHeap(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_HEAP"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitIdxaddr" syntax="AsmEmitIdxaddr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_IDXADDR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitIdxaddrB" syntax="AsmEmitIdxaddrB(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_IDXADDR_B"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitInc" syntax="AsmEmitInc(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INC"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitIncAlt" syntax="AsmEmitIncAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INC_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitIncI" syntax="AsmEmitIncI(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INC_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitIncPri" syntax="AsmEmitIncPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INC_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitIncS" syntax="AsmEmitIncS(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INC_S"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitInstruction" syntax="AsmEmitInstruction(ctx[], opcode, ...)">
			<tagname value="AsmError"/>
			<stacksize value="8"/>
			<referrer name="AsmEmitJumpInstruction"/>
			<referrer name="AsmEmitAdd"/>
			<referrer name="AsmEmitAddC"/>
			<referrer name="AsmEmitAddrAlt"/>
			<referrer name="AsmEmitAddrPri"/>
			<referrer name="AsmEmitAlignAlt"/>
			<referrer name="AsmEmitAlignPri"/>
			<referrer name="AsmEmitAnd"/>
			<referrer name="AsmEmitBounds"/>
			<referrer name="AsmEmitBreak"/>
			<referrer name="AsmEmitCall"/>
			<referrer name="AsmEmitCallAbs"/>
			<referrer name="AsmEmitCmps"/>
			<referrer name="AsmEmitConstAlt"/>
			<referrer name="AsmEmitConstPri"/>
			<referrer name="AsmEmitDec"/>
			<referrer name="AsmEmitDecAlt"/>
			<referrer name="AsmEmitDecI"/>
			<referrer name="AsmEmitDecPri"/>
			<referrer name="AsmEmitDecS"/>
			<referrer name="AsmEmitEq"/>
			<referrer name="AsmEmitEqCAlt"/>
			<referrer name="AsmEmitEqCPri"/>
			<referrer name="AsmEmitFill"/>
			<referrer name="AsmEmitGeq"/>
			<referrer name="AsmEmitGrtr"/>
			<referrer name="AsmEmitHalt"/>
			<referrer name="AsmEmitHeap"/>
			<referrer name="AsmEmitIdxaddr"/>
			<referrer name="AsmEmitIdxaddrB"/>
			<referrer name="AsmEmitInc"/>
			<referrer name="AsmEmitIncAlt"/>
			<referrer name="AsmEmitIncI"/>
			<referrer name="AsmEmitIncPri"/>
			<referrer name="AsmEmitIncS"/>
			<referrer name="AsmEmitInvert"/>
			<referrer name="AsmEmitJeq"/>
			<referrer name="AsmEmitJgeq"/>
			<referrer name="AsmEmitJgrtr"/>
			<referrer name="AsmEmitJleq"/>
			<referrer name="AsmEmitJless"/>
			<referrer name="AsmEmitJneq"/>
			<referrer name="AsmEmitJnz"/>
			<referrer name="AsmEmitJsgeq"/>
			<referrer name="AsmEmitJsgrtr"/>
			<referrer name="AsmEmitJsleq"/>
			<referrer name="AsmEmitJsless"/>
			<referrer name="AsmEmitJump"/>
			<referrer name="AsmEmitJzer"/>
			<referrer name="AsmEmitLctrl"/>
			<referrer name="AsmEmitLeq"/>
			<referrer name="AsmEmitLess"/>
			<referrer name="AsmEmitLidx"/>
			<referrer name="AsmEmitLidxB"/>
			<referrer name="AsmEmitLoadAlt"/>
			<referrer name="AsmEmitLoadPri"/>
			<referrer name="AsmEmitLoad"/>
			<referrer name="AsmEmitLoadI"/>
			<referrer name="AsmEmitLoadSAlt"/>
			<referrer name="AsmEmitLoadSPri"/>
			<referrer name="AsmEmitLodbI"/>
			<referrer name="AsmEmitLrefAlt"/>
			<referrer name="AsmEmitLrefPri"/>
			<referrer name="AsmEmitLrefSAlt"/>
			<referrer name="AsmEmitLrefSPri"/>
			<referrer name="AsmEmitMoveAlt"/>
			<referrer name="AsmEmitMovePri"/>
			<referrer name="AsmEmitMovs"/>
			<referrer name="AsmEmitNeg"/>
			<referrer name="AsmEmitNeq"/>
			<referrer name="AsmEmitNop"/>
			<referrer name="AsmEmitNot"/>
			<referrer name="AsmEmitOr"/>
			<referrer name="AsmEmitPopAlt"/>
			<referrer name="AsmEmitPopPri"/>
			<referrer name="AsmEmitProc"/>
			<referrer name="AsmEmitPushAdr"/>
			<referrer name="AsmEmitPushAlt"/>
			<referrer name="AsmEmitPushC"/>
			<referrer name="AsmEmitPushPri"/>
			<referrer name="AsmEmitPush"/>
			<referrer name="AsmEmitPushS"/>
			<referrer name="AsmEmitRet"/>
			<referrer name="AsmEmitRetn"/>
			<referrer name="AsmEmitSctrl"/>
			<referrer name="AsmEmitSdiv"/>
			<referrer name="AsmEmitSdivAlt"/>
			<referrer name="AsmEmitSgeq"/>
			<referrer name="AsmEmitSgrtr"/>
			<referrer name="AsmEmitShl"/>
			<referrer name="AsmEmitShlCAlt"/>
			<referrer name="AsmEmitShlCPri"/>
			<referrer name="AsmEmitShrCAlt"/>
			<referrer name="AsmEmitShrCPri"/>
			<referrer name="AsmEmitShr"/>
			<referrer name="AsmEmitSignAlt"/>
			<referrer name="AsmEmitSignPri"/>
			<referrer name="AsmEmitSleq"/>
			<referrer name="AsmEmitSless"/>
			<referrer name="AsmEmitSmul"/>
			<referrer name="AsmEmitSmulC"/>
			<referrer name="AsmEmitSshr"/>
			<referrer name="AsmEmitSrefAlt"/>
			<referrer name="AsmEmitSrefPri"/>
			<referrer name="AsmEmitSrefSAlt"/>
			<referrer name="AsmEmitSrefSPri"/>
			<referrer name="AsmEmitStack"/>
			<referrer name="AsmEmitStorAlt"/>
			<referrer name="AsmEmitStorPri"/>
			<referrer name="AsmEmitStorI"/>
			<referrer name="AsmEmitStorSAlt"/>
			<referrer name="AsmEmitStorSPri"/>
			<referrer name="AsmEmitStrbI"/>
			<referrer name="AsmEmitSub"/>
			<referrer name="AsmEmitSubAlt"/>
			<referrer name="AsmEmitSwapAlt"/>
			<referrer name="AsmEmitSwapPri"/>
			<referrer name="AsmEmitSysreqC"/>
			<referrer name="AsmEmitSysreqD"/>
			<referrer name="AsmEmitSysreqPri"/>
			<referrer name="AsmEmitUdiv"/>
			<referrer name="AsmEmitUdivAlt"/>
			<referrer name="AsmEmitUmul"/>
			<referrer name="AsmEmitXchg"/>
			<referrer name="AsmEmitXor"/>
			<referrer name="AsmEmitZero"/>
			<referrer name="AsmEmitZeroAlt"/>
			<referrer name="AsmEmitZeroPri"/>
			<referrer name="AsmEmitZeroS"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmEmitOpcode"/>
			<dependency name="AsmEmitOperand"/>
			<dependency name="gPreviousWriteOffset"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
			<param name="...">
			</param>
		</member>
		<member name="M:AsmEmitInvert" syntax="AsmEmitInvert(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_INVERT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJeq" syntax="AsmEmitJeq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJeqLabelStringize" syntax="AsmEmitJeqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJeqRel" syntax="AsmEmitJeqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJgeq" syntax="AsmEmitJgeq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJgeqLabelStringize" syntax="AsmEmitJgeqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJgeqRel" syntax="AsmEmitJgeqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJgrtr" syntax="AsmEmitJgrtr(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJgrtrLabelStringize" syntax="AsmEmitJgrtrLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJgrtrRel" syntax="AsmEmitJgrtrRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJleq" syntax="AsmEmitJleq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJleqLabelStringize" syntax="AsmEmitJleqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJleqRel" syntax="AsmEmitJleqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJless" syntax="AsmEmitJless(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJlessLabelStringize" syntax="AsmEmitJlessLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJlessRel" syntax="AsmEmitJlessRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJneq" syntax="AsmEmitJneq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JNEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJneqLabelStringize" syntax="AsmEmitJneqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JNEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJneqRel" syntax="AsmEmitJneqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JNEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJnz" syntax="AsmEmitJnz(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JNZ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJnzLabelStringize" syntax="AsmEmitJnzLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JNZ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJnzRel" syntax="AsmEmitJnzRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JNZ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJrel" syntax="AsmEmitJrel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JREL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJrelLabelStringize" syntax="AsmEmitJrelLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JREL"/>
			<dependency name="true"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJsgeq" syntax="AsmEmitJsgeq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JSGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJsgeqLabelStringize" syntax="AsmEmitJsgeqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JSGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJsgeqRel" syntax="AsmEmitJsgeqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JSGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJsgrtr" syntax="AsmEmitJsgrtr(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JSGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJsgrtrLabelStringize" syntax="AsmEmitJsgrtrLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JSGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJsgrtrRel" syntax="AsmEmitJsgrtrRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JSGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJsleq" syntax="AsmEmitJsleq(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JSLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJsleqLabelStringize" syntax="AsmEmitJsleqLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JSLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJsleqRel" syntax="AsmEmitJsleqRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JSLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJsless" syntax="AsmEmitJsless(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JSLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJslessLabelStringize" syntax="AsmEmitJslessLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JSLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJslessRel" syntax="AsmEmitJslessRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JSLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJump" syntax="AsmEmitJump(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AddressofResolveFoundStart"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JUMP"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJumpInstruction" syntax="AsmEmitJumpInstruction(ctx[], opcode, offset)">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="AsmEmitJeqRel"/>
			<referrer name="AsmEmitJgeqRel"/>
			<referrer name="AsmEmitJgrtrRel"/>
			<referrer name="AsmEmitJleqRel"/>
			<referrer name="AsmEmitJlessRel"/>
			<referrer name="AsmEmitJneqRel"/>
			<referrer name="AsmEmitJnzRel"/>
			<referrer name="AsmEmitJsgeqRel"/>
			<referrer name="AsmEmitJsgrtrRel"/>
			<referrer name="AsmEmitJsleqRel"/>
			<referrer name="AsmEmitJslessRel"/>
			<referrer name="AsmEmitJumpRel"/>
			<referrer name="AsmEmitJzerRel"/>
			<referrer name="AsmEmitJrel"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="AsmGetJumpAddressFromOffset"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJumpLabelInstruction" syntax="AsmEmitJumpLabelInstruction(ctx[], opcode, label[], relative)">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="AsmEmitCallLabelStringize"/>
			<referrer name="AsmEmitJeqLabelStringize"/>
			<referrer name="AsmEmitJgeqLabelStringize"/>
			<referrer name="AsmEmitJgrtrLabelStringize"/>
			<referrer name="AsmEmitJleqLabelStringize"/>
			<referrer name="AsmEmitJlessLabelStringize"/>
			<referrer name="AsmEmitJneqLabelStringize"/>
			<referrer name="AsmEmitJnzLabelStringize"/>
			<referrer name="AsmEmitJsgeqLabelStringize"/>
			<referrer name="AsmEmitJsgrtrLabelStringize"/>
			<referrer name="AsmEmitJsleqLabelStringize"/>
			<referrer name="AsmEmitJslessLabelStringize"/>
			<referrer name="AsmEmitJumpLabelStringize"/>
			<referrer name="AsmEmitJzerLabelStringize"/>
			<referrer name="AsmEmitJrelLabelStringize"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmEmitJumpStringize"/>
			<dependency name="AsmEmitOpcode"/>
			<dependency name="gPreviousWriteOffset"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="relative">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJumpLabelStringize" syntax="AsmEmitJumpLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JUMP"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJumpRel" syntax="AsmEmitJumpRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JUMP"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitJumpStringize" syntax="AsmEmitJumpStringize(ctx[], label[], relative)">
			<tagname value="AsmError"/>
			<stacksize value="10"/>
			<referrer name="AsmEmitJumpLabelInstruction"/>
			<dependency name="ASM_ERROR_LABEL_OVERFLOW"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_label_names"/>
			<dependency name="AsmContext_labels"/>
			<dependency name="AsmEmitCell"/>
			<dependency name="AsmFindLabelIndex"/>
			<dependency name="AsmHashLabel"/>
			<dependency name="AsmRaiseError"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="relative">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJzer" syntax="AsmEmitJzer(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_JZER"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitJzerLabelStringize" syntax="AsmEmitJzerLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="7"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitJumpLabelInstruction"/>
			<dependency name="OP_JZER"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitJzerRel" syntax="AsmEmitJzerRel(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitJumpInstruction"/>
			<dependency name="OP_JZER"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitLabelStringize" syntax="AsmEmitLabelStringize(ctx[], label[])">
			<tagname value="AsmError"/>
			<stacksize value="11"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="ASM_ERROR_LABEL_DUPLICATE"/>
			<dependency name="ASM_ERROR_LABEL_OVERFLOW"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_label_names"/>
			<dependency name="AsmContext_labels"/>
			<dependency name="AsmFindLabelIndex"/>
			<dependency name="AsmGetJumpAddressFromOffset"/>
			<dependency name="AsmHashLabel"/>
			<dependency name="AsmRaiseError"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="WriteAmxMemory"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitLctrl" syntax="AsmEmitLctrl(ctx[], index)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LCTRL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:AsmEmitLeq" syntax="AsmEmitLeq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitLess" syntax="AsmEmitLess(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitLidx" syntax="AsmEmitLidx(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LIDX"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitLidxB" syntax="AsmEmitLidxB(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LIDX_B"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitLoad" syntax="AsmEmitLoad(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitLoadAlt" syntax="AsmEmitLoadAlt(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitLoadI" syntax="AsmEmitLoadI(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitLoadPri" syntax="AsmEmitLoadPri(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitLoadSAlt" syntax="AsmEmitLoadSAlt(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_S_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitLoadSPri" syntax="AsmEmitLoadSPri(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LOAD_S_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitLodbI" syntax="AsmEmitLodbI(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LODB_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitLrefAlt" syntax="AsmEmitLrefAlt(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LREF_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitLrefPri" syntax="AsmEmitLrefPri(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LREF_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitLrefSAlt" syntax="AsmEmitLrefSAlt(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LREF_S_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitLrefSPri" syntax="AsmEmitLrefSPri(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_LREF_S_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitMoveAlt" syntax="AsmEmitMoveAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_MOVE_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitMovePri" syntax="AsmEmitMovePri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_MOVE_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitMovs" syntax="AsmEmitMovs(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_MOVS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitNeg" syntax="AsmEmitNeg(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_NEG"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitNeq" syntax="AsmEmitNeq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_NEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitNop" syntax="AsmEmitNop(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_NOP"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitNot" syntax="AsmEmitNot(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_NOT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitOpcode" syntax="AsmEmitOpcode(ctx[], opcode)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="AsmEmitInstruction"/>
			<referrer name="AsmEmitJumpLabelInstruction"/>
			<dependency name="ASM_ERROR_OPCODE"/>
			<dependency name="AsmEmitCell"/>
			<dependency name="AsmRaiseError"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="RelocateOpcode"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitOperand" syntax="AsmEmitOperand(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="AsmEmitInstruction"/>
			<dependency name="AsmEmitCell"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitOr" syntax="AsmEmitOr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_OR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPadding" syntax="AsmEmitPadding(ctx[], op)">
			<stacksize value="7"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_buffer_size"/>
			<dependency name="GetOpcodeInstructionParameters"/>
			<dependency name="IsOpcodeValid"/>
			<dependency name="OP_NOP"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="WriteAmxMemory"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="op">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPopAlt" syntax="AsmEmitPopAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_POP_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPopArgs" syntax="AsmEmitPopArgs(ctx[], n)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitStack"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="n">
			</param>
		</member>
		<member name="M:AsmEmitPopPri" syntax="AsmEmitPopPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="YVA2_CodeGenDeepCleanup"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_POP_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitProc" syntax="AsmEmitProc(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PROC"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPush" syntax="AsmEmitPush(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitPushAdr" syntax="AsmEmitPushAdr(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH_ADR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitPushAlt" syntax="AsmEmitPushAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPushArg" syntax="AsmEmitPushArg(ctx[], n)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitPushS"/>
			<dependency name="AsmGetArgOffset"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="n">
			</param>
		</member>
		<member name="M:AsmEmitPushC" syntax="AsmEmitPushC(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AsmEmitPushNumArgs"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH_C"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitPushNumArgs" syntax="AsmEmitPushNumArgs(ctx[], n)">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitPushC"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="n">
			</param>
		</member>
		<member name="M:AsmEmitPushPri" syntax="AsmEmitPushPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitPushS" syntax="AsmEmitPushS(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AsmEmitPushArg"/>
			<referrer name="YVA2_CodeGenPushVariable"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_PUSH_S"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitRet" syntax="AsmEmitRet(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_RET"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitRetn" syntax="AsmEmitRetn(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_RETN"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSctrl" syntax="AsmEmitSctrl(ctx[], index)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SCTRL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:AsmEmitSdiv" syntax="AsmEmitSdiv(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SDIV"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSdivAlt" syntax="AsmEmitSdivAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SDIV_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSgeq" syntax="AsmEmitSgeq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SGEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSgrtr" syntax="AsmEmitSgrtr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SGRTR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitShl" syntax="AsmEmitShl(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitShlCAlt" syntax="AsmEmitShlCAlt(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHL_C_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitShlCPri" syntax="AsmEmitShlCPri(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHL_C_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitShr" syntax="AsmEmitShr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitShrCAlt" syntax="AsmEmitShrCAlt(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHR_C_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitShrCPri" syntax="AsmEmitShrCPri(ctx[], shift)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SHR_C_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="shift">
			</param>
		</member>
		<member name="M:AsmEmitSignAlt" syntax="AsmEmitSignAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SIGN_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSignPri" syntax="AsmEmitSignPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SIGN_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSleq" syntax="AsmEmitSleq(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SLEQ"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSless" syntax="AsmEmitSless(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SLESS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSmul" syntax="AsmEmitSmul(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SMUL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSmulC" syntax="AsmEmitSmulC(ctx[], value)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SMUL_C"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:AsmEmitSrefAlt" syntax="AsmEmitSrefAlt(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SREF_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitSrefPri" syntax="AsmEmitSrefPri(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SREF_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitSrefSAlt" syntax="AsmEmitSrefSAlt(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SREF_S_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitSrefSPri" syntax="AsmEmitSrefSPri(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SREF_S_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitSshr" syntax="AsmEmitSshr(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SSHR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitStack" syntax="AsmEmitStack(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AsmEmitPopArgs"/>
			<referrer name="YVA2_CodeGenDeepCleanup"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STACK"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitStorAlt" syntax="AsmEmitStorAlt(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STOR_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitStorI" syntax="AsmEmitStorI(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STOR_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitStorPri" syntax="AsmEmitStorPri(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STOR_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitStorSAlt" syntax="AsmEmitStorSAlt(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STOR_S_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitStorSPri" syntax="AsmEmitStorSPri(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STOR_S_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmEmitStrbI" syntax="AsmEmitStrbI(ctx[], nbytes)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_STRB_I"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:AsmEmitSub" syntax="AsmEmitSub(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SUB"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSubAlt" syntax="AsmEmitSubAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SUB_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSwapAlt" syntax="AsmEmitSwapAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SWAP_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSwapPri" syntax="AsmEmitSwapPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SWAP_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSysreq" syntax="AsmEmitSysreq(ctx[], name[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitSysreqC"/>
			<dependency name="GetNativeIndexFromName"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitSysreqC" syntax="AsmEmitSysreqC(ctx[], index)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AsmEmitSysreq"/>
			<referrer name="_yH@"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SYSREQ_C"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:AsmEmitSysreqD" syntax="AsmEmitSysreqD(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SYSREQ_D"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitSysreqPri" syntax="AsmEmitSysreqPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_SYSREQ_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitUdiv" syntax="AsmEmitUdiv(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_UDIV"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitUdivAlt" syntax="AsmEmitUdivAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_UDIV_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitUmul" syntax="AsmEmitUmul(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_UMUL"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitXchg" syntax="AsmEmitXchg(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_XCHG"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitXor" syntax="AsmEmitXor(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_XOR"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitZero" syntax="AsmEmitZero(ctx[], address)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ZERO"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:AsmEmitZeroAlt" syntax="AsmEmitZeroAlt(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ZERO_ALT"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitZeroPri" syntax="AsmEmitZeroPri(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="5"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ZERO_PRI"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmEmitZeroS" syntax="AsmEmitZeroS(ctx[], offset)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmEmitInstruction"/>
			<dependency name="OP_ZERO_S"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmFindLabelIndex" syntax="AsmFindLabelIndex(ctx[], hash)">
			<stacksize value="2"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="AsmEmitJumpStringize"/>
			<dependency name="AsmContext_label_names"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="hash">
			</param>
		</member>
		<member name="M:AsmGetArgOffset" syntax="AsmGetArgOffset(n)">
			<stacksize value="1"/>
			<referrer name="AsmEmitPushArg"/>
			<dependency name="ASM_ARGUMENTS_OFFSET"/>
			<param name="n">
			</param>
		</member>
		<member name="M:AsmGetBufferSize" syntax="AsmGetBufferSize(ctx[])">
			<stacksize value="1"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_buffer_size"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmGetCode" syntax="AsmGetCode(ctx[])">
			<stacksize value="21"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="GetAmxHeader"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmGetCodeSize" syntax="AsmGetCodeSize(ctx[])">
			<stacksize value="1"/>
			<dependency name="AsmContext_buffer_offset"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmGetError" syntax="AsmGetError(ctx[])">
			<tagname value="AsmError"/>
			<stacksize value="1"/>
			<referrer name="CGen_OOM"/>
			<dependency name="AsmContext_error"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmGetErrorHandler" syntax="AsmGetErrorHandler(ctx[])">
			<stacksize value="1"/>
			<dependency name="AsmContext_error_handler"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:AsmGetJumpAddressFromOffset" syntax="AsmGetJumpAddressFromOffset(ctx[], offset)">
			<stacksize value="22"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="AsmEmitJumpInstruction"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:AsmGetPreviousWriteOffset" syntax="AsmGetPreviousWriteOffset()">
			<stacksize value="1"/>
			<dependency name="gPreviousWriteOffset"/>
		</member>
		<member name="M:AsmHashLabel" syntax="AsmHashLabel(label[])">
			<stacksize value="4"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="AsmEmitJumpStringize"/>
			<param name="label">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AsmInit" syntax="AsmInit(ctx[], buffer[], size)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="ref"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="buffer">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:AsmInitPtr" syntax="AsmInitPtr(ctx[], buffer, size)">
			<tagname value="AsmError"/>
			<stacksize value="2"/>
			<referrer name="AsmInit"/>
			<referrer name="CodeScanGetFunctionAsm"/>
			<referrer name="CodeScanGetMatchAsm"/>
			<referrer name="CGen_UseCodeSpace"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmContext_buffer_size"/>
			<dependency name="AsmContext_error_handler"/>
			<dependency name="AsmContext_label_names"/>
			<dependency name="AsmContext_labels"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="buffer">
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:AsmRaiseError" syntax="AsmRaiseError(ctx[], error)">
			<tagname value="AsmError"/>
			<stacksize value="6"/>
			<referrer name="AsmEmitCell"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="AsmEmitJumpStringize"/>
			<referrer name="AsmEmitOpcode"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_error_handler"/>
			<dependency name="AsmSetError"/>
			<dependency name="CallFunction"/>
			<dependency name="ref"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="error">
				<paraminfo>AsmError </paraminfo>
			</param>
		</member>
		<member name="M:AsmSetError" syntax="AsmSetError(ctx[], error)">
			<stacksize value="1"/>
			<referrer name="AsmRaiseError"/>
			<referrer name="AsmClearError"/>
			<dependency name="AsmContext_error"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="error">
				<paraminfo>AsmError </paraminfo>
			</param>
		</member>
		<member name="M:AsmSetErrorHandler" syntax="AsmSetErrorHandler(ctx[], error_handler)">
			<tagname value="AsmError"/>
			<stacksize value="1"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_error_handler"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="error_handler">
			</param>
		</member>
		<member name="M:AsmSetErrorHandlerName" syntax="AsmSetErrorHandlerName(ctx[], error_handler[])">
			<tagname value="AsmError"/>
			<stacksize value="4"/>
			<referrer name="CGen_UseCodeSpace"/>
			<dependency name="ASM_ERROR_NONE"/>
			<dependency name="AsmContext_error_handler"/>
			<dependency name="GetPublicAddressFromName"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="error_handler">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:AverageHitRate" syntax="AverageHitRate(playerid, hits, &amp;multiple_weapons)">
			<stacksize value="8"/>
			<referrer name="OnPlayerGiveDamage"/>
			<dependency name="false"/>
			<dependency name="s_HitsIssued"/>
			<dependency name="s_LastHitIdx"/>
			<dependency name="s_LastHitTicks"/>
			<dependency name="s_LastHitWeapons"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="hits">
			</param>
			<param name="multiple_weapons">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:AverageShootRate" syntax="AverageShootRate(playerid, shots, &amp;multiple_weapons)">
			<stacksize value="8"/>
			<referrer name="OnPlayerWeaponShot"/>
			<dependency name="false"/>
			<dependency name="s_LastShotIdx"/>
			<dependency name="s_LastShotTicks"/>
			<dependency name="s_LastShotWeapons"/>
			<dependency name="s_ShotsFired"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="shots">
			</param>
			<param name="multiple_weapons">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:BS_GetPlayerFlags" syntax="BS_GetPlayerFlags(playerid, &amp;flags)">
			<stacksize value="1"/>
			<dependency name="BustAim_g_PlayerSettings"/>
			<param name="playerid">
			</param>
			<param name="flags">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:BS_GetPlayerProfile" syntax="BS_GetPlayerProfile(playerid, &amp;shotsfired, &amp;shotshit, &amp;max_cont_shots, &amp;out_of_range_warns, &amp;random_aim_warns, &amp;proaim_tele_warns)">
			<stacksize value="2"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<param name="playerid">
			</param>
			<param name="shotsfired">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="shotshit">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="max_cont_shots">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="out_of_range_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="random_aim_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="proaim_tele_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:BS_GetPlayerWeaponProfile" syntax="BS_GetPlayerWeaponProfile(playerid, weaponid, &amp;allshots, &amp;hitshots, &amp;max_cont_shots, &amp;out_of_range_warns, &amp;random_aim_warns, &amp;proaim_tele_warns)">
			<stacksize value="1"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="allshots">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="hitshots">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="max_cont_shots">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="out_of_range_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="random_aim_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="proaim_tele_warns">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:BS_GetRandomAimStats" syntax="BS_GetRandomAimStats(playerid, arr[], sz)">
			<stacksize value="7"/>
			<dependency name="BustAim_g_AimWarningStats"/>
			<dependency name="BustAim_g_AimWarningStats"/>
			<dependency name="memcpy"/>
			<param name="playerid">
			</param>
			<param name="arr">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="sz">
			</param>
		</member>
		<member name="M:BS_GetRangeStats" syntax="BS_GetRangeStats(playerid, arr[], sz)">
			<stacksize value="7"/>
			<dependency name="BustAim_g_RangeWarningStats"/>
			<dependency name="BustAim_g_RangeWarningStats"/>
			<dependency name="memcpy"/>
			<param name="playerid">
			</param>
			<param name="arr">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="sz">
			</param>
		</member>
		<member name="M:BS_GetTeleportStats" syntax="BS_GetTeleportStats(playerid, arr[], sz)">
			<stacksize value="7"/>
			<dependency name="BustAim_g_TeleportWarningStats"/>
			<dependency name="BustAim_g_TeleportWarningStats"/>
			<dependency name="memcpy"/>
			<param name="playerid">
			</param>
			<param name="arr">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="sz">
			</param>
		</member>
		<member name="M:BS_ResetPlayerFlags" syntax="BS_ResetPlayerFlags(playerid)">
			<stacksize value="1"/>
			<dependency name="BustAim_g_PlayerSettings"/>
			<dependency name="CHECK_FOR_CONTINOUS_SHOTS"/>
			<dependency name="CHECK_FOR_OUT_OF_RANGE_SHOTS"/>
			<dependency name="CHECK_FOR_PROAIM_TELEPORT"/>
			<dependency name="CHECK_FOR_RANDOM_AIM_SHOTS"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:BS_ResetPlayerProfile" syntax="BS_ResetPlayerProfile(playerid)">
			<stacksize value="4"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="Fill68"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:BS_ResetPlayerWeaponProfile" syntax="BS_ResetPlayerWeaponProfile(playerid, weaponid)">
			<stacksize value="1"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:BS_SetPlayerFlags" syntax="BS_SetPlayerFlags(playerid, flags)">
			<stacksize value="1"/>
			<dependency name="BustAim_g_PlayerSettings"/>
			<param name="playerid">
			</param>
			<param name="flags">
			</param>
		</member>
		<member name="M:Base64Decode" syntax="Base64Decode(dest[], src[], len, offset)">
			<stacksize value="4"/>
			<dependency name="cellbits"/>
			<dependency name="min"/>
			<dependency name="strlen"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
			<param name="offset">
			</param>
			<summary>  Base64Decode  </summary>  <remarks>  Decodes data using proper base64.  </remarks> 
		</member>
		<member name="M:Base64Encode" syntax="Base64Encode(dest[], src[], num, len, offset)">
			<stacksize value="1"/>
			<dependency name="cellbits"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="num">
			</param>
			<param name="len">
			</param>
			<param name="offset">
			</param>
			<summary>  Base64Encode  </summary>  <remarks>  Encodes data using proper base64.  This code is complicated by the fact that  PAWN packed strings are backwards by cells in memory, so we need to do the  writes in what seems like a strange order.  </remarks> 
		</member>
		<member name="M:BustAim_OnPlayerUpdate" syntax="BustAim_OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="GetPlayerDrunkLevel"/>
			<dependency name="SetPlayerDrunkLevel"/>
			<dependency name="pDrunkLevelLast"/>
			<dependency name="pFPS"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:C@" syntax="C@(function[], fmat[], ...)">
			<stacksize value="9"/>
			<dependency name="@_"/>
			<dependency name="C@"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="CallRemoteFunction"/>
			<dependency name="Q@"/>
			<dependency name="YSI_g_sCallData"/>
			<dependency name="YSI_g_sPropCaller"/>
			<dependency name="YSI_g_sPropEmpty"/>
			<dependency name="YSI_g_sPropVarArg"/>
			<dependency name="YSI_g_sYSIM_STRING"/>
			<dependency name="YSI_g_sYSI_MAX_STRING"/>
			<dependency name="getproperty"/>
			<dependency name="setarg"/>
			<dependency name="setproperty"/>
			<dependency name="strunpack"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:CGEN" syntax="CGEN(&amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f, &amp;g, &amp;h, &amp;i, &amp;j, &amp;k, &amp;l, &amp;m, &amp;n, &amp;o, &amp;p, &amp;q, &amp;r, &amp;s, &amp;t, &amp;u, &amp;v, &amp;w, &amp;x, &amp;y, &amp;z)">
			<stacksize value="1"/>
			<referrer name="_@_y_cgen_@_0"/>
			<param name="a">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="b">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="c">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="d">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="e">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="f">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="g">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="h">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="i">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="j">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="k">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="l">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="m">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="n">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="o">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="p">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="q">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="r">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="s">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="t">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="u">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="v">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="w">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="x">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CGen_AddCodeSpace" syntax="CGen_AddCodeSpace(num)">
			<stacksize value="4"/>
			<referrer name="Hooks_GenerateCode"/>
			<dependency name="Debug_Print0"/>
			<dependency name="YSI_g_sCodeSpace"/>
			<param name="num">
			</param>
		</member>
		<member name="M:CGen_GetAddr" syntax="CGen_GetAddr(func[])">
			<stacksize value="4"/>
			<referrer name="CGen_SetupCodeSpace"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_Read"/>
			<dependency name="funcidx"/>
			<param name="func">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:CGen_GetCodeSpace" syntax="CGen_GetCodeSpace()">
			<stacksize value="1"/>
			<referrer name="Hooks_GenerateCode"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="YSI_g_sCodeSpace"/>
		</member>
		<member name="M:CGen_OOM" syntax="CGen_OOM(ctx[])">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="ASM_ERROR_LABEL_DUPLICATE"/>
			<dependency name="ASM_ERROR_LABEL_OVERFLOW"/>
			<dependency name="ASM_ERROR_OPCODE"/>
			<dependency name="ASM_ERROR_OPERAND"/>
			<dependency name="ASM_ERROR_SPACE"/>
			<dependency name="AsmClearError"/>
			<dependency name="AsmGetError"/>
			<dependency name="Debug_Print0"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:CGen_OnCodeInit" syntax="CGen_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="CallFunction"/>
			<dependency name="Hooks_DoAllHooks"/>
			<dependency name="Hooks_InvalidateName"/>
			<dependency name="Hooks_RepairJITInit"/>
			<dependency name="Hooks_SortPublics"/>
			<dependency name="Hooks_SortReplacements"/>
			<dependency name="Server_JITExists"/>
			<dependency name="YSI_g_sInitFSIdx"/>
			<dependency name="YSI_g_sInitGMIdx"/>
			<dependency name="funcidx"/>
			<remarks>  Call the main hook run code, then advance the ALS chain.  </remarks>  <transition keep="true" target="_ALS : _ALS_go"/>  <transition target="_ALS_go"/>

		</member>
		<member name="M:CGen_SetupCodeSpace" syntax="CGen_SetupCodeSpace()">
			<stacksize value="5"/>
			<referrer name="VA_OnCodeInit"/>
			<dependency name="AMX_Write"/>
			<dependency name="CGen_GetAddr"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_RETN"/>
			<dependency name="OP_ZERO_PRI"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="YSI_g_sCodeEnd"/>
			<dependency name="YSI_g_sCodeSpace"/>
		</member>
		<member name="M:CGen_UseCodeSpace" syntax="CGen_UseCodeSpace(ctx[])">
			<stacksize value="6"/>
			<referrer name="Hooks_WriteFunction"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="AsmSetErrorHandlerName"/>
			<dependency name="YSI_g_sCodeEnd"/>
			<dependency name="YSI_g_sCodeSpace"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:Call" syntax="Call(address, auto_pop)">
			<stacksize value="5"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="address">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:CallFunction" syntax="CallFunction(address, ...)">
			<stacksize value="5"/>
			<referrer name="AsmRaiseError"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<referrer name="CGen_OnCodeInit"/>
			<param name="address">
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:CallLocalFunction" syntax="CallLocalFunction(function[], format[], ...)">
			<attribute name="native"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="_y_utils_OnPlayerConnect"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="rAgc_Detector"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
				Public function's name
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				Tag/format of each variable
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				'Indefinite' number of arguments of any tag
			</param>
			<summary>Calls a public function from the script in which it is used.</summary>    <seealso name="CallRemoteFunction"/> <returns>The value that the <b>only</b> public function returned.</returns> <remarks>CallLocalFunction crashes the server if it's passing an empty string.</remarks> <remarks> Format string placeholders:<p/> <ul> <li><b><c>c</c></b> - a single character</li> <li><b><c>d</c></b> - an integer (whole) number</li> <li><b><c>i</c></b> - an integer (whole) number</li> <li><b><c>x</c></b> - a number in hexadecimal notation</li> <li><b><c>f</c></b> - a floating point number</li> <li><b><c>s</c></b> - a string</li> </ul> </remarks>
		</member>
		<member name="M:CallN" syntax="CallN(address, args_to_push, auto_pop)">
			<stacksize value="6"/>
			<dependency name="cellmin"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="address">
			</param>
			<param name="args_to_push">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:CallNative" syntax="CallNative(index, ...)">
			<stacksize value="8"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<param name="index">
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:CallNativeByAddress" syntax="CallNativeByAddress(address, ...)">
			<stacksize value="8"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<param name="address">
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:CallRemoteFunction" syntax="CallRemoteFunction(function[], format[], ...)">
			<attribute name="native"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
				Public function's name
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				Tag/format of each variable
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				'Indefinite' number of arguments of any tag
			</param>
			<summary>Calls a public function in any script that is loaded.</summary>    <seealso name="CallLocalFunction"/> <returns>The value that the last public function returned.</returns> <remarks>CallRemoteFunction crashes the server if it's passing an empty string.</remarks> <remarks> Format string placeholders:<p/> <ul> <li><b><c>c</c></b> - a single character</li> <li><b><c>d</c></b> - an integer (whole) number</li> <li><b><c>i</c></b> - an integer (whole) number</li> <li><b><c>x</c></b> - a number in hexadecimal notation</li> <li><b><c>f</c></b> - a floating point number</li> <li><b><c>s</c></b> - a string</li> </ul> </remarks>
		</member>
		<member name="M:CancelSelectTextDraw" syntax="CancelSelectTextDraw(playerid)">
			<attribute name="native"/>
			<referrer name="HideModelSelectionMenu"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<param name="playerid">
				The ID of the player that should be the textdraw selection disabled
			</param>
			<summary>Cancel textdraw selection with the mouse.</summary>  <seealso name="SelectTextDraw"/> <seealso name="TextDrawSetSelectable"/> <seealso name="OnPlayerClickTextDraw"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>This function calls <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> with <b><c>INVALID_TEXT_DRAW</c></b> (<b><c>65535</c></b>). Using this function inside <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> without catching this case will cause clients to go into an infinite loop.</remarks>
		</member>
		<member name="M:Cell_CompressRight" syntax="Cell_CompressRight(x, m)">
			<stacksize value="12"/>
			<dependency name="Cell_CompressRightPrecomputed"/>
			<dependency name="Cell_PrecomputeMaskPermutation"/>
			<dependency name="Cell_PrecomputeMaskPermutation"/>
			<param name="x">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				The number to compress.
			</param>
			<param name="m">
				The mask for which bits to compress.
			</param>
			<summary>  Cell_CompressRight(GLOBAL_TAG_TYPES:x, m);  </summary>      <returns>  Selected bits from "x", shifted to be LSBs.  </returns>  <remarks>  Doesn't require precomputation.  </remarks> 
		</member>
		<member name="M:Cell_CompressRightPrecomputed" syntax="Cell_CompressRightPrecomputed(x, m, masks[])">
			<stacksize value="2"/>
			<referrer name="Cell_CompressRight"/>
			<param name="x">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				The number to compress.
			</param>
			<param name="m">
				The mask for which bits to compress.
			</param>
			<param name="masks">
				<paraminfo> [5] </paraminfo>
				Precomputed constants for the compression.
			</param>
			<summary>  Cell_CompressRightPrecomputed(GLOBAL_TAG_TYPES:x, m, masks[5]);  </summary>        <returns>  Selected bits from "x", shifted to be LSBs.  </returns>  <remarks>  Very briefly, do "x &amp; m", to select certain bits, then shift those bits  by various amounts so that they are consecutive:  x = 0b110011  m = 0b011010  x &amp; m = 0b010010  From here, because the mask was three bits we know we want just those three  bits in the LSBs, so the answer becomes:  0b000101  Just read this question, it has a diagram:  <a href="http://stackoverflow.com/questions/28282869/shift-masked-bits-to-the-lsb" />  </remarks> 
		</member>
		<member name="M:Cell_CountBits" syntax="Cell_CountBits(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_CountBits(number);  </summary>  <param name="number">The number to get the number of 1s in.</param>  <returns>  The number of 1s (set bits) in the input.  </returns>  <remarks>  1)  Example: 0  Returns: 0  2)  Example: 1  Returns: 1  3)  Example: 0x01010101  Returns: 4  I rewrote this in assembly just to see if I could pretty much.  I also  rewrote the lookup version in assembly.  In theory it should be faster, but  the marshalling of data was a little awkward.  </remarks> 
		</member>
		<member name="M:Cell_CountBlanks" syntax="Cell_CountBlanks(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_CountBlanks(number);  </summary>  <param name="number">The number to get the number of 0s in.</param>  <returns>  The number of 0s (unset bits) in the input.  </returns>  <remarks>  Like Cell_CountBits, but for 0s not 1s.  </remarks> 
		</member>
		<member name="M:Cell_ExpandLeft" syntax="Cell_ExpandLeft(x, m)">
			<stacksize value="12"/>
			<dependency name="Cell_ExpandLeftPrecomputed"/>
			<dependency name="Cell_PrecomputeMaskPermutation"/>
			<dependency name="Cell_PrecomputeMaskPermutation"/>
			<param name="x">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				The number to expand.
			</param>
			<param name="m">
				The mask for which bits to expand to.
			</param>
			<summary>  Cell_ExpandLeft(GLOBAL_TAG_TYPES:x, m)  </summary>      <returns>  LSBs from "x", shifted to selected bit positions.  </returns>  <remarks>  Doesn't require precomputation.  </remarks> 
		</member>
		<member name="M:Cell_ExpandLeftPrecomputed" syntax="Cell_ExpandLeftPrecomputed(x, m, masks[])">
			<stacksize value="2"/>
			<referrer name="Cell_ExpandLeft"/>
			<param name="x">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				The number to expand.
			</param>
			<param name="m">
				The mask for which bits to expand to.
			</param>
			<param name="masks">
				<paraminfo> [5] </paraminfo>
				Precomputed constants for the expansion.
			</param>
			<summary>  Cell_ExpandLeftPrecomputed(GLOBAL_TAG_TYPES:x, m, masks[5])  </summary>        <returns>  LSBs from "x", shifted to selected bit positions.  </returns>  <remarks>  The reverse of "Cell_CompressRightPrecomputed".  Doesn't return exactly the  original number before a compression, just the original number ANDed with  the mask "m".  </remarks> 
		</member>
		<member name="M:Cell_GetLowestBit" syntax="Cell_GetLowestBit(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestBit(number);  </summary>  <param name="number">The number to get the lowest set bit of.</param>  <returns>  The integer position of the lowest set bit.  </returns>  <remarks>  1)  Example: 0b00000000000000000000000000000001  Returns: 0  2)  Example: 0b00000000000000000000000000001000  Returns: 3  3)  Example: 0b00010001100011000011100010001000  Returns: 3  NOTE: This function returns "0" for both numbers with the "1" bit set AND  the number "0", which has NO bits set.  Check that the number is valid  before passing it to this function.  See: <a href="http://supertech.csail.mit.edu/papers/debruijn.pdf" />  </remarks> 
		</member>
		<member name="M:Cell_GetLowestBitEx" syntax="Cell_GetLowestBitEx(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestBitEx(number);  </summary>  <param name="number">The number to get the lowest set bit of PLUS ONE.</param>  <returns>  The integer position of the lowest set bit PLUS ONE.  </returns>  <remarks>  This function is identical to "Cell_GetLowestBit", but gives different  results for 0 and non-zero numbers.  The examples below all have a result  one higher than the "Cell_GetLowestBit" function.  1)  Example: 0b00000000000000000000000000000001  Returns: 1  2)  Example: 0b00000000000000000000000000001000  Returns: 4  3)  Example: 0b00010001100011000011100010001000  Returns: 4  4)  Example: 0  Returns: 0  See: <a href="http://supertech.csail.mit.edu/papers/debruijn.pdf" />  </remarks> 
		</member>
		<member name="M:Cell_GetLowestBlank" syntax="Cell_GetLowestBlank(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestBlank(number);  </summary>  <param name="number">The number to get the lowest unset bit of.</param>  <returns>  The integer position of the lowest unset bit.  </returns>  <remarks>  Like Cell_GetLowestBit, but for 0s not 1s.  </remarks> 
		</member>
		<member name="M:Cell_GetLowestBlankEx" syntax="Cell_GetLowestBlankEx(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestBlankEx(number);  </summary>  <param name="number">The number to get the lowest unset bit of PLUS ONE.</param>  <returns>  The integer position of the lowest unset bit PLUS ONE.  </returns>  <remarks>  Like Cell_GetLowestBitEx, but for 0s not 1s.  </remarks> 
		</member>
		<member name="M:Cell_GetLowestComponent" syntax="Cell_GetLowestComponent(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestComponent(number);  </summary>  <param name="number">The number to get the lowest 1 in.</param>  <returns>  The lowest set bit.  </returns>  <remarks>  Similar to Cell_GetLowestBit, but returns the bit, not the position of the  bit.  1)  Example: 0b00000000000000000000000000000001  Returns: 0b00000000000000000000000000000001  2)  Example: 0b00000000000000000000000000001000  Returns: 0b00000000000000000000000000001000  3)  Example: 0b00010001100011000011100010001000  Returns: 0b00000000000000000000000000001000  4)  Example: 0b00000000000000000000000000000000  Returns: 0b00000000000000000000000000000000  </remarks> 
		</member>
		<member name="M:Cell_GetLowestEmpty" syntax="Cell_GetLowestEmpty(data)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_GetLowestEmpty(number);  </summary>  <param name="number">The number to get the lowest 0 in.</param>  <returns>  The lowest unset bit.  </returns>  <remarks>  Like Cell_GetLowestComponent, but for 0s not 1s.  </remarks> 
		</member>
		<member name="M:Cell_PrecomputeMaskPermutation" syntax="Cell_PrecomputeMaskPermutation(m)">
			<stacksize value="10"/>
			<referrer name="Cell_CompressRight"/>
			<referrer name="Cell_ExpandLeft"/>
			<dependency name="Cell_PrecomputeMaskPermutation"/>
			<param name="m">
				The mask.
			</param>
			<summary>  Cell_PrecomputeMaskPermutation(m)  </summary>    <returns>  Five precomputed constants to help expand or contract this mask.  </returns>  <remarks>  The full maths for generalised expansion and contraction is quite complex;  however, much of the inner loop relies only on the mask and not on the value  being manipulated.  Given this we can do a lot of work in advance, say  outside a loop, to avoid repeated calculations.  </remarks> 
		</member>
		<member name="M:Cell_ReverseBits" syntax="Cell_ReverseBits(data)">
			<stacksize value="1"/>
			<dependency name="swapchars"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_ReverseBits(number);  </summary>  <param name="number">The number to manipulate.</param>  <returns>  All the bits in the input reversed.  </returns>  <remarks>  1)  Example: 0b11110000000000000000000000000000  Becomes: 0b00000000000000000000000000001111  2)  Example: 0b10110011100011110000111110000010  Becomes: 0b01000001111100001111000111001101  3)  Example: 0b01010101010101010101010101010101  Becomes: 0b10101010101010101010101010101010  </remarks> 
		</member>
		<member name="M:Cell_ReverseBytes" syntax="Cell_ReverseBytes(data)">
			<stacksize value="3"/>
			<referrer name="Hooks_CompareNextCell"/>
			<dependency name="swapchars"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_ReverseBytes(number);  </summary>  <param name="number">The number to manipulate.</param>  <returns>  All the bytes in the input reversed.  </returns>  <remarks>  1)  Example: 0x12345678  Becomes: 0x78563412  2)  Example: 0x01020304  Becomes: 0x04030201  3)  Example: 0xFF00FF00  Becomes: 0x00FF00FF  </remarks> 
		</member>
		<member name="M:Cell_ReverseNibbles" syntax="Cell_ReverseNibbles(data)">
			<stacksize value="1"/>
			<dependency name="swapchars"/>
			<param name="data">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<summary>  Cell_ReverseNibbles(number);  </summary>  <param name="number">The number to manipulate.</param>  <returns>  All the nibbles (4-bit chunks) in the input reversed.  </returns>  <remarks>  1)  Example: 0x12345678  Becomes: 0x87654321  2)  Example: 0x010F0703  Becomes: 0x3070F010  3)  Example: 0xF0F0F0F0  Becomes: 0x0F0F0F0F  </remarks> 
		</member>
		<member name="M:CheckAccountIsRegForLogin" syntax="CheckAccountIsRegForLogin(playerid)">
			<attribute name="public"/>
			<stacksize value="89"/>
			<dependency name="D_LOGIN"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="Kick"/>
			<dependency name="LoginTimer"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SetTimerEx"/>
			<dependency name="ShowLoginTextDraws"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_num_rows"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="format"/>
			<dependency name="pColor"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:CheckLoggedIn" syntax="CheckLoggedIn(playerid)">
			<stacksize value="5"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pLang"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:CheckPlayerWeapons" syntax="CheckPlayerWeapons(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="g_CheckWeapons"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:CheckUnban" syntax="CheckUnban(playerid, user_name[])">
			<attribute name="public"/>
			<stacksize value="99"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cache_num_rows"/>
			<dependency name="cellmin"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pLang"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="user_name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:ClearAnimations" syntax="ClearAnimations(playerid, forcesync)">
			<attribute name="native"/>
			<referrer name="WC_ClearAnimations"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="WC_CbugPunishment"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="PlayerDeath"/>
			<param name="playerid">
				The ID of the player to clear the animations of
			</param>
			<param name="forcesync">
				Set to <b><c>1</c></b> to force playerid to sync the animation with other players in streaming radius (optional=<b><c>0</c></b>)
			</param>
			<summary>Clears all animations for the given player (it also cancels all current tasks such as jetpacking,parachuting,entering vehicles, driving (removes player out of vehicle), swimming, etc.. ).</summary>   <seealso name="ApplyAnimation"/> <remarks>ClearAnimations doesn't do anything when the animation ends if we pass 1 for the freeze parameter in <a href="#ApplyAnimation">ApplyAnimation</a>.</remarks> <remarks>Unlike some other ways to remove player from a vehicle, this will also reset the vehicle's velocity to zero, instantly stopping the car. Player will appear on top of the vehicle with the same location as he was in his car seat.</remarks> <returns>This function always returns <b><c>1</c></b>, even when the player specified is not connected.</returns>
		</member>
		<member name="M:ClearAnimationsForPlayer" syntax="ClearAnimationsForPlayer(playerid, forplayerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="WC_SpawnForStreamedIn"/>
			<param name="playerid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:ClearDuelInvites" syntax="ClearDuelInvites(playerid)">
			<stacksize value="9"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="forfeitPlayerDuel"/>
			<dependency name="gettime"/>
			<dependency name="p_duelInvitation"/>
			<dependency name="p_duelInvitation"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ClearFPlayer" syntax="ClearFPlayer(playerid, lines)">
			<stacksize value="6"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="check_banned_account"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="SendClientMessage"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="lines">
			</param>
		</member>
		<member name="M:CodeScanAddJumpTarget" syntax="CodeScanAddJumpTarget(cip, stk, hea, jumpTargets[], num)">
			<stacksize value="4"/>
			<referrer name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_jump_heap"/>
			<dependency name="CodeScanner_jump_stack"/>
			<dependency name="CodeScanner_jump_switch"/>
			<dependency name="CodeScanner_jump_target"/>
			<dependency name="CodeScanner_minn"/>
			<dependency name="min"/>
			<param name="cip">
			</param>
			<param name="stk">
			</param>
			<param name="hea">
			</param>
			<param name="jumpTargets">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:CodeScanAddMatcher" syntax="CodeScanAddMatcher(scanner[], searcher[])">
			<stacksize value="4"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="CodeScanner_first"/>
			<dependency name="ref"/>
			<param name="scanner">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="searcher">
				<paraminfo> [171] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanAddSwitchTarget" syntax="CodeScanAddSwitchTarget(dctx[], stk, hea, jumpTargets[], num)">
			<stacksize value="6"/>
			<referrer name="CodeScanStepInternal"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="CodeScanner_jump_heap"/>
			<dependency name="CodeScanner_jump_stack"/>
			<dependency name="CodeScanner_jump_switch"/>
			<dependency name="CodeScanner_jump_target"/>
			<dependency name="CodeScanner_minn"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="cellbits"/>
			<dependency name="gBase"/>
			<dependency name="gHdr"/>
			<dependency name="gOP_CASETBL"/>
			<dependency name="min"/>
			<param name="dctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="stk">
			</param>
			<param name="hea">
			</param>
			<param name="jumpTargets">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:CodeScanCall" syntax="CodeScanCall(cs[], csState[])">
			<stacksize value="3"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<dependency name="CodeScanMatcher_flags"/>
			<dependency name="CodeScanMatcher_func"/>
			<dependency name="CodeScanMatcher_user_data"/>
			<param name="cs">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="csState">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanCheck" syntax="CodeScanCheck(op, dctx[], cs[], fctx[], &amp;next)">
			<tagname value="bool"/>
			<stacksize value="12"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanMatch_hole_count"/>
			<dependency name="CodeScanMatch_holes"/>
			<dependency name="CodeScanMatch_size"/>
			<dependency name="CodeScanMatcher_code"/>
			<dependency name="CodeScanMatcher_flags"/>
			<dependency name="CodeScanMatcher_holeidx"/>
			<dependency name="CodeScanMatcher_holes"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="CodeScanMatcher_offset"/>
			<dependency name="CodeScanMatcher_start"/>
			<dependency name="DisasmGetCurIp"/>
			<dependency name="DisasmGetNextIp"/>
			<dependency name="DisasmGetNumOperands"/>
			<dependency name="DisasmGetOperandReloc"/>
			<dependency name="OP_BOUNDS"/>
			<dependency name="OP_BREAK"/>
			<dependency name="OP_HALT"/>
			<dependency name="OP_NOP"/>
			<dependency name="cellbits"/>
			<dependency name="false"/>
			<dependency name="memcpy"/>
			<dependency name="true"/>
			<param name="op">
				<paraminfo>Opcode </paraminfo>
			</param>
			<param name="dctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="cs">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="fctx">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="next">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanCheckJumpTarget" syntax="CodeScanCheckJumpTarget(cip, deloc, &amp;stk, &amp;hea, jumpTargets[], num)">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<referrer name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_jump_heap"/>
			<dependency name="CodeScanner_jump_stack"/>
			<dependency name="CodeScanner_jump_switch"/>
			<dependency name="CodeScanner_jump_target"/>
			<dependency name="CodeScanner_minn"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="cellbits"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="cip">
			</param>
			<param name="deloc">
			</param>
			<param name="stk">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="hea">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="jumpTargets">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:CodeScanClone" syntax="CodeScanClone(dest[], src[])">
			<stacksize value="1"/>
			<dependency name="CodeScanner_first"/>
			<param name="dest">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="src">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanDeref" syntax="CodeScanDeref(v)">
			<stacksize value="1"/>
			<referrer name="CodeScanFindOneFastPattern2"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanMatcher"/>
			<param name="v">
			</param>
		</member>
		<member name="M:CodeScanFindOneFastPattern2" syntax="CodeScanFindOneFastPattern2(matcher[], &amp;addr)">
			<tagname value="bool"/>
			<stacksize value="180"/>
			<referrer name="CodeScanRunFast"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanFindOneFastPattern3"/>
			<dependency name="CodeScanMatcher_code"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="OP_CALL"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="matcher">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="addr">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanFindOneFastPattern3" syntax="CodeScanFindOneFastPattern3(matcher[], addr, &amp;cur)">
			<tagname value="bool"/>
			<stacksize value="3"/>
			<referrer name="CodeScanFindOneFastPattern2"/>
			<dependency name="CodeScanMatcher_code"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="OP_CALL"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="matcher">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="addr">
			</param>
			<param name="cur">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetFuncName" syntax="CodeScanGetFuncName(addr, name[])">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<referrer name="CodeScanGetMatchType"/>
			<dependency name="GetPublicIndexFromAddress"/>
			<dependency name="GetPublicNameFromIndex"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="addr">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetFunctionAsm" syntax="CodeScanGetFunctionAsm(csm[], ctx[], offset)">
			<stacksize value="6"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="cellmax"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:CodeScanGetFunctionDisasm" syntax="CodeScanGetFunctionDisasm(csm[], ctx[], offset)">
			<stacksize value="1"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_start_ip"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:CodeScanGetFunctionScanner" syntax="CodeScanGetFunctionScanner(csm[], ret[], ctx[])">
			<stacksize value="4"/>
			<referrer name="CodeScanGetMatchScanner"/>
			<dependency name="CodeScanInit"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="CodeScanMatch_type"/>
			<dependency name="CodeScanner_state"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_start_ip"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ret">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetHoleCount" syntax="CodeScanGetHoleCount(csm[])">
			<stacksize value="1"/>
			<dependency name="CodeScanMatch_hole_count"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchAddress" syntax="CodeScanGetMatchAddress(csm[])">
			<stacksize value="1"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="gDat"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchAddressData" syntax="CodeScanGetMatchAddressData(csm[])">
			<stacksize value="1"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="CodeScanMatch_cip"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchAsm" syntax="CodeScanGetMatchAsm(csm[], ctx[], offset)">
			<stacksize value="6"/>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="cellmax"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:CodeScanGetMatchDisasm" syntax="CodeScanGetMatchDisasm(csm[], ctx[], offset)">
			<stacksize value="1"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_start_ip"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:CodeScanGetMatchFunc" syntax="CodeScanGetMatchFunc(csm[])">
			<stacksize value="1"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="gDat"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchFuncData" syntax="CodeScanGetMatchFuncData(csm[])">
			<stacksize value="1"/>
			<dependency name="CodeScanMatch_func"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchHeap" syntax="CodeScanGetMatchHeap(csm[])">
			<stacksize value="1"/>
			<dependency name="CodeScanMatch_heap"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchHole" syntax="CodeScanGetMatchHole(csm[], idx)">
			<stacksize value="1"/>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="CodeScanMatch_holes"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:CodeScanGetMatchLength" syntax="CodeScanGetMatchLength(csm[])">
			<stacksize value="1"/>
			<referrer name="AddressofResolveFoundEnd"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="CodeScanMatch_size"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchName" syntax="CodeScanGetMatchName(csm[], name[])">
			<stacksize value="5"/>
			<dependency name="CodeScanGetMatchType"/>
			<dependency name="CodeScanMatch_name"/>
			<dependency name="CodeScanMatch_type"/>
			<dependency name="strcat"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchScanner" syntax="CodeScanGetMatchScanner(csm[], ret[], ctx[], accurate)">
			<stacksize value="7"/>
			<dependency name="CodeScanGetFunctionScanner"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_param"/>
			<dependency name="CodeScanner_state"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_start_ip"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ret">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="accurate">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchStack" syntax="CodeScanGetMatchStack(csm[])">
			<stacksize value="1"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<dependency name="CodeScanMatch_stack"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanGetMatchType" syntax="CodeScanGetMatchType(csm[])">
			<stacksize value="5"/>
			<referrer name="CodeScanGetMatchName"/>
			<dependency name="CodeScanGetFuncName"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="CodeScanMatch_name"/>
			<dependency name="CodeScanMatch_type"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanInit" syntax="CodeScanInit(scanner[])">
			<stacksize value="5"/>
			<referrer name="CodeScanGetFunctionScanner"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanMatch_heap"/>
			<dependency name="CodeScanMatch_name"/>
			<dependency name="CodeScanMatch_params"/>
			<dependency name="CodeScanMatch_stack"/>
			<dependency name="CodeScanMatch_type"/>
			<dependency name="CodeScanResetJumpTargets"/>
			<dependency name="CodeScanner_first"/>
			<dependency name="CodeScanner_param"/>
			<dependency name="CodeScanner_state"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_NOP"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<dependency name="gBase"/>
			<dependency name="gCodBase"/>
			<dependency name="gDat"/>
			<dependency name="gHdr"/>
			<dependency name="gOP_CASETBL"/>
			<dependency name="gOP_NOP"/>
			<param name="scanner">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanMatcherData" syntax="CodeScanMatcherData(searcher[], val)">
			<stacksize value="1"/>
			<dependency name="CodeScanMatcher_flags"/>
			<dependency name="CodeScanMatcher_user_data"/>
			<param name="searcher">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="val">
			</param>
		</member>
		<member name="M:CodeScanMatcherInit_" syntax="CodeScanMatcherInit_(searcher[], address, flags)">
			<stacksize value="5"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="CodeScanMatcher_flags"/>
			<dependency name="CodeScanMatcher_func"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="CodeScanMatcher_user_data"/>
			<dependency name="CodeScanReset"/>
			<param name="searcher">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="address">
			</param>
			<param name="flags">
			</param>
		</member>
		<member name="M:CodeScanMatcherPattern_" syntax="CodeScanMatcherPattern_(searcher[], ...)">
			<stacksize value="10"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="CodeScanMatcher_code"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="GetOpcodeInstructionParameters"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<param name="searcher">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {Opcode,Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanNOPMatch" syntax="CodeScanNOPMatch(csm[])">
			<stacksize value="3"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanMatch_size"/>
			<dependency name="cellbits"/>
			<dependency name="gOP_NOP"/>
			<param name="csm">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanReset" syntax="CodeScanReset(cs[], &amp;next)">
			<stacksize value="1"/>
			<referrer name="CodeScanMatcherInit_"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<dependency name="CodeScanMatcher_func"/>
			<dependency name="CodeScanMatcher_holeidx"/>
			<dependency name="CodeScanMatcher_len"/>
			<dependency name="CodeScanMatcher_next"/>
			<dependency name="CodeScanMatcher_offset"/>
			<param name="cs">
				<paraminfo> [171] </paraminfo>
			</param>
			<param name="next">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanResetJumpTargets" syntax="CodeScanResetJumpTargets(jumpTargets[], num)">
			<stacksize value="1"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanInit"/>
			<dependency name="CodeScanner_jump_target"/>
			<dependency name="CodeScanner_minn"/>
			<param name="jumpTargets">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:CodeScanRun" syntax="CodeScanRun(csState[])">
			<tagname value="bool"/>
			<stacksize value="188"/>
			<referrer name="CodeScanRunFast"/>
			<dependency name="CodeScanCall"/>
			<dependency name="CodeScanCheck"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="CodeScanReset"/>
			<dependency name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_first"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmInit"/>
			<dependency name="cellmin"/>
			<dependency name="gDat"/>
			<dependency name="true"/>
			<param name="csState">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanRunFast" syntax="CodeScanRunFast(csState[], searchFuncAddr)">
			<tagname value="bool"/>
			<stacksize value="191"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="CodeScanCall"/>
			<dependency name="CodeScanCheck"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanDeref"/>
			<dependency name="CodeScanFindOneFastPattern2"/>
			<dependency name="CodeScanMatch_cip"/>
			<dependency name="CodeScanReset"/>
			<dependency name="CodeScanRun"/>
			<dependency name="CodeScanRunFastPrescan"/>
			<dependency name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_first"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmInit"/>
			<dependency name="OP_PROC"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="printf"/>
			<dependency name="true"/>
			<param name="csState">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="searchFuncAddr">
			</param>
		</member>
		<member name="M:CodeScanRunFastPrescan" syntax="CodeScanRunFastPrescan(&amp;proc, &amp;nextaddr, searchFuncAddr)">
			<stacksize value="6"/>
			<referrer name="CodeScanRunFast"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_PROC"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="UnrelocateOpcode"/>
			<dependency name="false"/>
			<dependency name="gCodBase"/>
			<dependency name="gOpArgCount"/>
			<dependency name="true"/>
			<param name="proc">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="nextaddr">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="searchFuncAddr">
			</param>
		</member>
		<member name="M:CodeScanStep" syntax="CodeScanStep(dctx[], csState[])">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<dependency name="CodeScanStepInternal"/>
			<dependency name="CodeScanner_param"/>
			<dependency name="CodeScanner_state"/>
			<param name="dctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="csState">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:CodeScanStepInternal" syntax="CodeScanStepInternal(dctx[], csState[], &amp;parseState, &amp;parseParam)">
			<tagname value="bool"/>
			<stacksize value="13"/>
			<referrer name="CodeScanStep"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="CodeScanGetMatchScanner"/>
			<dependency name="CodeScanAddJumpTarget"/>
			<dependency name="CodeScanAddSwitchTarget"/>
			<dependency name="CodeScanCheckJumpTarget"/>
			<dependency name="CodeScanMatch_func"/>
			<dependency name="CodeScanMatch_heap"/>
			<dependency name="CodeScanMatch_stack"/>
			<dependency name="CodeScanMatch_type"/>
			<dependency name="CodeScanResetJumpTargets"/>
			<dependency name="DISASM_DONE"/>
			<dependency name="DISASM_NOP"/>
			<dependency name="DISASM_OK"/>
			<dependency name="DisasmGetCurIp"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmNext"/>
			<dependency name="OP_ADD_C"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CALL_PRI"/>
			<dependency name="OP_HALT"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_JEQ"/>
			<dependency name="OP_JGEQ"/>
			<dependency name="OP_JGRTR"/>
			<dependency name="OP_JLEQ"/>
			<dependency name="OP_JLESS"/>
			<dependency name="OP_JNEQ"/>
			<dependency name="OP_JNZ"/>
			<dependency name="OP_JREL"/>
			<dependency name="OP_JSGEQ"/>
			<dependency name="OP_JSGRTR"/>
			<dependency name="OP_JSLEQ"/>
			<dependency name="OP_JSLESS"/>
			<dependency name="OP_JUMP"/>
			<dependency name="OP_JZER"/>
			<dependency name="OP_LCTRL"/>
			<dependency name="OP_LOAD_PRI"/>
			<dependency name="OP_POP_ALT"/>
			<dependency name="OP_POP_PRI"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_PUSH"/>
			<dependency name="OP_PUSH_ADR"/>
			<dependency name="OP_PUSH_ALT"/>
			<dependency name="OP_PUSH_C"/>
			<dependency name="OP_PUSH_PRI"/>
			<dependency name="OP_PUSH_R"/>
			<dependency name="OP_PUSH_S"/>
			<dependency name="OP_SCTRL"/>
			<dependency name="OP_STACK"/>
			<dependency name="OP_SWITCH"/>
			<dependency name="cellbits"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="gBase"/>
			<dependency name="true"/>
			<param name="dctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="csState">
				<paraminfo> [164] </paraminfo>
			</param>
			<param name="parseState">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="parseParam">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CreateActor" syntax="CreateActor(modelid, X, Y, Z, Rotation)">
			<attribute name="native"/>
			<referrer name="Iter_CreateActor"/>
			<param name="modelid">
				The model ID (skin ID) the actor should have
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate to create the actor at
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to create the actor at
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to create the actor at
			</param>
			<param name="Rotation">
				<paraminfo>Float </paraminfo>
				The facing angle (rotation) for the actor to have
			</param>
			<summary>Create a static 'actor' in the world. These 'actors' are like NPCs, however they have limited functionality. They do not take up server player slots.</summary>      <seealso name="DestroyActor"/> <seealso name="SetActorPos"/> <seealso name="GetActorPos"/> <seealso name="SetActorFacingAngle"/> <seealso name="GetActorFacingAngle"/> <seealso name="SetActorVirtualWorld"/> <seealso name="GetActorVirtualWorld"/> <seealso name="ApplyActorAnimation"/> <seealso name="ClearActorAnimations"/> <seealso name="GetPlayerCameraTargetActor"/> <seealso name="IsActorStreamedIn"/> <seealso name="SetActorHealth"/> <seealso name="GetActorHealth"/> <seealso name="SetActorInvulnerable"/> <seealso name="IsActorInvulnerable"/> <seealso name="IsValidActor"/> <seealso name="GetActorPoolSize"/> <seealso name="GetPlayerTargetActor"/> <seealso name="OnActorStreamIn"/> <seealso name="OnActorStreamOut"/> <seealso name="OnPlayerGiveDamageActor"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks> Actors are completely separate from NPCs. They do NOT use player IDs/slots on the server and CANNOT be handled like NPCs.<p/> Actors are limited to <b><c>1000</c></b> (<b><c>MAX_ACTORS</c></b>).<p/> Actors can be pushed by vehicles, use a timer to put them back at their positions.<p/> As of <b>0.3.7 R2</b> actors default to being <a href="http://wiki.sa-mp.com/wiki/SetActorInvulnerable">invulnerable</a>. </remarks> <returns> The created Actor ID (start at <b><c>0</c></b>).<p/> <b><c>INVALID_ACTOR_ID</c></b> (<b><c>65535</c></b>) If the actor limit (<b><c>1000</c></b>) is reached. </returns>
		</member>
		<member name="M:CreateDynamic3DTextLabel" syntax="CreateDynamic3DTextLabel(text[], color, x, y, z, drawdistance, attachedplayer, attachedvehicle, testlos, worldid, interiorid, playerid, streamdistance, areaid, priority)">
			<tagname value="Text3D"/>
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="topQuery"/>
			<param name="text">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="color">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="attachedplayer">
			</param>
			<param name="attachedvehicle">
			</param>
			<param name="testlos">
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicActor" syntax="CreateDynamicActor(modelid, x, y, z, r, invulnerable, health, worldid, interiorid, playerid, streamdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="topQuery"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="r">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="invulnerable">
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicObject" syntax="CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="@yH_OnGameModeInit@009"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateGTextdraws" syntax="CreateGTextdraws()">
			<stacksize value="6"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<dependency name="HitMark"/>
			<dependency name="WC_TextDrawAlignment"/>
			<dependency name="WC_TextDrawBackgroundColor"/>
			<dependency name="WC_TextDrawColor"/>
			<dependency name="WC_TextDrawCreate"/>
			<dependency name="WC_TextDrawFont"/>
			<dependency name="WC_TextDrawLetterSize"/>
			<dependency name="WC_TextDrawSetOutline"/>
			<dependency name="WC_TextDrawSetProportional"/>
			<dependency name="WC_TextDrawSetShadow"/>
		</member>
		<member name="M:CreateObject" syntax="CreateObject(modelid, X, Y, Z, rX, rY, rZ, DrawDistance)">
			<attribute name="native"/>
			<referrer name="CreateVendingMachines"/>
			<referrer name="@yH_OnGameModeInit@009"/>
			<param name="modelid">
				The model to create
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X coordinate to create the object at
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to create the object at
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to create the object at
			</param>
			<param name="rX">
				<paraminfo>Float </paraminfo>
				The X rotation of the object
			</param>
			<param name="rY">
				<paraminfo>Float </paraminfo>
				The Y rotation of the object
			</param>
			<param name="rZ">
				<paraminfo>Float </paraminfo>
				The Z rotation of the object
			</param>
			<param name="DrawDistance">
				<paraminfo>Float </paraminfo>
				The distance that San Andreas renders objects at. <b><c>0.0</c></b> will cause objects to render at their default distances. <b>Usable since 0.3b, limited to <c>300</c> prior to 0.3x</b> (optional=<b><c>0.0</c></b>)
			</param>
			<summary>Creates an object at specified coordinates in the game world.</summary>         <seealso name="DestroyObject"/> <seealso name="IsValidObject"/> <seealso name="CreatePlayerObject"/> <seealso name="MoveObject"/> <seealso name="SetObjectPos"/> <seealso name="SetObjectRot"/> <seealso name="GetObjectPos"/> <seealso name="GetObjectRot"/> <seealso name="AttachObjectToPlayer"/> <seealso name="SetObjectMaterialText"/> <seealso name="SetObjectMaterial"/> <remarks> Objects that emit light (lampposts, police lights, bollard lights, neons etc.) that have a greater rotation than <b><c>16.26</c></b> degrees (or <b><c>-16.26</c></b>) on either the X or Y axis will stop shining. This effect also applies to light objects attached to other objects, players and vehicles. If a light object is attached to a car and the car is rotated over <b><c>16.26</c></b> degrees (like in a rollover), the object will also stop emitting light. This is a GTA:SA issue and is not caused by a bug in SA-MP. </remarks> <remarks>In case the light is attached to another object, one fix for this is to set <b>SyncRotation</b> to false in <a href="#AttachObjectToObject">AttachObjectToObject</a>. This will ensure the light stays at <b><c>0</c></b> rotation. This would only really work for objects that consist ONLY of light, so wouldn't work for the police light for example. </remarks> <remarks>There is a limit of <a href="http://wiki.sa-mp.com/wiki/Limits"><b><c>1000</c></b> objects (<b><c>MAX_OBJECTS</c></b>)</a>. To circumvent this limit, you can use a <a href="http://forum.sa-mp.com/showthread.php?t=102865">streamer</a></remarks> <returns>The ID of the object that was created, or <b><c>INVALID_OBJECT_ID</c></b> if the object limit (<b><c>MAX_OBJECTS</c></b>) was reached.</returns>
		</member>
		<member name="M:CreatePTextdraws" syntax="CreatePTextdraws(playerid)">
			<stacksize value="9"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="AltChatTD_Player"/>
			<dependency name="DTD"/>
			<dependency name="GUI"/>
			<dependency name="GUI"/>
			<dependency name="MAX_LINES"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawAlignment"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawBoxColor"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetPreviewMode"/>
			<dependency name="WC_PlayerTextDrawSetPreviewRot"/>
			<dependency name="WC_PlayerTextDrawSetPreviewVehC"/>
			<dependency name="WC_PlayerTextDrawSetProportiona"/>
			<dependency name="WC_PlayerTextDrawSetSelectable"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawTextSize"/>
			<dependency name="WC_PlayerTextDrawUseBox"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:CreatePlayerTextDraw" syntax="CreatePlayerTextDraw(playerid, x, y, text[])">
			<tagname value="PlayerText"/>
			<attribute name="native"/>
			<referrer name="WC_CreatePlayerTextDraw"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player to create the textdraw for
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				X-Coordinate
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				Y-Coordinate
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text in the textdraw
			</param>
			<summary>Creates a textdraw for a single player. This can be used as a way around the <a href="#TextDrawCreate">global</a> text-draw limit.</summary>     <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks> If you choose values for y that are less than 1, the first text row will be invisible and only the shadow is visible.<p/> <paramref name="text"/> must <b>NOT</b> be empty or the server will crash! If you need a textdraw that shows nothing, use " " (a space) or _ (underscore)<p/> If the last character in the text is a space (" "), the text will all be blank.<p/> If part of the text is off-screen, the color of the text will not show, only the shadow (if enabled) will. <p/> </remarks> <remarks> This applies ONLY to sa-mp versions before <b>0.3z</b>:<p/><p/> Maximum length of textdraw is <b><c>800</c></b> characters. Longer text will crash the client in older versions.<p/> If you use color codes (such as <b><c>~R~ ~G~</c></b>) beyond 255th character the client will crash trying to display the textdraw. <p/> </remarks> <remarks>Keyboard key mapping codes (such as <b><c>~k~~VEHICLE_ENTER_EXIT~</c></b> Doesn't work beyond 255th character. </remarks> <remarks> The x,y coordinate is the top left coordinate for the text draw area based on a <b><c>640x480</c></b> "canvas" (irrespective of screen resolution). If you plan on using <a href="#PlayerTextDrawAlignment">PlayerTextDrawAlignment</a> with alignment <b><c>3</c></b> (right), the x,y coordinate is the top right coordinate for the text draw.<p/> This function merely CREATES the textdraw, you must use <a href="#PlayerTextDrawShow">PlayerTextDrawShow</a> to show it to a player.<p/> It is recommended to use WHOLE numbers instead of decimal positions when creating player textdraws to ensure resolution friendly design. <p/> </remarks> <remarks>Player-textdraws are automatically destroyed when a player disconnects.</remarks> <returns>The ID of the created textdraw.</returns>
		</member>
		<member name="M:CreateVehicle" syntax="CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren)">
			<attribute name="native"/>
			<referrer name="WC_CreateVehicle"/>
			<param name="vehicletype">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model</a> for the vehicle
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate for the vehicle
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate for the vehicle
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate for the vehicle
			</param>
			<param name="rotation">
				<paraminfo>Float </paraminfo>
				The facing angle for the vehicle
			</param>
			<param name="color1">
				The primary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>
			</param>
			<param name="color2">
				The secondary <a href="http://wiki.sa-mp.com/wiki/Color_ID">color ID</a>
			</param>
			<param name="respawn_delay">
				The delay until the car is respawned without a driver in <b>seconds</b>. Using <b><c>-1</c></b> will prevent the vehicle from respawning
			</param>
			<param name="addsiren">
				<b>Added in 0.3.7; will not work in earlier versions</b>. Enables the vehicle to have a siren, providing the vehicle has a horn (optional=<b><c>0</c></b>)
			</param>
			<summary>Creates a vehicle in the world. Can be used in place of <a href="#AddStaticVehicleEx">AddStaticVehicleEx</a> at any time in the script.</summary>          <seealso name="DestroyVehicle"/> <seealso name="AddStaticVehicle"/> <seealso name="AddStaticVehicleEx"/> <seealso name="GetVehicleParamsSirenState"/> <seealso name="OnVehicleSpawn"/> <seealso name="OnVehicleSirenStateChange"/> <remarks>Trains can only be added with AddStaticVehicle and AddStaticVehicleEx.</remarks> <returns> The vehicle ID of the vehicle created (<b><c>1</c></b> to <b><c>MAX_VEHICLES</c></b>).<p/> <b><c>INVALID_VEHICLE_ID (65535)</c></b> if vehicle was not created (vehicle limit reached or invalid vehicle model ID passed). </returns>
		</member>
		<member name="M:CreateVendingMachines" syntax="CreateVendingMachines()">
			<stacksize value="11"/>
			<referrer name="SetCustomVendingMachines"/>
			<referrer name="ScriptInit"/>
			<dependency name="CreateObject"/>
			<dependency name="DestroyVendingMachines"/>
			<dependency name="e_Model"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_RotX"/>
			<dependency name="e_RotY"/>
			<dependency name="e_RotZ"/>
			<dependency name="false"/>
			<dependency name="s_VendingMachineObject"/>
			<dependency name="sc_VendingMachines"/>
			<dependency name="sc_VendingMachines"/>
		</member>
		<member name="M:D@" syntax="D@(function[], fmat[], ...)">
			<stacksize value="9"/>
			<referrer name="_@Iter_ActorDo"/>
			<referrer name="_@Iter_VehicleDo"/>
			<dependency name="@_"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="CallRemoteFunction"/>
			<dependency name="YSI_g_sCallData"/>
			<dependency name="YSI_g_sPropCaller"/>
			<dependency name="YSI_g_sPropEmpty"/>
			<dependency name="YSI_g_sPropReturn"/>
			<dependency name="YSI_g_sPropVarArg"/>
			<dependency name="getproperty"/>
			<dependency name="setarg"/>
			<dependency name="setproperty"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:DamageFeedAddHit" syntax="DamageFeedAddHit(arr[][], playerid, issuerid, amount, weapon)">
			<stacksize value="8"/>
			<referrer name="DamageFeedAddHitGiven"/>
			<referrer name="DamageFeedAddHitTaken"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="DamageFeedRemoveHit"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="GetPlayerName"/>
			<dependency name="GetTickCount"/>
			<dependency name="IsDamageFeedActive"/>
			<dependency name="e_Amount"/>
			<dependency name="e_Issuer"/>
			<dependency name="e_Name"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Weapon"/>
			<dependency name="s_DamageFeedHideDelay"/>
			<dependency name="true"/>
			<param name="arr">
				<paraminfo> [5][28] </paraminfo>
			</param>
			<param name="playerid">
			</param>
			<param name="issuerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:DamageFeedAddHitGiven" syntax="DamageFeedAddHitGiven(playerid, issuerid, amount, weapon)">
			<stacksize value="9"/>
			<referrer name="OnPlayerDamageDone"/>
			<dependency name="DamageFeedAddHit"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_Spectating"/>
			<param name="playerid">
			</param>
			<param name="issuerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:DamageFeedAddHitTaken" syntax="DamageFeedAddHitTaken(playerid, issuerid, amount, weapon)">
			<stacksize value="9"/>
			<referrer name="OnPlayerDamageDone"/>
			<dependency name="DamageFeedAddHit"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_Spectating"/>
			<param name="playerid">
			</param>
			<param name="issuerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:DamageFeedRemoveHit" syntax="DamageFeedRemoveHit(arr[][], idx)">
			<stacksize value="2"/>
			<referrer name="DamageFeedAddHit"/>
			<dependency name="e_Tick"/>
			<param name="arr">
				<paraminfo> [5][28] </paraminfo>
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:DamageFeedUpdate" syntax="DamageFeedUpdate(playerid, modified)">
			<stacksize value="9"/>
			<referrer name="SetDamageFeedForPlayer"/>
			<referrer name="SetDamageFeed"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="WC_DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHit"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="DamageFeedUpdateText"/>
			<dependency name="GetTickCount"/>
			<dependency name="IsDamageFeedActive"/>
			<dependency name="KillTimer"/>
			<dependency name="PlayerTextDrawAlignment"/>
			<dependency name="PlayerTextDrawBackgroundColor"/>
			<dependency name="PlayerTextDrawColor"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="PlayerTextDrawFont"/>
			<dependency name="PlayerTextDrawLetterSize"/>
			<dependency name="PlayerTextDrawSetOutline"/>
			<dependency name="PlayerTextDrawSetShadow"/>
			<dependency name="SetTimerEx"/>
			<dependency name="e_Tick"/>
			<dependency name="false"/>
			<dependency name="printf"/>
			<dependency name="s_DamageFeedGiven"/>
			<dependency name="s_DamageFeedHideDelay"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedLastUpdate"/>
			<dependency name="s_DamageFeedMaxUpdateRate"/>
			<dependency name="s_DamageFeedTaken"/>
			<dependency name="s_DamageFeedTimer"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="modified">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:DamageFeedUpdateText" syntax="DamageFeedUpdateText(playerid)">
			<stacksize value="363"/>
			<referrer name="DamageFeedUpdate"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="PlayerTextDrawHide"/>
			<dependency name="PlayerTextDrawSetString"/>
			<dependency name="PlayerTextDrawShow"/>
			<dependency name="WC_GetWeaponName"/>
			<dependency name="e_Amount"/>
			<dependency name="e_Issuer"/>
			<dependency name="e_Name"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Weapon"/>
			<dependency name="format"/>
			<dependency name="printf"/>
			<dependency name="s_DamageFeedGiven"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedTaken"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DamagePlayer" syntax="DamagePlayer(playerid, amount, issuerid, weaponid, bodypart, ignore_armour)">
			<stacksize value="9"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="InflictDamage"/>
			<dependency name="IsPlayerConnected"/>
			<param name="playerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="issuerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
			<param name="ignore_armour">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:DeathTimer" syntax="DeathTimer(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:Debug_Code1" syntax="Debug_Code1(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code1(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:1(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 1</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code2" syntax="Debug_Code2(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code2(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:2(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 2</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code3" syntax="Debug_Code3(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code3(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:3(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 3</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code4" syntax="Debug_Code4(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code4(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:4(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 4</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code5" syntax="Debug_Code5(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code5(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:5(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 5</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code6" syntax="Debug_Code6(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code6(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:6(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 6</c>.  </remarks> 
		</member>
		<member name="M:Debug_Code7" syntax="Debug_Code7(code)">
			<stacksize value="1"/>
			<param name="code">
				Code to run.
			</param>
			  <remarks>  Code is not a variable, it's a code chunk and may be written as so:  <code>  Debug_Code7(if (bla == 2) { bla++; printf("%d", bla); });  </code>  Or:  <code>  C:7(if (bla == 2) { bla++; printf("%d", bla); });  </code>  The code must all be on one line to avoid errors.  This isn't really a function as the first parameter is part of the name.  Only compiles the code when <c>_DEBUG %gt;= 7</c>.  </remarks> 
		</member>
		<member name="M:Debug_Disable" syntax="Debug_Disable()">
			<stacksize value="1"/>
			<remarks>  Turn off level 0 prints.  </remarks>  <transition target="off"/>

		</member>
		<member name="M:Debug_Enable" syntax="Debug_Enable()">
			<stacksize value="1"/>
			<remarks>  Turn on level 0 prints.  </remarks>  <transition target="on"/>

		</member>
		<member name="M:Debug_ErrorHandler" syntax="Debug_ErrorHandler(asmError)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="Debug_Print0"/>
			<param name="asmError">
			</param>
		</member>
		<member name="M:Debug_Level" syntax="Debug_Level(level)">
			<stacksize value="1"/>
			<dependency name="YSI_gDebugLevel"/>
			<param name="level">
			</param>
			<remarks>  Set the debug level when the code is compiled with <c>_DEBUG=-1</c>, which  means full run-time selection.  </remarks> 
		</member>
		<member name="M:Debug_OnCodeInit" syntax="Debug_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetGlobal"/>
			<dependency name="AMX_HEADER_AMX_VERSION"/>
			<dependency name="AMX_HEADER_CIP"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_HEADER_DAT"/>
			<dependency name="AMX_HEADER_DEFSIZE"/>
			<dependency name="AMX_HEADER_FILE_VERSION"/>
			<dependency name="AMX_HEADER_FLAGS"/>
			<dependency name="AMX_HEADER_HEA"/>
			<dependency name="AMX_HEADER_LIBRARIES"/>
			<dependency name="AMX_HEADER_MAGIC"/>
			<dependency name="AMX_HEADER_NAMETABLE"/>
			<dependency name="AMX_HEADER_NATIVES"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_HEADER_PUBVARS"/>
			<dependency name="AMX_HEADER_SIZE"/>
			<dependency name="AMX_HEADER_STP"/>
			<dependency name="AMX_HEADER_TAGS"/>
			<dependency name="AMX_REAL_ADDRESS"/>
			<dependency name="AMX_REAL_DATA"/>
		</member>
		<member name="M:Debug_Print0" syntax="Debug_Print0(str[], ...)">
			<stacksize value="1"/>
			<automaton name="ysi_debug"/>
			<referrer name="OnJITCompile"/>
			<referrer name="Debug_ErrorHandler"/>
			<referrer name="ScriptInit_OnCodeInit"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="LevenshteinDistance"/>
			<referrer name="YVA2_DummyPush"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="CGen_OOM"/>
			<referrer name="CGen_AddCodeSpace"/>
			<referrer name="Hooks_IsolateName"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GetStubEntry"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Iter_YieldEnter"/>
			<dependency name="printf"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			<param name="format">str.</param>    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print0("variables: %d, %d", i, j);  </code>  Or:  <code>  P:0("variables: %d, %d", i, j);  </code>  <c>_DEBUG</c> level 0 prints are ALWAYS compiled, but are runtime switched  using the automata <c>ysi_debug</c>.  When then state is <c>ysi_debug :  on</c>, the prints are executed.  When then state is <c>ysi_debug : off</c>,  they aren't.  </remarks> 
		</member>
		<member name="M:Debug_Print1" syntax="Debug_Print1(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print1("variables: %d, %d", i, j);  </code>  Or:  <code>  P:1("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 1</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print2" syntax="Debug_Print2(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print2("variables: %d, %d", i, j);  </code>  Or:  <code>  P:2("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 2</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print3" syntax="Debug_Print3(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print3("variables: %d, %d", i, j);  </code>  Or:  <code>  P:3("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 3</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print4" syntax="Debug_Print4(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print4("variables: %d, %d", i, j);  </code>  Or:  <code>  P:4("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 4</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print5" syntax="Debug_Print5(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print5("variables: %d, %d", i, j);  </code>  Or:  <code>  P:5("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 5</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print6" syntax="Debug_Print6(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print6("variables: %d, %d", i, j);  </code>  Or:  <code>  P:6("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 6</c>.  </remarks> 
		</member>
		<member name="M:Debug_Print7" syntax="Debug_Print7(str[], ...)">
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				
			</param>
			    <remarks>  This isn't really a function as the first parameter is part of the name:  <code>  Debug_Print7("variables: %d, %d", i, j);  </code>  Or:  <code>  P:7("variables: %d, %d", i, j);  </code>  Only prints the data when <c>_DEBUG %gt;= 7</c>.  </remarks> 
		</member>
		<member name="M:Debug_PrintArray" syntax="Debug_PrintArray(arr[], size)">
			<stacksize value="108"/>
			<dependency name="Debug_PrintArray"/>
			<dependency name="format"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Debug_SetState" syntax="Debug_SetState()">
			<stacksize value="1"/>
			<automaton name="ysi_debug"/>
			<referrer name="ScriptInit_OnCodeInit"/>
			<transition keep="true" target="ysi_debug : on" source="ysi_debug : "/>  <remarks>  Mostly exists to define the full range of <c>ysi_debug</c> states.  </remarks> <p/> <transition target="on"/>

		</member>
		<member name="M:DeletePVar" syntax="DeletePVar(playerid, varname[])">
			<attribute name="native"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<param name="playerid">
				The ID of the player whose player variable to delete
			</param>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the player variable to delete
			</param>
			<summary>Deletes a previously set player variable.</summary>   <seealso name="SetPVarInt"/> <seealso name="GetPVarInt"/> <seealso name="SetPVarString"/> <seealso name="GetPVarString"/> <seealso name="SetPVarFloat"/> <seealso name="GetPVarFloat"/> <remarks>Once a variable is deleted, attempts to retrieve the value will return <b><c>0</c></b> (for integers and floats and <b><c>NULL</c></b> for strings).</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. Either the player specified isn't connected or there is no variable set with the given name. </returns>
		</member>
		<member name="M:DestroyActor" syntax="DestroyActor(actorid)">
			<attribute name="native"/>
			<referrer name="Iter_DestroyActor"/>
			<param name="actorid">
				The ID of the actor to destroy. Returned by <a href="#CreateActor">CreateActor</a>
			</param>
			<summary>Destroy an actor which was created with <a href="#CreateActor">CreateActor</a>.</summary>  <seealso name="CreateActor"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The actor with the ID specified does not exist. </returns>
		</member>
		<member name="M:DestroyDynamic3DTextLabel" syntax="DestroyDynamic3DTextLabel(id)">
			<attribute name="native"/>
			<referrer name="topQuery"/>
			<param name="id">
				<paraminfo>Text3D </paraminfo>
			</param>
		</member>
		<member name="M:DestroyDynamicActor" syntax="DestroyDynamicActor(actorid)">
			<attribute name="native"/>
			<referrer name="topQuery"/>
			<param name="actorid">
			</param>
		</member>
		<member name="M:DestroyObject" syntax="DestroyObject(objectid)">
			<attribute name="native"/>
			<referrer name="DestroyVendingMachines"/>
			<param name="objectid">
				The ID of the object to destroy. Returned by <a href="#CreateObject">CreateObject</a>
			</param>
			<summary>Destroys (removes) an object that was created using <a href="#CreateObject">CreateObject</a>.</summary>  <seealso name="CreateObject"/> <seealso name="IsValidObject"/> <seealso name="DestroyPlayerObject"/>
		</member>
		<member name="M:DestroyVehicle" syntax="DestroyVehicle(vehicleid)">
			<attribute name="native"/>
			<referrer name="WC_DestroyVehicle"/>
			<param name="vehicleid">
				The ID of the vehicle to destroy
			</param>
			<summary>Destroy a vehicle. It will disappear instantly.</summary>  <seealso name="CreateVehicle"/> <seealso name="RemovePlayerFromVehicle"/> <seealso name="SetVehicleToRespawn"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle does not exist. </returns>
		</member>
		<member name="M:DestroyVendingMachines" syntax="DestroyVendingMachines()">
			<stacksize value="4"/>
			<referrer name="SetCustomVendingMachines"/>
			<referrer name="ScriptExit"/>
			<referrer name="CreateVendingMachines"/>
			<dependency name="DestroyObject"/>
			<dependency name="false"/>
			<dependency name="s_VendingMachineObject"/>
		</member>
		<member name="M:DisableInteriorEnterExits" syntax="DisableInteriorEnterExits()">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<summary>Disable all the interior entrances and exits in the game (the yellow arrows at doors).</summary> <seealso name="AllowInteriorWeapons"/> <remarks>If the gamemode is changed after this function has been used, and the new gamemode doesn't disable markers, the markers will NOT reappear for already-connected players (but will for newly connected players).</remarks> <remarks>This function will only work if it has been used BEFORE a player connects (it is recommended to use it in OnGameModeInit). It will not remove a connected player's markers.</remarks> <returns>This function always returns <b><c>1</c></b>.</returns>
		</member>
		<member name="M:DisasmDecodeInsn" syntax="DisasmDecodeInsn(ctx[])">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<referrer name="DisasmNext"/>
			<referrer name="DisasmNextInsn"/>
			<referrer name="DisasmWriteCode"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="GetOpcodeInstructionParameters"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_NONE"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="UnrelocateOpcode"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmDump" syntax="DisasmDump(filename[])">
			<stacksize value="4"/>
			<dependency name="DisasmWrite"/>
			<param name="filename">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmGetCurIp" syntax="DisasmGetCurIp(ctx[])">
			<stacksize value="1"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="DisasmContext_cip"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmGetInsnName" syntax="DisasmGetInsnName(ctx[], name[], size)">
			<stacksize value="21"/>
			<referrer name="DisasmWriteCode"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="GetOpcodeInstructionName"/>
			<dependency name="GetOpcodeInstructionName"/>
			<dependency name="strcat"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:DisasmGetNextIp" syntax="DisasmGetNextIp(ctx[])">
			<stacksize value="1"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanCheck"/>
			<dependency name="DisasmContext_nip"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmGetNumOperands" syntax="DisasmGetNumOperands(ctx[])">
			<stacksize value="5"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="Hooks_GetStubEntry"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="GetOpcodeInstructionParameters"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="ReadAmxMemory"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmGetOpcode" syntax="DisasmGetOpcode(ctx[])">
			<tagname value="Opcode"/>
			<stacksize value="1"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="O@A_"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="_yH@"/>
			<dependency name="DisasmContext_opcode"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmGetOperand" syntax="DisasmGetOperand(ctx[], index)">
			<stacksize value="4"/>
			<referrer name="DisasmGetOperandReloc"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="Hooks_GetStubEntry"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="ReadAmxMemory"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:DisasmGetOperandReloc" syntax="DisasmGetOperandReloc(ctx[], index)">
			<stacksize value="6"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="O@A_"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmNeedReloc"/>
			<dependency name="DisasmReloc"/>
			<dependency name="OP_CASETBL"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:DisasmGetRemaining" syntax="DisasmGetRemaining(ctx[])">
			<stacksize value="1"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmInit" syntax="DisasmInit(ctx[], start, end)">
			<stacksize value="21"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="O@A_"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="CodeScanRun"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetStubEntry"/>
			<referrer name="Hooks_OnCodeInit"/>
			<referrer name="_yH@"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_start_ip"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="gCodBase"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="end">
			</param>
		</member>
		<member name="M:DisasmNeedReloc" syntax="DisasmNeedReloc(ctx[])">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="DisasmGetOperandReloc"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="GetOpcodeInstructionRelocatable"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmNext" syntax="DisasmNext(ctx[])">
			<tagname value="DisasmResult"/>
			<stacksize value="4"/>
			<referrer name="O@A_"/>
			<referrer name="CodeScanStepInternal"/>
			<referrer name="_yH@"/>
			<dependency name="DISASM_DONE"/>
			<dependency name="DISASM_NOP"/>
			<dependency name="DISASM_OK"/>
			<dependency name="DisasmContext_cip"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="DisasmDecodeInsn"/>
			<dependency name="NUM_OPCODES"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmNextInsn" syntax="DisasmNextInsn(ctx[])">
			<tagname value="Opcode"/>
			<stacksize value="4"/>
			<referrer name="YVA2_FoundCall"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetStubEntry"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="DisasmContext_opcode"/>
			<dependency name="DisasmDecodeInsn"/>
			<dependency name="OP_NONE"/>
			<param name="ctx">
				<paraminfo> [5] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmReloc" syntax="DisasmReloc(addr)">
			<stacksize value="1"/>
			<referrer name="DisasmGetOperandReloc"/>
			<dependency name="gCodBase"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:DisasmWrite" syntax="DisasmWrite(filename[])">
			<tagname value="bool"/>
			<stacksize value="5"/>
			<referrer name="DisasmDump"/>
			<dependency name="DisasmWriteFile"/>
			<dependency name="false"/>
			<dependency name="fclose"/>
			<dependency name="fopen"/>
			<dependency name="io_write"/>
			<dependency name="true"/>
			<param name="filename">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:DisasmWriteCode" syntax="DisasmWriteCode(file)">
			<stacksize value="159"/>
			<referrer name="DisasmWriteFile"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_CIP"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmContext_end_ip"/>
			<dependency name="DisasmContext_nip"/>
			<dependency name="DisasmDecodeInsn"/>
			<dependency name="DisasmGetCurIp"/>
			<dependency name="DisasmGetInsnName"/>
			<dependency name="DisasmGetNextIp"/>
			<dependency name="DisasmGetNumOperands"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmGetOperandReloc"/>
			<dependency name="DisasmInit"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="GetNativeIndexFromAddress"/>
			<dependency name="GetNativeNameFromIndex"/>
			<dependency name="GetPublicIndexFromAddress"/>
			<dependency name="GetPublicNameFromIndex"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ToHexStr"/>
			<dependency name="ToHexStr"/>
			<dependency name="fwrite"/>
			<dependency name="gCodBase"/>
			<dependency name="strcat"/>
			<dependency name="strlen"/>
			<param name="file">
				<paraminfo>File </paraminfo>
			</param>
		</member>
		<member name="M:DisasmWriteData" syntax="DisasmWriteData(file)">
			<stacksize value="38"/>
			<referrer name="DisasmWriteFile"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_HEA"/>
			<dependency name="DisasmWriteDataRowChar"/>
			<dependency name="DisasmWriteDataRowHex"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="ToHexStr"/>
			<dependency name="ToHexStr"/>
			<dependency name="fwrite"/>
			<dependency name="min"/>
			<param name="file">
				<paraminfo>File </paraminfo>
			</param>
		</member>
		<member name="M:DisasmWriteDataRowChar" syntax="DisasmWriteDataRowChar(file, start, num, max)">
			<stacksize value="13"/>
			<referrer name="DisasmWriteData"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ToPrintableAscii"/>
			<dependency name="fwrite"/>
			<param name="file">
				<paraminfo>File </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="num">
			</param>
			<param name="max">
			</param>
		</member>
		<member name="M:DisasmWriteDataRowHex" syntax="DisasmWriteDataRowHex(file, start, num, max)">
			<stacksize value="19"/>
			<referrer name="DisasmWriteData"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ToHexStr"/>
			<dependency name="ToHexStr"/>
			<dependency name="fwrite"/>
			<param name="file">
				<paraminfo>File </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="num">
			</param>
			<param name="max">
			</param>
		</member>
		<member name="M:DisasmWriteFile" syntax="DisasmWriteFile(file)">
			<stacksize value="4"/>
			<referrer name="DisasmWrite"/>
			<dependency name="DisasmWriteCode"/>
			<dependency name="DisasmWriteData"/>
			<param name="file">
				<paraminfo>File </paraminfo>
			</param>
		</member>
		<member name="M:DoLevenshteinDistance" syntax="DoLevenshteinDistance(a[], lenA, b[], lenB)">
			<stacksize value="42"/>
			<referrer name="LevenshteinDistance"/>
			<dependency name="min"/>
			<param name="a">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="lenA">
			</param>
			<param name="b">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="lenB">
			</param>
		</member>
		<member name="M:E@" syntax="E@()">
			<stacksize value="6"/>
			<dependency name="@_"/>
			<dependency name="setproperty"/>
		</member>
		<member name="M:EnableStuntBonusForAll" syntax="EnableStuntBonusForAll(enable)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="enable">
				<b><c>1</c></b> to enable stunt bonuses or <b><c>0</c></b> to disable them
			</param>
			<summary>Enables or disables stunt bonuses for all players. If enabled, players will receive monetary rewards when performing a stunt in a vehicle (e.g. a wheelie).</summary>  <seealso name="EnableStuntBonusForPlayer"/>
		</member>
		<member name="M:ExchangeArraySlots" syntax="ExchangeArraySlots(array[][], slot1, slot2)">
			<stacksize value="3"/>
			<referrer name="_SortDeepArray"/>
			<referrer name="SortArrayUsingComparator_QS"/>
			<param name="array">
				<paraminfo> [][] </paraminfo>
			</param>
			<param name="slot1">
			</param>
			<param name="slot2">
			</param>
		</member>
		<member name="M:F@" syntax="F@(calltype, master, heapptr)">
			<stacksize value="1"/>
			<referrer name="_@Iter_ActorDo"/>
			<referrer name="_@Iter_VehicleDo"/>
			<dependency name="YSI_g_sCallData"/>
			<param name="calltype">
			</param>
			<param name="master">
			</param>
			<param name="heapptr">
			</param>
		</member>
		<member name="M:Fill68" syntax="Fill68(loc[])">
			<stacksize value="2"/>
			<referrer name="BS_ResetPlayerProfile"/>
			<referrer name="rAgc_OnPlayerConnect"/>
			<param name="loc">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:ForceClassSelection" syntax="ForceClassSelection(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<param name="playerid">
				The player to send back to class selection
			</param>
			<summary>Forces a player to go back to class selection.</summary>  <seealso name="AddPlayerClass"/> <seealso name="SetPlayerSkin"/> <seealso name="GetPlayerSkin"/> <seealso name="OnPlayerRequestClass"/> <remarks>The player will not return to class selection until they re-spawn. This can be achieved with <a href="#TogglePlayerSpectating">TogglePlayerSpectating</a>, as seen in the below example.</remarks>
		</member>
		<member name="M:Free" syntax="Free(playerid)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="PI"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:FreezeSyncData" syntax="FreezeSyncData(playerid, toggle)">
			<attribute name="native"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="WC_CbugPunishment"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ScriptExit"/>
			<referrer name="PlayerDeath"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<param name="playerid">
			</param>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:G@" syntax="G@(...)">
			<stacksize value="1"/>
			<dependency name="G@"/>
			<dependency name="Q@"/>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:GameTextForAll" syntax="GameTextForAll(string[], time, style)">
			<attribute name="native"/>
			<referrer name="va_GameTextForAll"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The text to be displayed
			</param>
			<param name="time">
				The duration of the text being shown in milliseconds
			</param>
			<param name="style">
				The style of text to be displayed
			</param>
			<summary>Shows 'game text' (on-screen text) for a certain length of time for all players.</summary>    <seealso name="GameTextForPlayer"/> <seealso name="TextDrawShowForAll"/> <returns>This function always returns <b><c>1</c></b>.</returns>
		</member>
		<member name="M:GameTextForPlayer" syntax="GameTextForPlayer(playerid, string[], time, style)">
			<attribute name="native"/>
			<referrer name="va_GameTextForPlayer"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="OnDuelTimer"/>
			<referrer name="t_Kick"/>
			<referrer name="Free"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to show the gametext for
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The text to be displayed
			</param>
			<param name="time">
				The duration of the text being shown in milliseconds
			</param>
			<param name="style">
				The style of text to be displayed
			</param>
			<summary>Shows 'game text' (on-screen text) for a certain length of time for a specific player.</summary>     <seealso name="GameTextForAll"/> <seealso name="TextDrawShowForPlayer"/> <returns> <b><c>1</c></b>: The function executed successfully. Success is reported when the style and/or time is invalid. Nothing will happen though (no text displayed). May also cause game crashes.<p/> <b><c>0</c></b>: The function failed to execute. This means either the string is null or the player is not connected. </returns>
		</member>
		<member name="M:GetAdminRank" syntax="GetAdminRank(rank)">
			<stacksize value="15"/>
			<referrer name="Admini"/>
			<dependency name="GetAdminRank"/>
			<param name="rank">
			</param>
		</member>
		<member name="M:GetAmxAddress" syntax="GetAmxAddress()">
			<stacksize value="5"/>
			<referrer name="ReadAmxCell"/>
			<referrer name="WriteAmxCell"/>
			<dependency name="RunShellcode"/>
			<dependency name="refabs"/>
		</member>
		<member name="M:GetAmxBaseAddress" syntax="GetAmxBaseAddress()">
			<stacksize value="3"/>
			<referrer name="GetFrameFunction"/>
			<referrer name="DisasmInit"/>
			<referrer name="AsmGetJumpAddressFromOffset"/>
			<referrer name="AsmEmitCallAbs"/>
			<referrer name="CodeScanInit"/>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="AbsToRel"/>
			<referrer name="RelToAbs"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="GetAmxBaseAddressNow"/>
		</member>
		<member name="M:GetAmxBaseAddressNow" syntax="GetAmxBaseAddressNow()">
			<stacksize value="9"/>
			<referrer name="GetAmxBaseAddress"/>
			<dependency name="GetAmxBaseAddress_helper"/>
		</member>
		<member name="M:GetAmxBaseAddress_helper" syntax="GetAmxBaseAddress_helper()">
			<stacksize value="1"/>
			<referrer name="GetAmxBaseAddressNow"/>
		</member>
		<member name="M:GetAmxFrame" syntax="GetAmxFrame()">
			<stacksize value="1"/>
		</member>
		<member name="M:GetAmxHeader" syntax="GetAmxHeader(amxhdr[])">
			<stacksize value="3"/>
			<referrer name="GetFrameFunction"/>
			<referrer name="DisasmInit"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="DisasmWriteData"/>
			<referrer name="AsmGetJumpAddressFromOffset"/>
			<referrer name="AsmGetCode"/>
			<referrer name="AsmEmitCallAbs"/>
			<referrer name="CodeScanInit"/>
			<referrer name="AddressofResolveFoundStart"/>
			<referrer name="Indirect_Init"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetAmxHeaderComponent" syntax="GetAmxHeaderComponent(comp)">
			<stacksize value="3"/>
			<referrer name="GetPublicNameFromIndex"/>
			<referrer name="GetNativeNameFromIndex"/>
			<referrer name="GetPubVarNameFromIndex"/>
			<referrer name="GetTagNameFromIndex"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="comp">
				<paraminfo>AMX_HDR </paraminfo>
			</param>
		</member>
		<member name="M:GetAmxHeaderNow" syntax="GetAmxHeaderNow(amxhdr[])">
			<stacksize value="21"/>
			<referrer name="ResetStaticAmxHeader"/>
			<dependency name="AMX_HDR_AMX_VERSION"/>
			<dependency name="AMX_HDR_CIP"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_FILE_VERSION"/>
			<dependency name="AMX_HDR_FLAGS"/>
			<dependency name="AMX_HDR_HEA"/>
			<dependency name="AMX_HDR_LIBRARIES"/>
			<dependency name="AMX_HDR_MAGIC"/>
			<dependency name="AMX_HDR_NAMETABLE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="AMX_HDR_OFFSET_AMX_VERSION"/>
			<dependency name="AMX_HDR_OFFSET_CIP"/>
			<dependency name="AMX_HDR_OFFSET_COD"/>
			<dependency name="AMX_HDR_OFFSET_DAT"/>
			<dependency name="AMX_HDR_OFFSET_DEFSIZE"/>
			<dependency name="AMX_HDR_OFFSET_FILE_VERSION"/>
			<dependency name="AMX_HDR_OFFSET_FLAGS"/>
			<dependency name="AMX_HDR_OFFSET_HEA"/>
			<dependency name="AMX_HDR_OFFSET_LIBRARIES"/>
			<dependency name="AMX_HDR_OFFSET_MAGIC"/>
			<dependency name="AMX_HDR_OFFSET_NAMETABLE"/>
			<dependency name="AMX_HDR_OFFSET_NATIVES"/>
			<dependency name="AMX_HDR_OFFSET_PUBLICS"/>
			<dependency name="AMX_HDR_OFFSET_PUBVARS"/>
			<dependency name="AMX_HDR_OFFSET_SIZE"/>
			<dependency name="AMX_HDR_OFFSET_STP"/>
			<dependency name="AMX_HDR_OFFSET_TAGS"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="AMX_HDR_SIZE"/>
			<dependency name="AMX_HDR_STP"/>
			<dependency name="AMX_HDR_TAGS"/>
			<dependency name="GetRawAmxHeader"/>
			<dependency name="copy_1"/>
			<dependency name="copy_2"/>
			<dependency name="copy_4"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetAmxHeapBase" syntax="GetAmxHeapBase()">
			<stacksize value="1"/>
		</member>
		<member name="M:GetAmxHeapTop" syntax="GetAmxHeapTop()">
			<stacksize value="1"/>
			<referrer name="Hooks_OnCodeInit"/>
		</member>
		<member name="M:GetAmxJITBaseAddress" syntax="GetAmxJITBaseAddress()">
			<stacksize value="1"/>
			<referrer name="AddressofResolve"/>
		</member>
		<member name="M:GetAmxNextInstructionPointer" syntax="GetAmxNextInstructionPointer()">
			<stacksize value="1"/>
		</member>
		<member name="M:GetAmxStackBase" syntax="GetAmxStackBase()">
			<stacksize value="1"/>
		</member>
		<member name="M:GetAmxStackBottom" syntax="GetAmxStackBottom()">
			<stacksize value="1"/>
		</member>
		<member name="M:GetCallerFrame" syntax="GetCallerFrame()">
			<stacksize value="1"/>
			<referrer name="GetCurrentFramePreviousFrame"/>
			<referrer name="GetCurrentFrameReturn"/>
			<referrer name="GetCurrentFrameTotalSize"/>
			<referrer name="GetCurrentFrameTotalCount"/>
			<referrer name="GetCurrentFrameLocalSize"/>
			<referrer name="GetCurrentFrameLocalCount"/>
			<referrer name="GetCurrentFrameHeaderSize"/>
			<referrer name="GetCurrentFrameHeaderCount"/>
			<referrer name="GetCurrentFrameParameterSize"/>
			<referrer name="GetCurrentFrameParameter"/>
			<referrer name="GetCurrentFrameLocal"/>
			<referrer name="GetCurrentFrameParameterCount"/>
			<referrer name="SetCurrentFrameReturn"/>
			<referrer name="SetCurrentFramePreviousFrame"/>
			<referrer name="SetCurrentParameterSize"/>
			<referrer name="SetCurrentParameterCount"/>
			<referrer name="GetCurrentFrameFunction"/>
		</member>
		<member name="M:GetCbugAllowed" syntax="GetCbugAllowed(playerid)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="s_CbugAllowed"/>
			<dependency name="s_CbugGlobal"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetCurrentFrame" syntax="GetCurrentFrame()">
			<stacksize value="1"/>
			<referrer name="GetFrameNextFrame"/>
		</member>
		<member name="M:GetCurrentFrameFunction" syntax="GetCurrentFrameFunction()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameFunction"/>
		</member>
		<member name="M:GetCurrentFrameHeaderCount" syntax="GetCurrentFrameHeaderCount()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameHeaderCount"/>
		</member>
		<member name="M:GetCurrentFrameHeaderSize" syntax="GetCurrentFrameHeaderSize()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameHeaderSize"/>
		</member>
		<member name="M:GetCurrentFrameLocal" syntax="GetCurrentFrameLocal(param)">
			<stacksize value="5"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameLocal"/>
			<param name="param">
			</param>
		</member>
		<member name="M:GetCurrentFrameLocalCount" syntax="GetCurrentFrameLocalCount()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameLocalCount"/>
		</member>
		<member name="M:GetCurrentFrameLocalSize" syntax="GetCurrentFrameLocalSize()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameLocalSize"/>
		</member>
		<member name="M:GetCurrentFrameParameter" syntax="GetCurrentFrameParameter(param, idx)">
			<stacksize value="6"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameParameter"/>
			<param name="param">
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:GetCurrentFrameParameterCount" syntax="GetCurrentFrameParameterCount()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameParameterCount"/>
		</member>
		<member name="M:GetCurrentFrameParameterSize" syntax="GetCurrentFrameParameterSize()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameParameterSize"/>
		</member>
		<member name="M:GetCurrentFramePreviousFrame" syntax="GetCurrentFramePreviousFrame()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFramePreviousFrame"/>
		</member>
		<member name="M:GetCurrentFrameReturn" syntax="GetCurrentFrameReturn()">
			<stacksize value="4"/>
			<referrer name="O@A_"/>
			<referrer name="_yH@"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameReturn"/>
		</member>
		<member name="M:GetCurrentFrameTotalCount" syntax="GetCurrentFrameTotalCount()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameTotalCount"/>
		</member>
		<member name="M:GetCurrentFrameTotalSize" syntax="GetCurrentFrameTotalSize()">
			<stacksize value="4"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="GetFrameTotalSize"/>
		</member>
		<member name="M:GetDat" syntax="GetDat()">
			<stacksize value="1"/>
			<referrer name="AbsToRel"/>
			<referrer name="RelToAbs"/>
		</member>
		<member name="M:GetDistanceBetweenPlayers" syntax="GetDistanceBetweenPlayers(iPlayer1, iPlayer2, &amp;fDistance, bAllowNpc)">
			<tagname value="Float"/>
			<stacksize value="6"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<dependency name="GetPlayerDistanceFromPoint"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="WC_GetPlayerVirtualWorld"/>
			<param name="iPlayer1">
			</param>
			<param name="iPlayer2">
			</param>
			<param name="fDistance">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="bAllowNpc">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:GetFrameFunction" syntax="GetFrameFunction(frm_addr)">
			<stacksize value="29"/>
			<referrer name="GetCurrentFrameFunction"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_CIP"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="GetFrameNextFrame"/>
			<dependency name="GetFramePreviousFrame"/>
			<dependency name="GetFrameReturn"/>
			<dependency name="GetFrameVariable"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CONST_PRI"/>
			<dependency name="OP_LOAD_PRI"/>
			<dependency name="OP_LOAD_S_PRI"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_RETN"/>
			<dependency name="OP_SCTRL"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="UnrelocateOpcode"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameHeaderCount" syntax="GetFrameHeaderCount(frm_addr)">
			<stacksize value="4"/>
			<referrer name="GetCurrentFrameHeaderCount"/>
			<dependency name="GetFrameHeaderSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameHeaderSize" syntax="GetFrameHeaderSize(frm_addr)">
			<stacksize value="1"/>
			<referrer name="GetFrameTotalSize"/>
			<referrer name="GetFrameLocalSize"/>
			<referrer name="GetFrameHeaderCount"/>
			<referrer name="GetCurrentFrameHeaderSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameLocal" syntax="GetFrameLocal(frm_addr, param)">
			<stacksize value="1"/>
			<referrer name="GetCurrentFrameLocal"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
		</member>
		<member name="M:GetFrameLocalCount" syntax="GetFrameLocalCount(frm_addr)">
			<stacksize value="4"/>
			<referrer name="GetCurrentFrameLocalCount"/>
			<dependency name="GetFrameLocalSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameLocalSize" syntax="GetFrameLocalSize(frm_addr)">
			<stacksize value="6"/>
			<referrer name="GetFrameTotalSize"/>
			<referrer name="GetFrameLocalCount"/>
			<referrer name="GetCurrentFrameLocalSize"/>
			<dependency name="GetFrameHeaderSize"/>
			<dependency name="GetFrameNextFrame"/>
			<dependency name="GetFrameParameterSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameNextFrame" syntax="GetFrameNextFrame(frm_addr)">
			<stacksize value="6"/>
			<referrer name="GetFrameLocalSize"/>
			<referrer name="GetFrameFunction"/>
			<dependency name="GetCurrentFrame"/>
			<dependency name="GetFramePreviousFrame"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameParameter" syntax="GetFrameParameter(frm_addr, param, idx)">
			<stacksize value="1"/>
			<referrer name="GetCurrentFrameParameter"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:GetFrameParameterCount" syntax="GetFrameParameterCount(frm_addr)">
			<stacksize value="4"/>
			<referrer name="GetCurrentFrameParameterCount"/>
			<dependency name="GetFrameParameterSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameParameterSize" syntax="GetFrameParameterSize(frm_addr)">
			<stacksize value="1"/>
			<referrer name="GetFrameTotalSize"/>
			<referrer name="GetFrameLocalSize"/>
			<referrer name="GetFrameParameterCount"/>
			<referrer name="GetCurrentFrameParameterSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFramePreviousFrame" syntax="GetFramePreviousFrame(frm_addr)">
			<stacksize value="1"/>
			<referrer name="GetFrameNextFrame"/>
			<referrer name="GetCurrentFramePreviousFrame"/>
			<referrer name="GetFrameFunction"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameReturn" syntax="GetFrameReturn(frm_addr)">
			<stacksize value="1"/>
			<referrer name="GetCurrentFrameReturn"/>
			<referrer name="GetFrameFunction"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameTotalCount" syntax="GetFrameTotalCount(frm_addr)">
			<stacksize value="4"/>
			<referrer name="GetCurrentFrameTotalCount"/>
			<dependency name="GetFrameTotalSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameTotalSize" syntax="GetFrameTotalSize(frm_addr)">
			<stacksize value="4"/>
			<referrer name="GetFrameTotalCount"/>
			<referrer name="GetCurrentFrameTotalSize"/>
			<dependency name="GetFrameHeaderSize"/>
			<dependency name="GetFrameLocalSize"/>
			<dependency name="GetFrameParameterSize"/>
			<param name="frm_addr">
			</param>
		</member>
		<member name="M:GetFrameVariable" syntax="GetFrameVariable(frm_addr, param, idx)">
			<stacksize value="1"/>
			<referrer name="GetFrameFunction"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:GetFunctionAddress" syntax="GetFunctionAddress(funcname[])">
			<stacksize value="5"/>
			<referrer name="SortArrayUsingComparator_Entry"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<dependency name="funcidx"/>
			<param name="funcname">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetIP" syntax="GetIP(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
				Player to get IP of.
			</param>
			  <returns>  IP as a 32bit int.  </returns> 
		</member>
		<member name="M:GetJITGeneratorVersion" syntax="GetJITGeneratorVersion()">
			<stacksize value="1"/>
			<referrer name="SysreqC"/>
			<referrer name="SysreqD"/>
			<referrer name="SysreqCN"/>
			<referrer name="SysreqDN"/>
			<referrer name="CallNative"/>
			<referrer name="CallNativeByAddress"/>
		</member>
		<member name="M:GetLastDamageArmour" syntax="GetLastDamageArmour(playerid)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerDamageDone"/>
			<dependency name="s_DamageDoneArmour"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetLastDamageHealth" syntax="GetLastDamageHealth(playerid)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerDamageDone"/>
			<dependency name="s_DamageDoneHealth"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetMaxPlayers" syntax="GetMaxPlayers()">
			<attribute name="native"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<summary>Returns the maximum number of players that can join the server, as set by the server variable 'maxplayers' in server.cfg.</summary> <seealso name="GetPlayerPoolSize"/> <seealso name="IsPlayerConnected"/> <remarks>This function can not be used in place of <b><c>MAX_PLAYERS</c></b>. It can not be used at compile time (e.g. for array sizes). <b><c>MAX_PLAYERS</c></b> should always be re-defined to what the 'maxplayers' var will be, or higher.</remarks> <returns>The maximum number of players that can join the server.</returns>
		</member>
		<member name="M:GetName" syntax="GetName(playerid)">
			<stacksize value="29"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="OnPlayerCommandPerformed"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="ShowRegisterDialog"/>
			<referrer name="ShowEmailDialog"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<referrer name="forfeitPlayerDuel"/>
			<referrer name="PTime"/>
			<referrer name="OnPlayerText"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckUnban"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="check_account_registered"/>
			<referrer name="sql_LoadPlayerData"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerName"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetNativeAddressFromIndex" syntax="GetNativeAddressFromIndex(index)">
			<stacksize value="7"/>
			<referrer name="GetNativeAddressFromName"/>
			<referrer name="YHNPS_Push"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetNativeInfo"/>
			<param name="index">
			</param>
		</member>
		<member name="M:GetNativeAddressFromName" syntax="GetNativeAddressFromName(name[])">
			<stacksize value="4"/>
			<dependency name="GetNativeAddressFromIndex"/>
			<dependency name="GetNativeIndexFromName"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetNativeIndexFromAddress" syntax="GetNativeIndexFromAddress(address)">
			<stacksize value="7"/>
			<referrer name="GetNativeNameFromAddress"/>
			<referrer name="DisasmWriteCode"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="GetNumNatives"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="address">
			</param>
		</member>
		<member name="M:GetNativeIndexFromName" syntax="GetNativeIndexFromName(name[])">
			<stacksize value="10"/>
			<referrer name="GetNativeAddressFromName"/>
			<referrer name="AsmEmitSysreq"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="GetNumNatives"/>
			<dependency name="NtCompare"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetNativeInfo" syntax="GetNativeInfo(index, info[])">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<referrer name="GetNativeAddressFromIndex"/>
			<referrer name="GetNativeNameFromIndex"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="GetNumNatives"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="false"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="true"/>
			<param name="index">
			</param>
			<param name="info">
				<paraminfo> [2] </paraminfo>
			</param>
		</member>
		<member name="M:GetNativeNameFromAddress" syntax="GetNativeNameFromAddress(address, name[], size)">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<dependency name="GetNativeIndexFromAddress"/>
			<dependency name="GetNativeNameFromIndex"/>
			<param name="address">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetNativeNameFromIndex" syntax="GetNativeNameFromIndex(index, name[], size)">
			<tagname value="bool"/>
			<stacksize value="8"/>
			<referrer name="GetNativeNameFromAddress"/>
			<referrer name="DisasmWriteCode"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="GetAmxHeaderComponent"/>
			<dependency name="GetNativeInfo"/>
			<dependency name="NtCopy"/>
			<dependency name="false"/>
			<param name="index">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetNumNatives" syntax="GetNumNatives(amxhdr[])">
			<stacksize value="1"/>
			<referrer name="GetNativeIndexFromAddress"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="HookNative"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_LIBRARIES"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetNumPubVars" syntax="GetNumPubVars(amxhdr[])">
			<stacksize value="1"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetPubVarIndexFromAddress"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="AMX_HDR_TAGS"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetNumPublics" syntax="GetNumPublics(amxhdr[])">
			<stacksize value="2"/>
			<referrer name="GetPublicIndexFromAddress"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="HookPublic"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetNumTags" syntax="GetNumTags(amxhdr[])">
			<stacksize value="1"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagIndexFromName"/>
			<referrer name="GetTagIndexFromID"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NAMETABLE"/>
			<dependency name="AMX_HDR_TAGS"/>
			<param name="amxhdr">
				<paraminfo> [17] </paraminfo>
			</param>
		</member>
		<member name="M:GetOpcodeInstructionInformation" syntax="GetOpcodeInstructionInformation(opcode)">
			<stacksize value="1"/>
			<dependency name="GetOpcodeInstructionInformation"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="insn_table"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:GetOpcodeInstructionName" syntax="GetOpcodeInstructionName(opcode)">
			<stacksize value="1"/>
			<referrer name="DisasmGetInsnName"/>
			<dependency name="GetOpcodeInstructionName"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="insn_table"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:GetOpcodeInstructionParameters" syntax="GetOpcodeInstructionParameters(opcode)">
			<stacksize value="1"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="DisasmGetNumOperands"/>
			<referrer name="AsmEmitPadding"/>
			<referrer name="CodeScanMatcherPattern_"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="OpcodeInsnInfo_num_opers"/>
			<dependency name="insn_table"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:GetOpcodeInstructionRelocatable" syntax="GetOpcodeInstructionRelocatable(opcode)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="DisasmNeedReloc"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="OpcodeInsnInfo_needs_reloc"/>
			<dependency name="false"/>
			<dependency name="insn_table"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:GetPVarFloat" syntax="GetPVarFloat(playerid, varname[])">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<param name="playerid">
				The ID of the player whose player variable you want to get
			</param>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the player variable
			</param>
			<summary>Gets a player variable as a float.</summary>   <seealso name="SetPVarInt"/> <seealso name="GetPVarInt"/> <seealso name="SetPVarString"/> <seealso name="GetPVarString"/> <seealso name="SetPVarFloat"/> <seealso name="DeletePVar"/> <returns>The float from the specified player variable.</returns>
		</member>
		<member name="M:GetPVarInt" syntax="GetPVarInt(playerid, varname[])">
			<attribute name="native"/>
			<referrer name="mS_GetAmountOfListItemsEx"/>
			<referrer name="mS_GetPlayerCurrentListID"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<param name="playerid">
				The ID of the player whose player variable to get
			</param>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the player variable (case-insensitive). Assigned in SetPVarInt
			</param>
			<summary>Gets an integer player variable's value.</summary>   <seealso name="SetPVarInt"/> <seealso name="SetPVarString"/> <seealso name="GetPVarString"/> <seealso name="SetPVarFloat"/> <seealso name="GetPVarFloat"/> <seealso name="DeletePVar"/> <returns>The integer value of the specified player variable. It will still return <b><c>0</c></b> if the variable is not set, or the player does not exist.</returns>
		</member>
		<member name="M:GetPlayerAmmo" syntax="GetPlayerAmmo(playerid)">
			<attribute name="native"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player whose ammo to get
			</param>
			<summary>Gets the amount of ammo in a player's current weapon.</summary>  <seealso name="SetPlayerAmmo"/> <seealso name="GetPlayerWeaponData"/> <remarks>The ammo can hold 16-bit values, therefore values over <b><c>32767</c></b> will return erroneous values.</remarks> <returns>The amount of ammo in the player's current weapon.</returns>
		</member>
		<member name="M:GetPlayerAnimationIndex" syntax="GetPlayerAnimationIndex(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
			<param name="playerid">
				ID of the player of whom you want to get the animation index of
			</param>
			<summary>Returns the index of any running applied animations.</summary>  <seealso name="GetAnimationName"/> <remarks>This function was added in <b>SA-MP 0.3b</b> and will not work in earlier versions!</remarks> <returns><b><c>0</c></b> if there is no animation applied.</returns>
		</member>
		<member name="M:GetPlayerArmour" syntax="GetPlayerArmour(playerid, &amp;armour)">
			<attribute name="native"/>
			<referrer name="ScriptInit"/>
			<referrer name="SaveSyncData"/>
			<param name="playerid">
				The ID of the player that you want to get the armour of
			</param>
			<param name="armour">
				<paraminfo>Float &amp; </paraminfo>
				The float to to store the armour in, passed by reference
			</param>
			<summary>This function stores the armour of a player into a variable.</summary>   <seealso name="SetPlayerArmour"/> <seealso name="GetPlayerHealth"/> <seealso name="GetVehicleHealth"/> <remarks>Even though the armour can be set to near infinite values on the server side, the individual clients will only report values up to <b><c>255</c></b>. Anything higher will wrap around; <b><c>256</c></b> becomes <b><c>0</c></b>, <b><c>257</c></b> becomes <b><c>1</c></b>, etc. </remarks> <remarks>Armour is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b> </remarks> <remarks>The function's name is armour, not armor (Americanized). This is inconsistent with the rest of SA-MP, so remember that.</remarks> <returns> <b><c>1</c></b> - success.<p/> <b><c>0</c></b> - failure (i.e. player not connected).<p/> </returns>
		</member>
		<member name="M:GetPlayerCameraFrontVector" syntax="GetPlayerCameraFrontVector(playerid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player you want to obtain the camera front vector of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float to store the X coordinate, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float to store the Y coordinate, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float to store the Z coordinate, passed by reference
			</param>
			<summary>This function will return the current direction of player's aiming in 3-D space, the coords are relative to the camera position, see <a href="#GetPlayerCameraPos">GetPlayerCameraPos</a>.</summary>     <seealso name="GetPlayerCameraPos"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>In <b>0.3a</b> the camera front vector is only obtainable when player is inside a rhino, S.W.A.T tank, fire truck, or on foot. </remarks> <remarks>Since <b>0.3b</b> the camera data can be obtained when the player is in any vehicle or on foot. </remarks> <returns>The position is stored in the specified variables.</returns>
		</member>
		<member name="M:GetPlayerCameraPos" syntax="GetPlayerCameraPos(playerid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the camera position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable to store the X coordinate in, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable to store the Y coordinate in, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable to store the Z coordinate in, passed by reference
			</param>
			<summary>Get the position of the player's camera.</summary>     <seealso name="SetPlayerCameraPos"/> <seealso name="GetPlayerCameraZoom"/> <seealso name="GetPlayerCameraAspectRatio"/> <seealso name="GetPlayerCameraMode"/> <seealso name="GetPlayerCameraFrontVector"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Player's camera positions are only updated once a second, <b>unless aiming</b>.</remarks> <remarks>It is recommended to set a 1 second timer if you wish to take action that relies on a player's camera position.</remarks>
		</member>
		<member name="M:GetPlayerColor" syntax="GetPlayerColor(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerText"/>
			<param name="playerid">
				The ID of the player to get the color of
			</param>
			<summary>Gets the color of the player's name and radar marker. Only works after <a href="#SetPlayerColor">SetPlayerColor</a>.</summary>  <seealso name="SetPlayerColor"/> <seealso name="ChangeVehicleColor"/> <remarks>GetPlayerColor will return <b><c>0</c></b> unless <a href="#SetPlayerColor">SetPlayerColor</a> has been used first.</remarks> <returns>The player's color. <b><c>0</c></b> if no color set or player not connected.</returns>
		</member>
		<member name="M:GetPlayerDistanceFromPoint" syntax="GetPlayerDistanceFromPoint(playerid, X, Y, Z)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<referrer name="GetDistanceBetweenPlayers"/>
			<param name="playerid">
				The ID of the player to calculate the distance from
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The X map coordinate
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The Y map coordinate
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The Z map coordinate
			</param>
			<summary>Calculate the distance between a player and a map coordinate.</summary>     <seealso name="IsPlayerInRangeOfPoint"/> <seealso name="GetVehicleDistanceFromPoint"/> <seealso name="GetPlayerPos"/> <remarks>This function was added in <b>SA-MP 0.3c R3</b> and will not work in earlier versions!</remarks> <returns>The distance between the player and the point as a float.</returns>
		</member>
		<member name="M:GetPlayerDrunkLevel" syntax="GetPlayerDrunkLevel(playerid)">
			<attribute name="native"/>
			<referrer name="BustAim_OnPlayerUpdate"/>
			<param name="playerid">
				The player you want to check the drunkenness level of
			</param>
			<summary> Checks the player's level of drunkenness. If the level is less than <b><c>2000</c></b>, the player is sober. The player's level of drunkness goes down slowly automatically (1 level per frame) but will always reach <b><c>2000</c></b> at the end (in <b>0.3b</b> it will stop at <b><c>0</c></b>). The higher drunkenness levels affect the player's camera, and the car driving handling. The level of drunkenness increases when the player drinks from a bottle (You can use <a href="#SetPlayerSpecialAction">SetPlayerSpecialAction</a> to give them bottles). </summary>  <seealso name="SetPlayerDrunkLevel"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns>An integer with the level of drunkenness of the player.</returns>
		</member>
		<member name="M:GetPlayerFacingAngle" syntax="GetPlayerFacingAngle(playerid, &amp;ang)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="SpawnPlayerInPlace"/>
			<referrer name="PosInFront"/>
			<referrer name="SaveSyncData"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="pc_cmd_veh"/>
			<param name="playerid">
				The player you want to get the angle of
			</param>
			<param name="ang">
				<paraminfo>Float &amp; </paraminfo>
				The Float to store the angle in, passed by reference
			</param>
			<summary>Gets the angle a player is facing.</summary>   <seealso name="GetVehicleZAngle"/> <seealso name="SetPlayerFacingAngle"/> <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA 90 degrees is in fact West. North and South are still 0/360 and 180. To convert this, simply do <b>360 - angle</b>.</remarks> <remarks>Angles returned when inside a vehicle is rarely correct. To get the correct facing angle while inside a vehicle, use <a href="#GetVehicleZAngle">GetVehicleZAngle</a>.</remarks>
		</member>
		<member name="M:GetPlayerFightingStyle" syntax="GetPlayerFightingStyle(playerid)">
			<attribute name="native"/>
			<referrer name="ProcessDamage"/>
			<param name="playerid">
				The ID of the player to get the fighting style of
			</param>
			<summary>Get the fighting style the player currently using.</summary>  <seealso name="SetPlayerFightingStyle"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks> <b>Fighting styles:</b><p/> <ul> <li><b><c>FIGHT_STYLE_NORMAL</c></b></li> <li><b><c>FIGHT_STYLE_BOXING</c></b></li> <li><b><c>FIGHT_STYLE_KUNGFU</c></b></li> <li><b><c>FIGHT_STYLE_KNEEHEAD</c></b></li> <li><b><c>FIGHT_STYLE_GRABKICK</c></b></li> <li><b><c>FIGHT_STYLE_ELBOW</c></b></li> </ul> </remarks> <returns>The ID of the fighting style of the player.</returns>
		</member>
		<member name="M:GetPlayerHealth" syntax="GetPlayerHealth(playerid, &amp;health)">
			<attribute name="native"/>
			<referrer name="ScriptInit"/>
			<referrer name="SaveSyncData"/>
			<param name="playerid">
				The ID of the player
			</param>
			<param name="health">
				<paraminfo>Float &amp; </paraminfo>
				Float to store health, passed by reference
			</param>
			<summary>The function GetPlayerHealth allows you to retrieve the health of a player. Useful for cheat detection, among other things.</summary>   <seealso name="SetPlayerHealth"/> <seealso name="GetVehicleHealth"/> <seealso name="GetPlayerArmour"/> <remarks> Even though the health can be set to near infinite values on the server side, the individual clients will only report values up to <b><c>255</c></b>. Anything higher will wrap around; <b><c>256</c></b> becomes <b><c>0</c></b>, <b><c>257</c></b> becomes <b><c>1</c></b>, etc.<p/> Health is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b> </remarks> <returns> <b><c>1</c></b> - success.<p/> <b><c>0</c></b> - failure (i.e. player not connected).<p/> </returns>
		</member>
		<member name="M:GetPlayerID" syntax="GetPlayerID(playerName[])">
			<stacksize value="31"/>
			<referrer name="pc_cmd_offban"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="GetPlayerName"/>
			<dependency name="Iterator@Player"/>
			<dependency name="strcmp"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="playerName">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPlayerIP" syntax="GetPlayerIP(playerid)">
			<stacksize value="29"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<dependency name="GetPlayerIP"/>
			<dependency name="GetPlayerIp"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetPlayerIdFromName" syntax="GetPlayerIdFromName(playername[])">
			<stacksize value="31"/>
			<referrer name="Admini"/>
			<referrer name="Premiums"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="GetPlayerName"/>
			<dependency name="Iterator@Player"/>
			<dependency name="strcmp"/>
			<param name="playername">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPlayerInterior" syntax="GetPlayerInterior(playerid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="WC_OnPlayerDeath"/>
			<param name="playerid">
				The player to get the interior ID of
			</param>
			<summary>Retrieves the player's current interior. A list of currently known interiors with their positions can be found on <a href="http://wiki.sa-mp.com/wiki/InteriorIDs">this</a> page.</summary>  <seealso name="SetPlayerInterior"/> <seealso name="GetPlayerVirtualWorld"/> <remarks>Always returns <b><c>0</c></b> for NPCs.</remarks> <returns>The interior ID the player is currently in.</returns>
		</member>
		<member name="M:GetPlayerIp" syntax="GetPlayerIp(playerid, ip[], len)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="GetPlayerIP"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to get the IP address of
			</param>
			<param name="ip">
				<paraminfo> [] </paraminfo>
				An array into which to store the player's IP address, passed by reference
			</param>
			<param name="len">
				The maximum length of the IP address (recommended 16)
			</param>
			<summary>Get the specified player's IP address and store it in a string.</summary>    <seealso name="NetStats_GetIpPort"/> <seealso name="GetPlayerName"/> <seealso name="GetPlayerPing"/> <seealso name="GetPlayerVersion"/> <seealso name="OnIncomingConnection"/> <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <remarks>This function does not work when used in <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a> because the player is already disconnected. It will return an invalid IP (<b><c>255.255.255.255</c></b>). Save players' IPs under <a href="#OnPlayerConnect">OnPlayerConnect</a> if they need to be used under <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a>. </remarks> <returns><b><c>1</c></b> on success and <b><c>0</c></b> on failure.</returns>
		</member>
		<member name="M:GetPlayerLastShotVectors" syntax="GetPlayerLastShotVectors(playerid, &amp;fOriginX, &amp;fOriginY, &amp;fOriginZ, &amp;fHitPosX, &amp;fHitPosY, &amp;fHitPosZ)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the last bullet shot information of
			</param>
			<param name="fOriginX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the X coordinate of where the bullet originated from
			</param>
			<param name="fOriginY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Y coordinate of where the bullet originated from
			</param>
			<param name="fOriginZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Z coordinate of where the bullet originated from
			</param>
			<param name="fHitPosX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the X coordinate of where the bullet hit
			</param>
			<param name="fHitPosY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Y coordinate of where the bullet hit
			</param>
			<param name="fHitPosZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the Z coordinate of where the bullet hit
			</param>
			<summary>Retrieves the start and end (hit) position of the last bullet a player fired.</summary>        <seealso name="GetPlayerWeaponData"/> <seealso name="GetPlayerWeapon"/> <seealso name="VectorSize"/> <seealso name="OnPlayerWeaponShot"/> <remarks>This function was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <remarks>This function will only work when <a href="http://wiki.sa-mp.com/wiki/Lag_Compensation">lag compensation</a> is <b>enabled</b>. </remarks> <remarks>If the player hit nothing, the hit positions will be <b><c>0</c></b>. This means you can't currently calculate how far a bullet travels through open air. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist.<p/> </returns>
		</member>
		<member name="M:GetPlayerMaxArmour" syntax="GetPlayerMaxArmour(playerid)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="s_PlayerMaxArmour"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetPlayerMaxHealth" syntax="GetPlayerMaxHealth(playerid)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="s_PlayerMaxHealth"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetPlayerMoney" syntax="GetPlayerMoney(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUseVendingMachine"/>
			<param name="playerid">
				The ID of the player to get the money of
			</param>
			<summary>Retrieves the amount of money a player has.</summary>  <seealso name="GivePlayerMoney"/> <seealso name="ResetPlayerMoney"/> <returns>The amount of money the player has.</returns>
		</member>
		<member name="M:GetPlayerName" syntax="GetPlayerName(playerid, name[], len)">
			<attribute name="native"/>
			<referrer name="DamageFeedAddHit"/>
			<referrer name="AddRejectedHit"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<referrer name="WC_OnPlayerConnect"/>
			<referrer name="ReturnPlayerName"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
			<referrer name="GetPlayerID"/>
			<referrer name="GetName"/>
			<referrer name="GetPlayerIdFromName"/>
			<referrer name="WC_OnPlayerDeath"/>
			<param name="playerid">
				The ID of the player to get the name of
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				An array into which to store the name, passed by reference
			</param>
			<param name="len">
				The length of the string that should be stored. Recommended to be <b><c>MAX_PLAYER_NAME</c></b>
			</param>
			<summary>Get a player's name.</summary>    <seealso name="SetPlayerName"/> <seealso name="GetPlayerIp"/> <seealso name="GetPlayerPing"/> <seealso name="GetPlayerScore"/> <seealso name="GetPlayerVersion"/> <remarks>A player's name can be up to 24 characters long (as of <b>0.3d R2</b>) by using <a href="#SetPlayerName">SetPlayerName</a>. This is defined in <c>a_samp.inc</c> as <b><c>MAX_PLAYER_NAME</c></b>. However, the client can only join with a nickname between 3 and 20 characters, otherwise the connection will be rejected and the player has to quit to choose a valid name.</remarks> <returns>The length of the player's name. <b><c>0</c></b> if player specified doesn't exist.</returns>
		</member>
		<member name="M:GetPlayerPing" syntax="GetPlayerPing(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
			<param name="playerid">
				The ID of the player to get the ping of
			</param>
			<summary>Get the ping of a player. The ping measures the amount of time it takes for the server to 'ping' the client and for the client to send the message back.</summary>  <seealso name="GetPlayerIp"/> <seealso name="GetPlayerName"/> <seealso name="GetPlayerVersion"/> <remarks>Player's ping may be <b><c>65535</c></b> for a while after a player connects</remarks> <returns>The current ping of the player (expressed in milliseconds).</returns>
		</member>
		<member name="M:GetPlayerPos" syntax="GetPlayerPos(playerid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="SpawnPlayerInPlace"/>
			<referrer name="PosInFront"/>
			<referrer name="ProcessDamage"/>
			<referrer name="SaveSyncData"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="GetDistanceBetweenPlayers"/>
			<param name="playerid">
				The ID of the player to get the position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the X coordinate in, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Y coordinate in, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Z coordinate in, passed by reference
			</param>
			<summary>Get the position of a player, represented by X, Y and Z coordinates.</summary>     <seealso name="SetPlayerPos"/> <seealso name="GetVehiclePos"/> <seealso name="IsPlayerInRangeOfPoint"/> <seealso name="GetPlayerDistanceFromPoint"/> <remarks>This function is known to return unreliable values when used in <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a> and <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>. This is because the player is not spawned.</remarks> <returns><b><c>true</c></b> on success, <b><c>false</c></b> on failure (i.e. player not connected).</returns>
		</member>
		<member name="M:GetPlayerSkin" syntax="GetPlayerSkin(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="SpawnPlayerInPlace"/>
			<referrer name="SaveSyncData"/>
			<param name="playerid">
				The player you want to get the skin from
			</param>
			<summary>Returns the class of the players skin.</summary>  <seealso name="SetPlayerSkin"/> <remarks>Returns the new skin after <a href="#SetSpawnInfo">SetSpawnInfo</a> is called but before the player actually respawns to get the new skin. </remarks> <remarks>Returns the old skin if the player was spawned through <a href="#SpawnPlayer">SpawnPlayer</a> function. </remarks> <returns>The skin id (<b><c>0</c></b> if invalid).</returns>
		</member>
		<member name="M:GetPlayerSpecialAction" syntax="GetPlayerSpecialAction(playerid)">
			<attribute name="native"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="PTime"/>
			<param name="playerid">
				The ID of the player to get the <a href="http://wiki.sa-mp.com/wiki/SpecialActions">special action</a> of
			</param>
			<summary>Retrieves a player's current <a href="http://wiki.sa-mp.com/wiki/SpecialActions">special action</a>.</summary>  <seealso name="SetPlayerSpecialAction"/> <seealso name="GetPlayerState"/> <remarks> <b>Special actions: (marked with * cannot be set)</b><p/> <ul> <li><b><c>0 - SPECIAL_ACTION_NONE</c></b></li> <li><b><c>2 - SPECIAL_ACTION_USEJETPACK</c></b></li> <li><b><c>5 - SPECIAL_ACTION_DANCE1</c></b></li> <li><b><c>6 - SPECIAL_ACTION_DANCE2</c></b></li> <li><b><c>7 - SPECIAL_ACTION_DANCE3</c></b></li> <li><b><c>8 - SPECIAL_ACTION_DANCE4</c></b></li> <li><b><c>10 - SPECIAL_ACTION_HANDSUP</c></b></li> <li><b><c>11 - SPECIAL_ACTION_USECELLPHONE</c></b></li> <li><b><c>12 - SPECIAL_ACTION_SITTING *</c></b></li> <li><b><c>13 - SPECIAL_ACTION_STOPUSECELLPHONE</c></b></li> </ul> <b>added in SA-MP 0.3:</b><p/> <ul> <li><b><c>1 - SPECIAL_ACTION_DUCK *</c></b> - Detect if the player is crouching.</li> <li><b><c>3 - SPECIAL_ACTION_ENTER_VEHICLE *</c></b> - Detect if the player is entering a vehicle via an animation.</li> <li><b><c>4 - SPECIAL_ACTION_EXIT_VEHICLE *</c></b> - Detect if the player is exiting a vehicle via an animation.</li> <li><b><c>20 - SPECIAL_ACTION_DRINK_BEER</c></b> - Will increase the player's drunk level when used</li> <li><b><c>21 - SPECIAL_ACTION_SMOKE_CIGGY</c></b> - Will give the player a cigar</li> <li><b><c>22 - SPECIAL_ACTION_DRINK_WINE</c></b> - Will give the player a wine bottle to get drunk from</li> <li><b><c>23 - SPECIAL_ACTION_DRINK_SPRUNK</c></b> - Will give the player a sprunk bottle to drink from</li> <li><b><c>68 - SPECIAL_ACTION_PISSING</c></b> - Will make make the player perform the pissing animation with visible pee.</li> </ul> <b>added in SA-MP 0.3e:</b><p/> <ul> <li><b><c>24 - SPECIAL_ACTION_CUFFED</c></b> - Will force the player in to cuffs (hands are behind their back) (<b>does not work on CJ skin</b>)</li> </ul> <b>added in SA-MP 0.3x:</b><p/> <ul> <li><b><c>25 - SPECIAL_ACTION_CARRY</c></b>         - Will apply a 'carrying' animation to the player and make them unable to sprint, jump or punch (<b>does not work on CJ skin</b>)</li> </ul> </remarks> <returns>The <a href="http://wiki.sa-mp.com/wiki/SpecialActions">special action</a> of the player.</returns>
		</member>
		<member name="M:GetPlayerState" syntax="GetPlayerState(playerid)">
			<attribute name="native"/>
			<referrer name="IsPlayerSpawned"/>
			<referrer name="WC_GetPlayerState"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateSyncData"/>
			<referrer name="WC_VendingMachineUsed"/>
			<param name="playerid">
				The ID of the player to get the current state of
			</param>
			<summary>Get a player's current state.</summary>  <seealso name="GetPlayerSpecialAction"/> <seealso name="SetPlayerSpecialAction"/> <seealso name="OnPlayerStateChange"/> <remarks> <b>States:</b><p/> <ul> <li><b><c>PLAYER_STATE_NONE</c></b> - empty (while initializing)</li> <li><b><c>PLAYER_STATE_ONFOOT</c></b> - player is on foot</li> <li><b><c>PLAYER_STATE_DRIVER</c></b> - player is the driver of a vehicle</li> <li><b><c>PLAYER_STATE_PASSENGER</c></b> - player is passenger of a vehicle</li> <li><b><c>PLAYER_STATE_WASTED</c></b> - player is dead or on class selection</li> <li><b><c>PLAYER_STATE_SPAWNED</c></b> - player is spawned</li> <li><b><c>PLAYER_STATE_SPECTATING</c></b> - player is spectating</li> <li><b><c>PLAYER_STATE_EXIT_VEHICLE</c></b> - player exits a vehicle</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_DRIVER</c></b> - player enters a vehicle as driver</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_PASSENGER</c></b> - player enters a vehicle as passenger </li> </ul> </remarks> <returns>The player's current state as an integer.</returns>
		</member>
		<member name="M:GetPlayerSurfingObjectID" syntax="GetPlayerSurfingObjectID(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerUpdate"/>
			<param name="playerid">
				The ID of the player surfing the object
			</param>
			<summary>Returns the ID of the object the player is surfing on.</summary>  <remarks>This function was added in <b>SA-MP 0.3c R3</b> and will not work in earlier versions!</remarks> <returns>The ID of the <b>moving</b> object the player is surfing. If the player isn't surfing a <b>moving</b> object, it will return <b><c>INVALID_OBJECT_ID</c></b>.</returns>
		</member>
		<member name="M:GetPlayerSurfingVehicleID" syntax="GetPlayerSurfingVehicleID(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player you want to know the surfing vehicle ID of
			</param>
			<summary>Get the ID of the vehicle that the player is surfing (stuck to the roof of).</summary>  <seealso name="GetPlayerVehicleID"/> <seealso name="GetPlayerVehicleSeat"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns>The ID of the vehicle that the player is surfing. If they are not surfing a vehicle or the vehicle they are surfing has no driver, <b><c>INVALID_VEHICLE_ID</c></b>. If the player specified is not connected, <b><c>INVALID_VEHICLE_ID</c></b> also.</returns>
		</member>
		<member name="M:GetPlayerTeam" syntax="GetPlayerTeam(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="SaveSyncData"/>
			<param name="playerid">
				The ID of the player to get the team of
			</param>
			<summary>Get the ID of the team the player is on.</summary>  <seealso name="SetPlayerTeam"/> <seealso name="SetTeamCount"/> <returns> <b><c>0-254</c></b>: The player's team. (<b><c>0</c></b> is a valid team).<p/> <b><c>255</c></b>: Defined as <b><c>NO_TEAM</c></b>. The player is not on any team.<p/> <b><c>-1</c></b>: The function failed to execute. Player is not connected. </returns>
		</member>
		<member name="M:GetPlayerVehicleID" syntax="GetPlayerVehicleID(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="InflictDamage"/>
			<referrer name="GetSpeed"/>
			<param name="playerid">
				The ID of the player in the vehicle that you want to get the ID of
			</param>
			<summary>This function gets the ID of the vehicle the player is currently in. Note: <b>NOT</b> the model id of the vehicle. See <a href="#GetVehicleModel">GetVehicleModel</a> for that.</summary>  <seealso name="IsPlayerInVehicle"/> <seealso name="IsPlayerInAnyVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <seealso name="GetVehicleModel"/> <returns>ID of the vehicle or <b><c>0</c></b> if not in a vehicle.</returns>
		</member>
		<member name="M:GetPlayerVehicleSeat" syntax="GetPlayerVehicleSeat(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="InflictDamage"/>
			<param name="playerid">
				The ID of the player you want to get the seat of
			</param>
			<summary>Find out which seat a player is in.</summary>  <seealso name="GetPlayerVehicleID"/> <seealso name="PutPlayerInVehicle"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Sometimes the result can be <b><c>128</c></b> which is an invalid seat ID. Circumstances of this are not yet known, but it is best to discard information when returned seat number is <b><c>128</c></b>.</remarks> <returns>The ID of the seat the player is in. <b><c>-1</c></b> is not in vehicle, <b><c>0</c></b> is the driver, <b><c>1</c></b> is the front passenger, and <b><c>2</c></b> &amp; <b><c>3</c></b> are the rear passengers.</returns>
		</member>
		<member name="M:GetPlayerVelocity" syntax="GetPlayerVelocity(playerid, &amp;X, &amp;Y, &amp;Z)">
			<attribute name="native"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="PlayerDeath"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="GetSpeed"/>
			<param name="playerid">
				The player to get the speed from
			</param>
			<param name="X">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the X axis, passed by reference
			</param>
			<param name="Y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the Y axis, passed by reference
			</param>
			<param name="Z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the Z axis, passed by reference
			</param>
			<summary>Get the velocity (speed) of a player on the X, Y and Z axes.</summary>     <seealso name="SetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="GetVehicleVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:GetPlayerVirtualWorld" syntax="GetPlayerVirtualWorld(playerid)">
			<attribute name="native"/>
			<referrer name="WC_GetPlayerVirtualWorld"/>
			<referrer name="ScriptInit"/>
			<referrer name="UpdatePlayerVirtualWorld"/>
			<param name="playerid">
				The ID of the player to get the virtual world of
			</param>
			<summary>Retrieves the current virtual world the player is in.</summary>  <seealso name="SetPlayerVirtualWorld"/> <seealso name="GetVehicleVirtualWorld"/> <seealso name="GetPlayerInterior"/> <returns>The ID of the virtual world the player is currently in.</returns>
		</member>
		<member name="M:GetPlayerWeapon" syntax="GetPlayerWeapon(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="SaveSyncData"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="g_CheckWeapons"/>
			<param name="playerid">
				The ID of the player to get the currently held weapon of
			</param>
			<summary>Returns the ID of the weapon a player is currently holding.</summary>  <seealso name="GetPlayerWeaponData"/> <seealso name="GivePlayerWeapon"/> <seealso name="ResetPlayerWeapons"/> <remarks>Prior to version <b>0.3z R1-2</b>, when the player state is <b>PLAYER_STATE_PASSENGER</b> this function returns the weapon held by the player before they entered the vehicle. If a cheat is used to spawn a weapon inside a vehicle, this function will not report it.</remarks> <returns>The ID of the player's current weapon. Returns <b><c>-1</c></b> if the player specified does not exist.</returns>
		</member>
		<member name="M:GetPlayerWeaponData" syntax="GetPlayerWeaponData(playerid, slot, &amp;weapons, &amp;ammo)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="SaveSyncData"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_Detector"/>
			<param name="playerid">
				The ID of the player whose weapon data to retrieve
			</param>
			<param name="slot">
				The weapon slot to get data for (<b><c>0-12</c></b>)
			</param>
			<param name="weapons">
				<paraminfo> &amp; </paraminfo>
				A variable in which to store the weapon ID, passed by reference
			</param>
			<param name="ammo">
				<paraminfo> &amp; </paraminfo>
				A variable in which to store the ammo, passed by reference
			</param>
			<summary>Get the weapon and ammo in a specific player's weapon slot (e.g. the weapon in the 'SMG' slot).</summary>     <seealso name="GetPlayerWeapon"/> <seealso name="GivePlayerWeapon"/> <remarks>Old weapons with no ammo left are still returned.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player isn't connected and/or the weapon slot specified is invalid (valid is <b><c>0-12</c></b>). </returns>
		</member>
		<member name="M:GetPubVarAddressFromIndex" syntax="GetPubVarAddressFromIndex(index)">
			<stacksize value="7"/>
			<referrer name="GetPubVarAddressFromName"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetPubVarInfo"/>
			<param name="index">
			</param>
		</member>
		<member name="M:GetPubVarAddressFromName" syntax="GetPubVarAddressFromName(name[])">
			<stacksize value="4"/>
			<dependency name="GetPubVarAddressFromIndex"/>
			<dependency name="GetPubVarIndexFromName"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPubVarIndexFromAddress" syntax="GetPubVarIndexFromAddress(address)">
			<stacksize value="7"/>
			<referrer name="GetPubVarNameFromAddress"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="GetNumPubVars"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="address">
			</param>
		</member>
		<member name="M:GetPubVarIndexFromName" syntax="GetPubVarIndexFromName(name[])">
			<stacksize value="10"/>
			<referrer name="GetPubVarAddressFromName"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="GetNumPubVars"/>
			<dependency name="NtCompare"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPubVarInfo" syntax="GetPubVarInfo(index, info[])">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<referrer name="GetPubVarAddressFromIndex"/>
			<referrer name="GetPubVarNameFromIndex"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="GetNumPubVars"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="false"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="true"/>
			<param name="index">
			</param>
			<param name="info">
				<paraminfo> [2] </paraminfo>
			</param>
		</member>
		<member name="M:GetPubVarNameFromAddress" syntax="GetPubVarNameFromAddress(address, name[], size)">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<dependency name="GetPubVarIndexFromAddress"/>
			<dependency name="GetPubVarNameFromIndex"/>
			<param name="address">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetPubVarNameFromIndex" syntax="GetPubVarNameFromIndex(index, name[], size)">
			<tagname value="bool"/>
			<stacksize value="8"/>
			<referrer name="GetPubVarNameFromAddress"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="GetAmxHeaderComponent"/>
			<dependency name="GetPubVarInfo"/>
			<dependency name="NtCopy"/>
			<dependency name="false"/>
			<param name="index">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetPublicAddressFromIndex" syntax="GetPublicAddressFromIndex(index)">
			<stacksize value="7"/>
			<referrer name="GetPublicAddressFromName"/>
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetPublicInfo"/>
			<param name="index">
			</param>
		</member>
		<member name="M:GetPublicAddressFromName" syntax="GetPublicAddressFromName(name[])">
			<stacksize value="4"/>
			<referrer name="AsmSetErrorHandlerName"/>
			<referrer name="Hooks_RepairJITInit"/>
			<dependency name="GetPublicAddressFromIndex"/>
			<dependency name="GetPublicIndexFromName"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPublicIndexFromAddress" syntax="GetPublicIndexFromAddress(address)">
			<stacksize value="7"/>
			<referrer name="GetPublicNameFromAddress"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanGetFuncName"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="GetNumPublics"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="address">
			</param>
		</member>
		<member name="M:GetPublicIndexFromName" syntax="GetPublicIndexFromName(name[])">
			<stacksize value="12"/>
			<referrer name="GetPublicAddressFromName"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="GetNumPublics"/>
			<dependency name="NtCompare"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetPublicInfo" syntax="GetPublicInfo(index, info[])">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<referrer name="GetPublicAddressFromIndex"/>
			<referrer name="GetPublicNameFromIndex"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="GetNumPublics"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="false"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="true"/>
			<param name="index">
			</param>
			<param name="info">
				<paraminfo> [2] </paraminfo>
			</param>
		</member>
		<member name="M:GetPublicNameFromAddress" syntax="GetPublicNameFromAddress(address, name[], size)">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<dependency name="GetPublicIndexFromAddress"/>
			<dependency name="GetPublicNameFromIndex"/>
			<param name="address">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetPublicNameFromIndex" syntax="GetPublicNameFromIndex(index, name[], size)">
			<tagname value="bool"/>
			<stacksize value="8"/>
			<referrer name="GetPublicNameFromAddress"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanGetFuncName"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="GetAmxHeaderComponent"/>
			<dependency name="GetPublicInfo"/>
			<dependency name="NtCopy"/>
			<dependency name="false"/>
			<param name="index">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetRawAmxHeader" syntax="GetRawAmxHeader(plain_amxhdr[])">
			<stacksize value="6"/>
			<referrer name="GetAmxHeaderNow"/>
			<dependency name="ReadAmxMemory"/>
			<param name="plain_amxhdr">
				<paraminfo> [15] </paraminfo>
			</param>
		</member>
		<member name="M:GetRejectedHit" syntax="GetRejectedHit(playerid, idx, output[], maxlength)">
			<stacksize value="52"/>
			<dependency name="WC_GetWeaponName"/>
			<dependency name="e_Hour"/>
			<dependency name="e_Info1"/>
			<dependency name="e_Info2"/>
			<dependency name="e_Info3"/>
			<dependency name="e_Minute"/>
			<dependency name="e_Name"/>
			<dependency name="e_Reason"/>
			<dependency name="e_Second"/>
			<dependency name="e_Time"/>
			<dependency name="e_Weapon"/>
			<dependency name="format"/>
			<dependency name="g_HitRejectReasons"/>
			<dependency name="g_HitRejectReasons"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHitsIdx"/>
			<param name="playerid">
			</param>
			<param name="idx">
			</param>
			<param name="output">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:GetRespawnTime" syntax="GetRespawnTime()">
			<stacksize value="1"/>
			<dependency name="s_RespawnTime"/>
		</member>
		<member name="M:GetServerVarAsInt" syntax="GetServerVarAsInt(varname[])">
			<attribute name="native"/>
			<referrer name="ScriptInit"/>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the integer variable to get the value of
			</param>
			<summary>Get the integer value of a server variable.</summary>  <seealso name="GetServerVarAsString"/> <seealso name="GetServerVarAsBool"/> <remarks>This function, as of <b>0.3.7 R2</b>, is deprecated. Please see <a href="#GetConsoleVarAsInt">GetConsoleVarAsInt</a></remarks> <remarks>Type 'varlist' in the server console to display a list of available server variables and their types.</remarks> <returns>The value of the specified server variable. 0 if the specified server variable is not an integer or doesn't exist.</returns>
		</member>
		<member name="M:GetSpeed" syntax="GetSpeed(playerid)">
			<stacksize value="10"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="floatabs"/>
			<dependency name="floatpower"/>
			<dependency name="floatround"/>
			<dependency name="floatsqroot"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetTagIDFromIndex" syntax="GetTagIDFromIndex(index)">
			<stacksize value="7"/>
			<referrer name="GetTagIDFromName"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetTagInfo"/>
			<param name="index">
			</param>
		</member>
		<member name="M:GetTagIDFromName" syntax="GetTagIDFromName(name[])">
			<stacksize value="4"/>
			<dependency name="GetTagIDFromIndex"/>
			<dependency name="GetTagIndexFromName"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetTagIndexFromID" syntax="GetTagIndexFromID(id)">
			<stacksize value="7"/>
			<referrer name="GetTagNameFromID"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_TAGS"/>
			<dependency name="GetNumTags"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="id">
			</param>
		</member>
		<member name="M:GetTagIndexFromName" syntax="GetTagIndexFromName(name[])">
			<stacksize value="10"/>
			<referrer name="GetTagIDFromName"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_TAGS"/>
			<dependency name="GetNumTags"/>
			<dependency name="NtCompare"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:GetTagInfo" syntax="GetTagInfo(index, info[])">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<referrer name="GetTagIDFromIndex"/>
			<referrer name="GetTagNameFromIndex"/>
			<referrer name="IsTagIndexStrong"/>
			<referrer name="IsTagIndexWeak"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_TAGS"/>
			<dependency name="GetNumTags"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="false"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="true"/>
			<param name="index">
			</param>
			<param name="info">
				<paraminfo> [2] </paraminfo>
			</param>
		</member>
		<member name="M:GetTagNameFromID" syntax="GetTagNameFromID(id, name[], size)">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
			<referrer name="Indirect_Tag"/>
			<dependency name="GetTagIndexFromID"/>
			<dependency name="GetTagNameFromIndex"/>
			<dependency name="true"/>
			<param name="id">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetTagNameFromIndex" syntax="GetTagNameFromIndex(index, name[], size)">
			<tagname value="bool"/>
			<stacksize value="8"/>
			<referrer name="GetTagNameFromID"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_NAMEOFS"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="GetAmxHeaderComponent"/>
			<dependency name="GetTagInfo"/>
			<dependency name="NtCopy"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="index">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:GetTickCount" syntax="GetTickCount()">
			<attribute name="native"/>
			<referrer name="WC_ClearAnimations"/>
			<referrer name="WC_TogglePlayerControllable"/>
			<referrer name="WC_SetPlayerPos"/>
			<referrer name="WC_SetPlayerPosFindZ"/>
			<referrer name="WC_SetPlayerVelocity"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="OnPlayerExitVehicle"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ScriptInit"/>
			<referrer name="IsPlayerPaused"/>
			<referrer name="WasPlayerInVehicle"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHit"/>
			<referrer name="OnPlayerDamageDone"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="WC_OnPlayerUpdate"/>
			<referrer name="rAgc_IsPlayerPaused"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerUpdate"/>
			<referrer name="OnPlayerCommandReceived"/>
			<referrer name="afkCheck"/>
			<referrer name="OnPlayerText"/>
			<summary>Returns the uptime of the actual server (not the SA-MP server) in milliseconds.</summary> <seealso name="tickcount"/> <remarks>GetTickCount will cause problems on servers with uptime of over 24 days as GetTickCount will eventually warp past the integer size constraints. However using <a href="https://gist.github.com/ziggi/5d7d8dc42f54531feba7ae924c608e73">this</a> function fixes the problem.</remarks> <remarks>One common use for GetTickCount is for benchmarking. It can be used to calculate how much time some code takes to execute.</remarks> <returns>Uptime of the actual server (not the SA-MP server).</returns>
		</member>
		<member name="M:GetVehicleHealth" syntax="GetVehicleHealth(vehicleid, &amp;health)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to get the health of
			</param>
			<param name="health">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the vehicle's health, passed by reference
			</param>
			<summary>Get the health of a vehicle.</summary>   <seealso name="SetVehicleHealth"/> <seealso name="GetPlayerHealth"/> <seealso name="GetPlayerArmour"/> <remarks>Full vehicle health is <b><c>1000</c></b>, however higher values are possible and increase the health of the vehicle.</remarks> <remarks> <b>Health:</b><p/> <ul> <li>&gt; 650 - undamaged</li> <li>650-550 - white Smoke</li> <li>550-390 - grey Smoke</li> <li>390-250 - black Smoke</li> <li>&lt; 250 - on fire (will explode seconds later)</li> </ul> </remarks> <returns> <b><c>1</c></b> - success.<p/> <b><c>0</c></b> - failure (invalid vehicle ID).<p/> </returns>
		</member>
		<member name="M:GetVehicleModel" syntax="GetVehicleModel(vehicleid)">
			<attribute name="native"/>
			<referrer name="InflictDamage"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<param name="vehicleid">
				The ID of the vehicle to get the model of
			</param>
			<summary>Gets the <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model ID</a> of a vehicle.</summary>  <seealso name="GetPlayerVehicleID"/> <seealso name="GetVehiclePos"/> <seealso name="GetVehicleZAngle"/> <seealso name="GetPlayerVehicleSeat"/> <returns>The vehicle's <a href="http://wiki.sa-mp.com/wiki/Vehicle_Models">model ID</a>, or <b><c>0</c></b> if the vehicle doesn't exist.</returns>
		</member>
		<member name="M:GetVehicleVelocity" syntax="GetVehicleVelocity(vehicleid, &amp;X, &amp;Y, &amp;Z)">
			<attribute name="native"/>
			<referrer name="InflictDamage"/>
			<referrer name="GetSpeed"/>
			<param name="vehicleid">
				The ID of the vehicle to get the velocity of
			</param>
			<param name="X">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's X velocity, passed by reference
			</param>
			<param name="Y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's Y velocity, passed by reference
			</param>
			<param name="Z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's Z velocity, passed by reference
			</param>
			<summary>Get the velocity of a vehicle on the X, Y and Z axes.</summary>     <seealso name="GetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="SetPlayerVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Multiply vector with <b><c>250.66667</c></b> for kmph or <b><c>199.416667</c></b> for mph or something...</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the vehicle specified does not exist.<p/> </returns>
		</member>
		<member name="M:GetVehicleZAngle" syntax="GetVehicleZAngle(vehicleid, &amp;z_angle)">
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<param name="vehicleid">
				The ID of the vehicle to get the Z angle of
			</param>
			<param name="z_angle">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the Z rotation, passed by reference
			</param>
			<summary>Get the rotation of a vehicle on the Z axis (yaw).</summary>   <seealso name="GetVehicleRotationQuat"/> <seealso name="GetVehicleRotation"/> <seealso name="SetVehicleZAngle"/> <seealso name="GetVehiclePos"/> <seealso name="GetPlayerFacingAngle"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the vehicle does not exist. </returns>
		</member>
		<member name="M:GiveMoney" syntax="GiveMoney(playerid, cash)">
			<stacksize value="4"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="GivePlayerMoney"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="pCash"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="cash">
			</param>
		</member>
		<member name="M:GivePlayerMoney" syntax="GivePlayerMoney(playerid, money)">
			<attribute name="native"/>
			<referrer name="OnPlayerUseVendingMachine"/>
			<referrer name="GiveMoney"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to give money to or take money from
			</param>
			<param name="money">
				The amount of money to give the player. Use a minus value to take money
			</param>
			<summary>Give money to or take money from a player.</summary>   <seealso name="ResetPlayerMoney"/> <seealso name="GetPlayerMoney"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:GivePlayerWeapon" syntax="GivePlayerWeapon(playerid, weaponid, ammo)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="WC_CbugPunishment"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<param name="playerid">
				The ID of the player to give a weapon to
			</param>
			<param name="weaponid">
				The ID of the weapon to give to the player
			</param>
			<param name="ammo">
				The amount of ammo to give to the player
			</param>
			<summary>Give a player a weapon with a specified amount of ammo.</summary>    <seealso name="SetPlayerArmedWeapon"/> <seealso name="GetPlayerWeapon"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected.<p/> </returns>
		</member>
		<member name="M:H@" syntax="H@(...)">
			<stacksize value="1"/>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:HasSameTeam" syntax="HasSameTeam(playerid, otherid)">
			<stacksize value="1"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="s_PlayerTeam"/>
			<param name="playerid">
			</param>
			<param name="otherid">
			</param>
		</member>
		<member name="M:HaveToRelocateOpcodes" syntax="HaveToRelocateOpcodes()">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="RelocateOpcodeNow"/>
			<dependency name="OP_CALL"/>
			<dependency name="ReadOpcodeNearThis"/>
		</member>
		<member name="M:HeapAllocBytes" syntax="HeapAllocBytes(nbytes)">
			<stacksize value="2"/>
			<referrer name="HeapAllocCells"/>
			<param name="nbytes">
			</param>
		</member>
		<member name="M:HeapAllocCells" syntax="HeapAllocCells(ncells)">
			<stacksize value="4"/>
			<referrer name="YHNPS_Push"/>
			<dependency name="HeapAllocBytes"/>
			<param name="ncells">
			</param>
		</member>
		<member name="M:HeapRelease" syntax="HeapRelease(address)">
			<stacksize value="1"/>
			<referrer name="Hooks_OnCodeInit"/>
			<param name="address">
			</param>
		</member>
		<member name="M:HideModelSelectionMenu" syntax="HideModelSelectionMenu(playerid)">
			<stacksize value="5"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="CancelSelectTextDraw"/>
			<dependency name="SetPVarInt"/>
			<dependency name="mS_DestroySelectionMenu"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:HitRemove" syntax="HitRemove(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="HitMark"/>
			<dependency name="WC_TextDrawHideForPlayer"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:HookNative" syntax="HookNative(index, address)">
			<stacksize value="8"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="GetNumNatives"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="WriteAmxMemory"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="index">
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:HookPublic" syntax="HookPublic(index, address)">
			<stacksize value="8"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="GetNumPublics"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="WriteAmxMemory"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<param name="index">
			</param>
			<param name="address">
			</param>
		</member>
		<member name="M:Hooks_Collate" syntax="Hooks_Collate(preloads[][], precount, name[], idx)">
			<stacksize value="30"/>
			<referrer name="Hooks_DoAllHooks"/>
			<dependency name="Hooks_GenerateCode"/>
			<dependency name="Hooks_GetAllHooks"/>
			<dependency name="Hooks_GetPointerRewrite"/>
			<dependency name="Hooks_GetPreHooks"/>
			<dependency name="Hooks_IsolateName"/>
			<dependency name="Hooks_MakeLongName"/>
			<dependency name="strlen"/>
			<dependency name="strunpack"/>
			<param name="preloads">
				<paraminfo> [][17] </paraminfo>
			</param>
			<param name="precount">
			</param>
			<param name="name">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:Hooks_CompareNextCell" syntax="Hooks_CompareNextCell(addr0, addr1)">
			<stacksize value="6"/>
			<referrer name="Hooks_ComparePublics"/>
			<dependency name="AMX_Read"/>
			<dependency name="Cell_ReverseBytes"/>
			<param name="addr0">
				The 1st address to read.
			</param>
			<param name="addr1">
				The 2nd address to read.
			</param>
			    <returns>  -1 - The first address is bigger.  0  - The addresses are the same  1  - The second address is bigger.  </returns>  <remarks>  Reads two addresses, converts them to big endian, and compares them as four  characters of a string at once.  </remarks> 
		</member>
		<member name="M:Hooks_ComparePublics" syntax="Hooks_ComparePublics(idx0, idx1)">
			<stacksize value="9"/>
			<referrer name="Hooks_SortPublics"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="Hooks_CompareNextCell"/>
			<param name="idx0">
				The index of the 1st public.
			</param>
			<param name="idx1">
				The index of the 2nd public.
			</param>
			    <remarks>  Compares two public function entries, and if need-be, swaps them over.  </remarks> 
		</member>
		<member name="M:Hooks_Continue_" syntax="Hooks_Continue_(...)">
			<stacksize value="1"/>
			<referrer name="Hooks_GenerateContinue"/>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:Hooks_CountInvalidPublics" syntax="Hooks_CountInvalidPublics()">
			<stacksize value="10"/>
			<referrer name="Hooks_SortPublics"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<remarks>  Counts the number of public functions that have had their names erased.  </remarks> 
		</member>
		<member name="M:Hooks_DoAllHooks" syntax="Hooks_DoAllHooks()">
			<stacksize value="617"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="AMX_GetNamePrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="E_CHAIN_HOOK"/>
			<dependency name="Hooks_Collate"/>
			<dependency name="Hooks_GetPreloadLibraries"/>
		</member>
		<member name="M:Hooks_GenerateCode" syntax="Hooks_GenerateCode(name[], hooks[], count, write, hasprehooks)">
			<stacksize value="7"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_REAL_DATA"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="CGen_AddCodeSpace"/>
			<dependency name="CGen_GetCodeSpace"/>
			<dependency name="Hooks_GetDefaultReturn"/>
			<dependency name="Hooks_WriteFunction"/>
			<param name="name">
				<paraminfo> [64] </paraminfo>
				Name of the function to generate.
			</param>
			<param name="hooks">
				<paraminfo> [] </paraminfo>
				All the functions to call.
			</param>
			<param name="count">
				Number of functions to call.
			</param>
			<param name="write">
				Where to write the new function's pointer.
			</param>
			<param name="hasprehooks">
				<paraminfo>bool </paraminfo>
				Needs to call other stuff first.
			</param>
			         
		</member>
		<member name="M:Hooks_GenerateContinue" syntax="Hooks_GenerateContinue(...)">
			<stacksize value="39"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AsmContext"/>
			<dependency name="AsmEmitAddC"/>
			<dependency name="AsmEmitAddrPri"/>
			<dependency name="AsmEmitAnd"/>
			<dependency name="AsmEmitConstPri"/>
			<dependency name="AsmEmitJgrtrLabelStringize"/>
			<dependency name="AsmEmitJsleqLabelStringize"/>
			<dependency name="AsmEmitJumpLabelStringize"/>
			<dependency name="AsmEmitJzerLabelStringize"/>
			<dependency name="AsmEmitLabelStringize"/>
			<dependency name="AsmEmitLctrl"/>
			<dependency name="AsmEmitLoadI"/>
			<dependency name="AsmEmitLoadPri"/>
			<dependency name="AsmEmitLrefSPri"/>
			<dependency name="AsmEmitMoveAlt"/>
			<dependency name="AsmEmitMovePri"/>
			<dependency name="AsmEmitNeg"/>
			<dependency name="AsmEmitPadding"/>
			<dependency name="AsmEmitPopAlt"/>
			<dependency name="AsmEmitPopPri"/>
			<dependency name="AsmEmitProc"/>
			<dependency name="AsmEmitPushPri"/>
			<dependency name="AsmEmitSctrl"/>
			<dependency name="AsmEmitShrCAlt"/>
			<dependency name="AsmEmitSrefSPri"/>
			<dependency name="AsmEmitStorAlt"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="Hooks_Continue_"/>
			<dependency name="O@A_"/>
			<dependency name="O@V_"/>
			<dependency name="YSI_g_sNPSStack"/>
			<dependency name="YSI_g_sTempRet"/>
			<dependency name="_@yH"/>
			<dependency name="ref"/>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:Hooks_GetAllHooks" syntax="Hooks_GetAllHooks(name[], hooks[], idx, &amp;namelen, size)">
			<stacksize value="74"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<dependency name="AMX_GetStringFromEntry"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="Debug_Print0"/>
			<dependency name="Hooks_InvalidateName"/>
			<dependency name="Hooks_IsolateName"/>
			<dependency name="Hooks_MakeLongName"/>
			<dependency name="strcmp"/>
			<dependency name="strlen"/>
			<dependency name="strunpack"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the callback (with y_hooks prefix).
			</param>
			<param name="hooks">
				<paraminfo> [] </paraminfo>
				Array in which to store the function headers.
			</param>
			<param name="idx">
				Current position in the AMX header.
			</param>
			<param name="namelen">
				<paraminfo> &amp; </paraminfo>
				Min bound of space used by all these names.
			</param>
			<param name="size">
			</param>
			        <returns>  The number of hooks found.  </returns>  <remarks>  The name of the function currently being processed is derived from the first  found hook.  This means we already know of one hook, but to simplify the  code we get that one again here.  Above we only know the name not the  address.  Hence the "- 1" in "i = idx - 1" (to go back one function name).  Our "namelen" variable already contains the full length of the first found  hook - this is the length of "name", plus N extra characters.  The following  are all valid, and may occur when orders are played with:  @yH_OnX@  @yH_OnX@1  @yH_OnX@01  @yH_OnX@024  @yH_OnX@ZZZ  @yH_OnX@999@024  If we want to get the EXACT space taken up by all these hook names we would  need to get the string of the name in this function then measure it.  There  is really no point in doing this - if we have a second we will always have  enough space for our new names.  Instead, we assume that they are all just  @yH_OnX@  And add on that minimum length accordingly (plus 1 for the NULL character).  This length is used if the original callback doesn't exist but hooks do.  In  that case we need to add the callback to the AMX header, and there is a tiny  chance that the original name will be longer than one hook's name.  In that  case, having two or more hooks will (AFAIK) always ensure that we have  enough space to write the longer name.  If there is only one hook, no original function, and the name of the hook is  shorter than the name of the original function then we have an issue and  will have to do something else instead.  </remarks> 
		</member>
		<member name="M:Hooks_GetDefaultReturn" syntax="Hooks_GetDefaultReturn(name[])">
			<stacksize value="73"/>
			<referrer name="Hooks_GenerateCode"/>
			<dependency name="AMX_GetEntry"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="CallFunction"/>
			<dependency name="Hooks_MakeShortName"/>
			<dependency name="strcat"/>
			<dependency name="true"/>
			<param name="name">
				<paraminfo> [64] </paraminfo>
				The function to get the default return of.
			</param>
			  <returns>  The default return for a callback, normally 1.  </returns> 
		</member>
		<member name="M:Hooks_GetFunctionWritePoint" syntax="Hooks_GetFunctionWritePoint(name[], &amp;write)">
			<stacksize value="8"/>
			<dependency name="AMX_GetEntry"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="true"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The function to get the address pointer of.
			</param>
			<param name="write">
				<paraminfo> &amp; </paraminfo>
				Destination variable.
			</param>
			    <returns>  The address at which this function's pointer is stored in the AMX header, if  the function exists of course.  </returns> 
		</member>
		<member name="M:Hooks_GetPointerRewrite" syntax="Hooks_GetPointerRewrite(hooks[], num, &amp;ptr, &amp;next, name[], nlen)">
			<stacksize value="39"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_REAL_DATA"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="AMX_WriteString"/>
			<dependency name="Debug_Print0"/>
			<dependency name="Hooks_GetStubEntry"/>
			<dependency name="OP_JUMP"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="strlen"/>
			<dependency name="strpack"/>
			<param name="hooks">
				<paraminfo> [] </paraminfo>
				All the prehooks for this callback.
			</param>
			<param name="num">
				The number of prehooks.
			</param>
			<param name="ptr">
				<paraminfo> &amp; </paraminfo>
				A pointer to write the new stub address to.
			</param>
			<param name="next">
				<paraminfo> &amp; </paraminfo>
				The pointer for the function called after y_hooks.
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the callback being processed.
			</param>
			<param name="nlen">
				Space available in the header to write text in.
			</param>
			           
		</member>
		<member name="M:Hooks_GetPreHooks" syntax="Hooks_GetPreHooks(preloads[][], precount, name[], hooks[], &amp;count)">
			<stacksize value="73"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="AMX_GetEntry"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="E_CHAIN_HOOK_NAME"/>
			<dependency name="Hooks_MakeShortName"/>
			<dependency name="strcat"/>
			<dependency name="true"/>
			<param name="preloads">
				<paraminfo> [][17] </paraminfo>
				Names of libraries that come before y_hooks.
			</param>
			<param name="precount">
				Number of pre libraries.
			</param>
			<param name="name">
				<paraminfo> [64] </paraminfo>
				Name of the callback.
			</param>
			<param name="hooks">
				<paraminfo> [] </paraminfo>
				Destination in which to store the headers.
			</param>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of headers found.
			</param>
			          <remarks>  Finds all the AMX file headers for functions with a similar name to the  given callback that should be called before (or near) the given callback.  </remarks> 
		</member>
		<member name="M:Hooks_GetPreloadLibraries" syntax="Hooks_GetPreloadLibraries(preloads[][], &amp;precount, size)">
			<stacksize value="161"/>
			<referrer name="Hooks_DoAllHooks"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_ReadString"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="CallFunction"/>
			<dependency name="Debug_Print0"/>
			<dependency name="E_CHAIN_HOOK"/>
			<dependency name="E_CHAIN_HOOK_NAME"/>
			<dependency name="E_CHAIN_HOOK_VALUE"/>
			<dependency name="Hooks_InvalidateName"/>
			<dependency name="strlen"/>
			<dependency name="strunpack"/>
			<dependency name="unpack"/>
			<dependency name="unpack"/>
			<param name="preloads">
				<paraminfo> [][17] </paraminfo>
				Desination in which to store all the preloads.
			</param>
			<param name="precount">
				<paraminfo> &amp; </paraminfo>
				Number of found preload libraries.
			</param>
			<param name="size">
				Maximum number of libraries to store.
			</param>
			      <remarks>  Some includes, like "fixes.inc" and anti-cheats MUST come before all other  includes in order for everything to function correctly (at least fixes.inc  must).  This function looks for these definitions:  PRE_HOOK(FIXES)  Which tell y_hooks that any "FIXES_" prefixed callbacks are part of one of  these chains.  </remarks> 
		</member>
		<member name="M:Hooks_GetStubEntry" syntax="Hooks_GetStubEntry(stub)">
			<stacksize value="13"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<dependency name="Debug_Print0"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmGetNumOperands"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmInit"/>
			<dependency name="DisasmNextInsn"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_JUMP"/>
			<dependency name="OP_LOAD_PRI"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_SWITCH"/>
			<param name="stub">
				Starting address of the function.
			</param>
			  <returns>  The address at which the actual code in this function starts.  </returns>  <remarks>  This handles three cases.  Regular functions end instantly as found.  Functions that start with a switch (even before "PROC") are assumed to be  state-based functions, and we find the most likely state to be used (i.e. we  remove all future state changes).  </remarks> 
		</member>
		<member name="M:Hooks_InvalidateName" syntax="Hooks_InvalidateName(entry)">
			<stacksize value="5"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<param name="entry">
				The public function slot to destroy.
			</param>
			  <remarks>  Basically, once we know a function has been included, wipe it from the AMX  header.  </remarks> 
		</member>
		<member name="M:Hooks_IsolateName" syntax="Hooks_IsolateName(name[])">
			<stacksize value="152"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="Debug_Print0"/>
			<dependency name="false"/>
			<dependency name="strdel"/>
			<dependency name="strfind"/>
			<dependency name="unpack"/>
			<dependency name="unpack"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The string to get the hooked function name from.
			</param>
			  <returns>  The input string without y_hooks name decorations.  </returns> 
		</member>
		<member name="M:Hooks_MakeLongName" syntax="Hooks_MakeLongName(name[])">
			<stacksize value="10"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_Collate"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_LONG"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MAX"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MIN"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_SHORT"/>
			<dependency name="Hooks_MakeShortName"/>
			<dependency name="YSI_g_sReplacePtr"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacementsShortOrder"/>
			<dependency name="false"/>
			<dependency name="strdel"/>
			<dependency name="strfind"/>
			<dependency name="strins"/>
			<param name="name">
				<paraminfo> [64] </paraminfo>
				Function name to modify.
			</param>
			  <remarks>  Expands all name parts like "CP" and "Obj" to their full versions (in this  example "Checkpoint" and "Object").  </remarks> 
		</member>
		<member name="M:Hooks_MakeShortName" syntax="Hooks_MakeShortName(name[])">
			<stacksize value="10"/>
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_GetPreHooks"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_LONG"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MAX"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_SHORT"/>
			<dependency name="YSI_g_sReplacePtr"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacementsLongOrder"/>
			<dependency name="false"/>
			<dependency name="strdel"/>
			<dependency name="strfind"/>
			<dependency name="strins"/>
			<dependency name="strlen"/>
			<param name="name">
				<paraminfo> [64] </paraminfo>
				Function name to modify.
			</param>
			  <remarks>  Compresses function names when required to fit within 32 characters  according to well defined rules (see "YSI_g_sReplacements").  </remarks> 
		</member>
		<member name="M:Hooks_NumArgs" syntax="Hooks_NumArgs()">
			<stacksize value="1"/>
		</member>
		<member name="M:Hooks_OnCodeInit" syntax="Hooks_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="28"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="AMX_Write"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmGetCurIp"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmGetOperandReloc"/>
			<dependency name="DisasmInit"/>
			<dependency name="DisasmNextInsn"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="GetAmxHeapTop"/>
			<dependency name="HeapRelease"/>
			<dependency name="Hooks_GenerateContinue"/>
			<dependency name="Indirect_Call"/>
			<dependency name="Indirect_Init"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_NONE"/>
			<dependency name="OP_NOP"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_STACK"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="YHNPS_Find"/>
			<dependency name="YHNPS_Push"/>
			<dependency name="YSI_g_sNPSBaseCall"/>
			<dependency name="YSI_g_sNPSReplace"/>
			<dependency name="YSI_g_sNPSStack"/>
			<dependency name="YSI_g_sNPSTrampoline"/>
			<dependency name="cellmin"/>
		</member>
		<member name="M:Hooks_Ordinal" syntax="Hooks_Ordinal(n)">
			<stacksize value="13"/>
			<referrer name="ScriptInit_OnRuntimeError"/>
			<dependency name="Hooks_Ordinal"/>
			<dependency name="strcat"/>
			<dependency name="valstr"/>
			<param name="n">
			</param>
		</member>
		<member name="M:Hooks_RepairJITInit" syntax="Hooks_RepairJITInit()">
			<stacksize value="7"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="FALSE"/>
			<dependency name="GetPublicAddressFromName"/>
			<dependency name="YSI_g_sInitFSIdx"/>
			<dependency name="YSI_g_sInitFSPtr"/>
			<dependency name="YSI_g_sInitFSRep"/>
			<dependency name="YSI_g_sInitGMIdx"/>
			<dependency name="YSI_g_sInitGMPtr"/>
			<dependency name="YSI_g_sInitGMRep"/>
			<dependency name="_Hooks_RepairStubFS"/>
			<dependency name="_Hooks_RepairStubGM"/>
		</member>
		<member name="M:Hooks_SortPublics" syntax="Hooks_SortPublics()">
			<stacksize value="8"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_HEADER_NATIVES"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="Hooks_ComparePublics"/>
			<dependency name="Hooks_CountInvalidPublics"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="Server_JITExists"/>
			<dependency name="YSI_g_sInitPublicDiff"/>
			<dependency name="YSI_g_sSortedOnce"/>
			<dependency name="true"/>
			<remarks>  Goes through the whole of the public functions table and sorts them all in  to alphabetical order.  This is done as we move and rename some so we need  to fix the virtual machine's binary search.  </remarks> 
		</member>
		<member name="M:Hooks_SortReplacements" syntax="Hooks_SortReplacements()">
			<stacksize value="6"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MAX"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MIN"/>
			<dependency name="YSI_g_sReplacePtr"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacementsLongOrder"/>
			<dependency name="YSI_g_sReplacementsShortOrder"/>
			<remarks>  Once all the replacement strings have been found, sort them by the length of  the short versions of the strings.  This is so that the longest (and special  case, e.g. "DynamicCP"-> "DynamicCP") replacements are always done first.  </remarks> 
		</member>
		<member name="M:Hooks_WriteFunction" syntax="Hooks_WriteFunction(pointers[], size, ret, skipable)">
			<stacksize value="29"/>
			<referrer name="Hooks_GenerateCode"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_REAL_ADDRESS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AsmContext"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmEmitAddC"/>
			<dependency name="AsmEmitAddrPri"/>
			<dependency name="AsmEmitAnd"/>
			<dependency name="AsmEmitCall"/>
			<dependency name="AsmEmitInvert"/>
			<dependency name="AsmEmitJsgeqLabelStringize"/>
			<dependency name="AsmEmitJslessLabelStringize"/>
			<dependency name="AsmEmitJumpLabelStringize"/>
			<dependency name="AsmEmitJzerLabelStringize"/>
			<dependency name="AsmEmitLabelStringize"/>
			<dependency name="AsmEmitLctrl"/>
			<dependency name="AsmEmitLoadSAlt"/>
			<dependency name="AsmEmitLoadSPri"/>
			<dependency name="AsmEmitMoveAlt"/>
			<dependency name="AsmEmitMovePri"/>
			<dependency name="AsmEmitMovs"/>
			<dependency name="AsmEmitOr"/>
			<dependency name="AsmEmitProc"/>
			<dependency name="AsmEmitPush"/>
			<dependency name="AsmEmitPushAlt"/>
			<dependency name="AsmEmitPushC"/>
			<dependency name="AsmEmitPushPri"/>
			<dependency name="AsmEmitRetn"/>
			<dependency name="AsmEmitSctrl"/>
			<dependency name="AsmEmitStack"/>
			<dependency name="AsmEmitStorPri"/>
			<dependency name="AsmEmitStorSPri"/>
			<dependency name="AsmEmitSub"/>
			<dependency name="AsmEmitSysreq"/>
			<dependency name="AsmEmitXchg"/>
			<dependency name="AsmEmitZeroAlt"/>
			<dependency name="CGen_GetCodeSpace"/>
			<dependency name="CGen_UseCodeSpace"/>
			<dependency name="Debug_Print0"/>
			<dependency name="Server_JITExists"/>
			<dependency name="YSI_g_sActiveHooks"/>
			<dependency name="ref"/>
			<param name="pointers">
				<paraminfo> [] </paraminfo>
				The hooks to link together.
			</param>
			<param name="size">
				The number of functions in the array.
			</param>
			<param name="ret">
				The default return.
			</param>
			<param name="skipable">
				Can future hooks be ignored on -1?
			</param>
			        <returns>  The number of bytes written to memory.  </returns>  <remarks>  Generate some new code, very nicely :D.  </remarks> 
		</member>
		<member name="M:IPToInt" syntax="IPToInt(ip[])">
			<stacksize value="5"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<dependency name="strval"/>
			<param name="ip">
				<paraminfo> [] </paraminfo>
				Dot notation IP to convert to an integer.
			</param>
			 
		</member>
		<member name="M:IS_IN_RANGE" syntax="IS_IN_RANGE(value, lower, upper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="value">
				The number to compare.
			</param>
			<param name="lower">
				The lower limit.
			</param>
			<param name="upper">
				The upper limit.
			</param>
			      <returns>  Is the value in the given range.  </returns>  <remarks>  Equivalent to:  <code>		(%1) &lt;= (%0) &lt; (%2)</code>  </remarks> 
		</member>
		<member name="M:ITER_SAFE_REMOVE" syntax="ITER_SAFE_REMOVE(iter[], &amp;index)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to deal with safely.
			</param>
			<param name="index">
				<paraminfo> &amp; </paraminfo>
				Index.
			</param>
			    <remarks>  Call functions that modify an iterator safely from inside a loop:  <code>  DestroyVehicle(vehicleid)  {  Iter_Remove(Vehicle, vehicleid);  }  foreach (new vehicleid : Vehicle)  {  ITER_SAFE_REMOVE(Vehicle, vehicleid)  {  DestroyVehicle(vehicleid);  }  }  </code>  </remarks> 
		</member>
		<member name="M:Indirect_Array" syntax="Indirect_Array(func, tag, params[], size)">
			<stacksize value="6"/>
			<dependency name="GetPublicAddressFromIndex"/>
			<dependency name="GetTagNameFromID"/>
			<dependency name="INDIRECTION_DATA"/>
			<dependency name="INDIRECTION_TAG"/>
			<dependency name="funcidx"/>
			<dependency name="gsCodSize"/>
			<dependency name="memcpy"/>
			<param name="func">
			</param>
			<param name="tag">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Indirect_Call" syntax="Indirect_Call(func, tag, ...)">
			<stacksize value="6"/>
			<referrer name="Indirect_FromCallback"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="GetPublicAddressFromIndex"/>
			<dependency name="GetTagNameFromID"/>
			<dependency name="INDIRECTION_DATA"/>
			<dependency name="INDIRECTION_TAG"/>
			<dependency name="funcidx"/>
			<dependency name="gsCodSize"/>
			<param name="func">
			</param>
			<param name="tag">
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:Indirect_Callstring" syntax="Indirect_Callstring(func, tag, ...)">
			<stacksize value="145"/>
			<dependency name="GetPublicAddressFromIndex"/>
			<dependency name="GetTagNameFromID"/>
			<dependency name="INDIRECTION_DATA"/>
			<dependency name="INDIRECTION_TAG"/>
			<dependency name="Indirect_Callstring"/>
			<dependency name="funcidx"/>
			<dependency name="gsCodSize"/>
			<param name="func">
			</param>
			<param name="tag">
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:Indirect_Callvoid" syntax="Indirect_Callvoid(func, tag, ...)">
			<stacksize value="6"/>
			<dependency name="GetPublicAddressFromIndex"/>
			<dependency name="GetTagNameFromID"/>
			<dependency name="INDIRECTION_DATA"/>
			<dependency name="INDIRECTION_TAG"/>
			<dependency name="funcidx"/>
			<dependency name="gsCodSize"/>
			<param name="func">
			</param>
			<param name="tag">
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:Indirect_Claim_" syntax="Indirect_Claim_(func)">
			<stacksize value="1"/>
			<dependency name="gsCodSize"/>
			<param name="func">
				The function pointer you want to use later.
			</param>
			  <remarks>  If a function pointer is used within one function, that is not a problem.  However, if you want to store the function pointer for use later, you must  first "claim" it, so that any associated data is not cleared when the  parent function ends (i.e. the function that called your function).  After  use it must be released, and the number of claims must match the number of  releases.  </remarks> 
		</member>
		<member name="M:Indirect_DePtr_" syntax="Indirect_DePtr_(ptr)">
			<stacksize value="2"/>
			<dependency name="gsCodSize"/>
			<dependency name="numargs"/>
			<param name="ptr">
			</param>
			<param name="">The array to convert to an offset pointer.</param>  <remarks>  Strings and arrays are passed relative to `COD` not `DAT` so they can be  distinguished from normal function pointers.  This function does the offset.  </remarks> 
		</member>
		<member name="M:Indirect_DeRef_" syntax="Indirect_DeRef_(...)">
			<stacksize value="2"/>
			<dependency name="gsCodSize"/>
			<dependency name="numargs"/>
			<param name="...">
				The array to convert to an offset pointer.
			</param>
			  <remarks>  Strings and arrays are passed relative to `COD` not `DAT` so they can be  distinguished from normal function pointers.  This function does the offset.  </remarks> 
		</member>
		<member name="M:Indirect_FromCallback" syntax="Indirect_FromCallback(cb, release)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="Indirect_Call"/>
			<dependency name="Indirect_Release_"/>
			<param name="cb">
				<paraminfo>F@_@ </paraminfo>
			</param>
			<param name="release">
				<paraminfo>bool </paraminfo>
			</param>
			<remarks>  A generic public wrapper for calling inline functions.  </remarks> 
		</member>
		<member name="M:Indirect_GetMeta_" syntax="Indirect_GetMeta_(func)">
			<stacksize value="1"/>
			<dependency name="gsCodSize"/>
			<param name="func">
				The function pointer with attached metadata.
			</param>
			  <remarks>  Gets extra data from the pointer.  </remarks> 
		</member>
		<member name="M:Indirect_Init" syntax="Indirect_Init()">
			<stacksize value="21"/>
			<referrer name="ScriptInit_OnJITCompile"/>
			<referrer name="ScriptInit_OnFilterScriptInit"/>
			<referrer name="ScriptInit_OnGameModeInit"/>
			<referrer name="AMX_OnCodeInit"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="AMX_HDR"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AddressofResolve"/>
			<dependency name="GetAmxHeader"/>
			<dependency name="gsCodSize"/>
			<remarks>  Get the size of the COD AMX segment.  </remarks> 
		</member>
		<member name="M:Indirect_Ptr_" syntax="Indirect_Ptr_(ptr)">
			<stacksize value="2"/>
			<dependency name="gsCodSize"/>
			<dependency name="numargs"/>
			<param name="ptr">
			</param>
			<param name="">The array to convert to an offset pointer.</param>  <remarks>  Strings and arrays are passed relative to `COD` not `DAT` so they can be  distinguished from normal function pointers.  This function does the offset.  </remarks> 
		</member>
		<member name="M:Indirect_Ref_" syntax="Indirect_Ref_(...)">
			<stacksize value="2"/>
			<dependency name="gsCodSize"/>
			<dependency name="numargs"/>
			<param name="...">
				The array to convert to an offset pointer.
			</param>
			  <remarks>  Strings and arrays are passed relative to `COD` not `DAT` so they can be  distinguished from normal function pointers.  This function does the offset.  </remarks> 
		</member>
		<member name="M:Indirect_Release_" syntax="Indirect_Release_(func)">
			<stacksize value="1"/>
			<referrer name="Indirect_FromCallback"/>
			<dependency name="gsCodSize"/>
			<param name="func">
				The function pointer you had previously stored.
			</param>
			  <remarks>  If a function pointer is used within one function, that is not a problem.  However, if you want to store the function pointer for use later, you must  first "claim" it, so that any associated data is not cleared when the  parent function ends (i.e. the function that called your function).  After  use it must be released, and the number of claims must match the number of  releases.  </remarks> 
		</member>
		<member name="M:Indirect_SetMeta_" syntax="Indirect_SetMeta_(func, data)">
			<stacksize value="1"/>
			<dependency name="gsCodSize"/>
			<param name="func">
				The function pointer to attach metadata to.
			</param>
			<param name="data">
				The metadata.
			</param>
			   
		</member>
		<member name="M:Indirect_Tag" syntax="Indirect_Tag(id, dest[])">
			<stacksize value="6"/>
			<dependency name="GetTagNameFromID"/>
			<dependency name="strcat"/>
			<param name="id">
				The ID of the tag to get the specifiers from the name of.  
			</param>
			<param name="dest">
				<paraminfo> [32] </paraminfo>
				Where to store the name.
			</param>
			    <remarks>  Functions are tagged with a special tag containing their specifiers.  Get  the string value of that tag from the AMX header.  </remarks> 
		</member>
		<member name="M:Indirection_OnGameModeInit" syntax="Indirection_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="PC_Init"/>
		</member>
		<member name="M:InflictDamage" syntax="InflictDamage(playerid, amount, issuerid, weaponid, bodypart, ignore_armour)">
			<stacksize value="13"/>
			<referrer name="DamagePlayer"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="GetPlayerSpecialAction"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetPlayerVehicleSeat"/>
			<dependency name="GetVehicleModel"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="IsMeleeWeapon"/>
			<dependency name="IsPlayerBehindPlayer"/>
			<dependency name="IsPlayerSpawned"/>
			<dependency name="MakePlayerFacePlayer"/>
			<dependency name="OnPlayerDamage"/>
			<dependency name="OnPlayerDamageDone"/>
			<dependency name="PlayerDeath"/>
			<dependency name="TogglePlayerControllable"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="false"/>
			<dependency name="gettime"/>
			<dependency name="s_DamageArmour"/>
			<dependency name="s_DamageArmourToggle"/>
			<dependency name="s_DamageDoneArmour"/>
			<dependency name="s_DamageDoneHealth"/>
			<dependency name="s_LastVehicleEnterTime"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="issuerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
			<param name="ignore_armour">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:InitOpcodeTable" syntax="InitOpcodeTable()">
			<stacksize value="5"/>
			<referrer name="RelocateOpcode"/>
			<referrer name="UnrelocateOpcode"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="RelocateOpcodeNow"/>
			<dependency name="opcode_table"/>
			<dependency name="opcode_table_is_ready"/>
			<dependency name="true"/>
		</member>
		<member name="M:InterpolateCameraLookAt" syntax="InterpolateCameraLookAt(playerid, FromX, FromY, FromZ, ToX, ToY, ToZ, time, cut)">
			<attribute name="native"/>
			<referrer name="check_account_registered"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="FromX">
				<paraminfo>Float </paraminfo>
				The X position the camera should start to move from
			</param>
			<param name="FromY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should start to move from
			</param>
			<param name="FromZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should start to move from
			</param>
			<param name="ToX">
				<paraminfo>Float </paraminfo>
				The X position the camera should move to
			</param>
			<param name="ToY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should move to
			</param>
			<param name="ToZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds to complete interpolation
			</param>
			<param name="cut">
				The 'jumpcut' to use. Set to <b><c>CAMERA_MOVE</c></b> for interpolation (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<summary>Interpolate a player's camera's 'look at' point between two coordinates with a set speed. Can be be used with <a href="#InterpolateCameraPos">InterpolateCameraPos</a>.</summary>          <seealso name="InterpolateCameraPos"/> <seealso name="SetPlayerCameraLookAt"/> <seealso name="SetPlayerCameraPos"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while the camera is moving. You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks>
		</member>
		<member name="M:InterpolateCameraPos" syntax="InterpolateCameraPos(playerid, FromX, FromY, FromZ, ToX, ToY, ToZ, time, cut)">
			<attribute name="native"/>
			<referrer name="check_account_registered"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="FromX">
				<paraminfo>Float </paraminfo>
				The X position the camera should start to move from
			</param>
			<param name="FromY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should start to move from
			</param>
			<param name="FromZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should start to move from
			</param>
			<param name="ToX">
				<paraminfo>Float </paraminfo>
				The X position the camera should move to
			</param>
			<param name="ToY">
				<paraminfo>Float </paraminfo>
				The Y position the camera should move to
			</param>
			<param name="ToZ">
				<paraminfo>Float </paraminfo>
				The Z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds
			</param>
			<param name="cut">
				The jumpcut to use. Set to <b><c>CAMERA_MOVE</c></b> for a smooth movement (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<summary>Move a player's camera from one position to another, within the set time. Useful for scripted cut scenes.</summary>          <seealso name="InterpolateCameraLookAt"/> <seealso name="SetPlayerCameraPos"/> <seealso name="SetPlayerCameraLookAt"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while the camera is moving. You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks>
		</member>
		<member name="M:InterpolateColour" syntax="InterpolateColour(startcolor, endcolor, value, maxvalue, minvalue)">
			<stacksize value="3"/>
			<param name="startcolor">
				One of the two colours.
			</param>
			<param name="endcolor">
				The other of the two colours.
			</param>
			<param name="value">
				The interpolation value between the endpoints.
			</param>
			<param name="maxvalue">
				One of the two numbers.
			</param>
			<param name="minvalue">
				The other of the two numbers.
			</param>
			<summary>  InterpolateColour(startcolor, endcolor, value, maxvalue, minvalue = 0);  </summary>            <remarks>  This function takes two endpoint values (minvalue and maxvalue, with  minvalue defaulting to 0), along with a third value (value) whose distance  between the two endpoints is calculated (as a percentage).  This percentage  value is then applied to the two colours given to find a third colour at  some point between those two colours.  For example, if the endpoints given are "0" and "10", and the value given is  "3", then that is "30%" of the way between the two endpoints.  We therefore  want to find a colour that is 30% of the way between the two given colours.  </remarks> 
		</member>
		<member name="M:IsBulletWeapon" syntax="IsBulletWeapon(weaponid)">
			<stacksize value="1"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="SetWeaponMaxRange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:IsCrashDetectPresent" syntax="IsCrashDetectPresent()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="false"/>
		</member>
		<member name="M:IsDamageFeedActive" syntax="IsDamageFeedActive(playerid)">
			<stacksize value="1"/>
			<referrer name="WC_DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHit"/>
			<dependency name="s_DamageFeed"/>
			<dependency name="s_DamageFeedPlayer"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:IsHighRateWeapon" syntax="IsHighRateWeapon(weaponid)">
			<stacksize value="1"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ProcessDamage"/>
			<referrer name="OnPlayerDamageDone"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:IsMeleeWeapon" syntax="IsMeleeWeapon(weaponid)">
			<stacksize value="1"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ProcessDamage"/>
			<referrer name="InflictDamage"/>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:IsOpcodeValid" syntax="IsOpcodeValid(opcode)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="AsmEmitPadding"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:IsPlayerAdmin" syntax="IsPlayerAdmin(playerid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="AMessage"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Check if a player is logged in as an RCON admin.</summary>  <seealso name="SendRconCommand"/> <seealso name="OnRconLoginAttempt"/> <returns><b><c>1</c></b> if the player is an RCON admin, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerBehindPlayer" syntax="IsPlayerBehindPlayer(playerid, targetid, diff)">
			<stacksize value="15"/>
			<referrer name="InflictDamage"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="AngleBetweenPoints"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="floatabs"/>
			<param name="playerid">
			</param>
			<param name="targetid">
			</param>
			<param name="diff">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:IsPlayerConnected" syntax="IsPlayerConnected(playerid)">
			<attribute name="native"/>
			<referrer name="SetCbugAllowed"/>
			<referrer name="SetDamageFeedForPlayer"/>
			<referrer name="SetDamageFeed"/>
			<referrer name="DamagePlayer"/>
			<referrer name="WC_GetPlayerTeam"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateSyncData"/>
			<referrer name="WC_SpawnForStreamedIn"/>
			<referrer name="WC_DamageFeedUpdate"/>
			<referrer name="DamageFeedAddHitGiven"/>
			<referrer name="DamageFeedAddHitTaken"/>
			<referrer name="OnPlayerDamageDone"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="Admini"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="Premiums"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="ClearFPlayer"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<referrer name="forfeitPlayerDuel"/>
			<referrer name="sql_OnAccountCreate"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Checks if a player is connected (if an ID is taken by a connected player).</summary>  <seealso name="IsPlayerAdmin"/> <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <remarks>This function can be omitted in a lot of cases. Many other functions already have some sort of connection check built in.</remarks> <returns><b><c>1</c></b> if the player is connected, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerDueling" syntax="IsPlayerDueling(playerid)">
			<stacksize value="1"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="forfeitPlayerDuel"/>
			<dependency name="p_playerDueling"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:IsPlayerDying" syntax="IsPlayerDying(playerid)">
			<stacksize value="1"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<dependency name="false"/>
			<dependency name="s_IsDying"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:IsPlayerInAnyVehicle" syntax="IsPlayerInAnyVehicle(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="ProcessDamage"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="GetSpeed"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Check if a player is inside any vehicle (as a driver or passenger).</summary>  <seealso name="IsPlayerInVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <returns><b><c>1</c></b> if the player is in a vehicle, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerInCheckpoint" syntax="IsPlayerInCheckpoint(playerid)">
			<attribute name="native"/>
			<referrer name="WC_IsPlayerInCheckpoint"/>
			<param name="playerid">
				The player you want to know the status of
			</param>
			<summary>Check if the player is currently inside a checkpoint, this could be used for properties or teleport points for example.</summary>  <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <returns><b><c>0</c></b> if player isn't in his checkpoint else <b><c>1</c></b>.</returns>
		</member>
		<member name="M:IsPlayerInRangeOfPoint" syntax="IsPlayerInRangeOfPoint(playerid, range, x, y, z)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<param name="playerid">
				The ID of the player
			</param>
			<param name="range">
				<paraminfo>Float </paraminfo>
				The furthest distance the player can be from the point to be in range
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate of the point to check the range to
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate of the point to check the range to
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate of the point to check the range to
			</param>
			<summary>Checks if a player is in range of a point. This native function is faster than the PAWN implementation using distance formula.</summary>      <seealso name="GetPlayerDistanceFromPoint"/> <seealso name="GetVehicleDistanceFromPoint"/> <seealso name="GetPlayerPos"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns><b><c>1</c></b> if the player is in range, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerNPC" syntax="IsPlayerNPC(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<referrer name="WC_OnPlayerConnect"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="GetDistanceBetweenPlayers"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<summary>Check if a player is an actual player or an NPC.</summary>  <seealso name="ConnectNPC"/> <seealso name="IsPlayerAdmin"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns><b><c>1</c></b> if the player is an NPC, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPlayerPaused" syntax="IsPlayerPaused(playerid)">
			<stacksize value="2"/>
			<referrer name="OnPlayerGiveDamage"/>
			<dependency name="GetTickCount"/>
			<dependency name="s_LastUpdate"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:IsPlayerSpawned" syntax="IsPlayerSpawned(playerid)">
			<stacksize value="3"/>
			<referrer name="WC_IsPlayerInCheckpoint"/>
			<referrer name="WC_SetPlayerSpecialAction"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="OnPlayerEnterCheckpoint"/>
			<referrer name="InflictDamage"/>
			<dependency name="GetPlayerState"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_IsDying"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:IsPlayerStreamedIn" syntax="IsPlayerStreamedIn(playerid, forplayerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="UpdateSyncData"/>
			<referrer name="WC_SpawnForStreamedIn"/>
			<param name="playerid">
				The ID of the player to check is streamed in
			</param>
			<param name="forplayerid">
				The ID of the player to check if playerid is streamed in for
			</param>
			<summary>Checks if a player is streamed in another player's client.</summary>   <seealso name="IsActorStreamedIn"/> <seealso name="IsVehicleStreamedIn"/> <seealso name="OnPlayerStreamIn"/> <seealso name="OnPlayerStreamOut"/> <seealso name="OnVehicleStreamIn"/> <seealso name="OnVehicleStreamOut"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Players aren't streamed in on their own client, so if playerid is the same as forplayerid it will return false!</remarks> <remarks>Players stream out if they are more than <b><c>150</c></b> meters away (see <c>server.cfg</c> - <c>stream_distance</c>)</remarks> <returns><b><c>1</c></b> if the player is streamed in, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsPrintableAscii" syntax="IsPrintableAscii(c)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="ToPrintableAscii"/>
			<param name="c">
			</param>
		</member>
		<member name="M:IsTagIDEmpty" syntax="IsTagIDEmpty(tag)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagIDStrong" syntax="IsTagIDStrong(tag)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="IsTagIndexStrong"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagIDWeak" syntax="IsTagIDWeak(tag)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="IsTagIndexWeak"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagIndexEmpty" syntax="IsTagIndexEmpty(tag)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagIndexStrong" syntax="IsTagIndexStrong(tag)">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetTagInfo"/>
			<dependency name="IsTagIDStrong"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagIndexWeak" syntax="IsTagIndexWeak(tag)">
			<tagname value="bool"/>
			<stacksize value="7"/>
			<dependency name="AMX_FUNCSTUBNT"/>
			<dependency name="AMX_FUNCSTUBNT_ADDRESS"/>
			<dependency name="GetTagInfo"/>
			<dependency name="IsTagIDWeak"/>
			<param name="tag">
			</param>
		</member>
		<member name="M:IsTagNameEmpty" syntax="IsTagNameEmpty(tag[])">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="tag">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:IsTagNameStrong" syntax="IsTagNameStrong(tag[])">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="tag">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:IsTagNameWeak" syntax="IsTagNameWeak(tag[])">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="tag">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:IsValidActor" syntax="IsValidActor(actorid)">
			<attribute name="native"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<param name="actorid">
				The ID of the actor to check
			</param>
			<summary>Checks if an actor ID is valid.</summary>  <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <returns><b><c>1</c></b> if the actor is valid, <b><c>0</c></b> if not.</returns>
		</member>
		<member name="M:IsValidDynamic3DTextLabel" syntax="IsValidDynamic3DTextLabel(id)">
			<attribute name="native"/>
			<referrer name="topQuery"/>
			<param name="id">
				<paraminfo>Text3D </paraminfo>
			</param>
		</member>
		<member name="M:IsValidDynamicActor" syntax="IsValidDynamicActor(actorid)">
			<attribute name="native"/>
			<referrer name="topQuery"/>
			<param name="actorid">
			</param>
		</member>
		<member name="M:Iter_ActorDo" syntax="Iter_ActorDo(add, actorid)">
			<stacksize value="7"/>
			<referrer name="@@Iter_ActorDo"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="Iter_Single@Actor"/>
			<dependency name="Iterator@Actor"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="actorid">
			</param>
		</member>
		<member name="M:Iter_Add" syntax="Iter_Add(iter[], value)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to add the data to.
			</param>
			<param name="value">
				Value to add to the iterator.
			</param>
			    <remarks>  Wrapper for Iter_AddInternal.  native Iter_Add(Iterator:Name&lt;&gt;, value);  </remarks> 
		</member>
		<member name="M:Iter_AddStaticVehicle" syntax="Iter_AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2)">
			<stacksize value="11"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Single@LocalVehicle"/>
			<dependency name="Iterator@LocalVehicle"/>
			<dependency name="J@"/>
			<dependency name="WC_AddStaticVehicle"/>
			<dependency name="_@Iter_VehicleDo"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
		</member>
		<member name="M:Iter_AddStaticVehicleEx" syntax="Iter_AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, respawn_delay, addsiren)">
			<stacksize value="13"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Single@LocalVehicle"/>
			<dependency name="Iterator@LocalVehicle"/>
			<dependency name="J@"/>
			<dependency name="WC_AddStaticVehicleEx"/>
			<dependency name="_@Iter_VehicleDo"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
			<param name="respawn_delay">
			</param>
			<param name="addsiren">
			</param>
		</member>
		<member name="M:Iter_Add_InternalC" syntax="Iter_Add_InternalC(&amp;count, array[], size, value)">
			<stacksize value="3"/>
			<referrer name="Iter_RandomAdd_InternalC"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<referrer name="@yH_OnPlayerConnect@001"/>
			<referrer name="Iter_ActorDo"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_VehicleDo"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Array start index.
			</param>
			<param name="value">
				Item to add.
			</param>
			        <remarks>  Adds a value to a given iterator set.  Now detects when you try and add the  last item multiple times, as well as all the other items.  Now simplified  even further with the new internal representation.  The modulo code is for  iterator reversal.  </remarks> 
		</member>
		<member name="M:Iter_Add_InternalD" syntax="Iter_Add_InternalD(&amp;count, array[], start, size, value)">
			<stacksize value="3"/>
			<referrer name="Iter_RandomAdd_InternalD"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="size">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:Iter_All_Internal" syntax="Iter_All_Internal(array[], size, value)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:Iter_Alloc" syntax="Iter_Alloc(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the first free slot in.
			</param>
			  <remarks>  Finds an empty slot in an iterator, adds that slot to the iterator, and  returns the now added slot.  native Iter_Alloc(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_Alloc_InternalC" syntax="Iter_Alloc_InternalC(&amp;count, array[], size, ...)">
			<stacksize value="4"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Array start index.
			</param>
			<param name="...">
			</param>
			      <remarks>  Finds the first free slot in the iterator and add it.  Excepting requested  values.  </remarks> 
		</member>
		<member name="M:Iter_Alloc_InternalD" syntax="Iter_Alloc_InternalD(&amp;count, array[], start, size, ...)">
			<stacksize value="4"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="size">
			</param>
			<param name="...">
			</param>
		</member>
		<member name="M:Iter_Begin" syntax="Iter_Begin(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the start of.
			</param>
			  <remarks>  Gets a point BEFORE the start of the iterator (the theoretical beginning).  </remarks> 
		</member>
		<member name="M:Iter_Clear" syntax="Iter_Clear(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to empty.
			</param>
			  <remarks>  Wrapper for Iter_Clear_Internal.  Although it doesn't fit my normal strict spacing, the end of "B" is correct,  namely: "_:F@s(%0),%2)".  This uses the "_:%0,)" macro to consume  a trailing comma when nothing is given in "%2", so I can't have a leading  space sadly.  "- 2" in place of the normal "- 1" is CORRECT!  native Iter_Clear(IteratorArray:Name[]&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_Clear_InternalC" syntax="Iter_Clear_InternalC(array[], size, entries, ...)">
			<stacksize value="5"/>
			<referrer name="@yH_OnScriptInit@001"/>
			<dependency name="setarg"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Size of information.
			</param>
			<param name="entries">
				Size of the count data.
			</param>
			<param name="...">
				Optional single multi-iterator to clear.
			</param>
			        <remarks>  Resets an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Clear_InternalD" syntax="Iter_Clear_InternalD(array[], size, entries, elems, counts[], start)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Size of base array.
			</param>
			<param name="entries">
				Size of the count data.
			</param>
			<param name="elems">
				Number of iterator elements.
			</param>
			<param name="counts">
				<paraminfo> [] </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="start">
				Optional single multi-iterator to clear.
			</param>
			            <remarks>  Resets an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Contains" syntax="Iter_Contains(iter[], value)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to check membership of.
			</param>
			<param name="value">
				Value to check.
			</param>
			    <remarks>  Checks if the given value is in the given iterator.  native Iter_Contains(Iterator:Name&lt;&gt;, value);  </remarks> 
		</member>
		<member name="M:Iter_Contains_InternalC" syntax="Iter_Contains_InternalC(array[], size, value)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Size of the iterator.
			</param>
			<param name="value">
				Item to check.
			</param>
			      <remarks>  Checks if this item is in the iterator.  </remarks> 
		</member>
		<member name="M:Iter_Contains_InternalD" syntax="Iter_Contains_InternalD(count, array[], size, start, value)">
			<stacksize value="1"/>
			<param name="count">
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="start">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:Iter_Count" syntax="Iter_Count(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get a random slot from.
			</param>
			  <remarks>  Returns the number of items in this iterator.  native Iter_Count(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_CreateActor" syntax="Iter_CreateActor(modelid, X, Y, Z, Rotation)">
			<stacksize value="8"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="CreateActor"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Single@LocalActor"/>
			<dependency name="Iterator@LocalActor"/>
			<dependency name="J@"/>
			<dependency name="_@Iter_ActorDo"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Rotation">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:Iter_CreateVehicle" syntax="Iter_CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay, addsiren)">
			<stacksize value="13"/>
			<referrer name="pc_cmd_veh"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Single@LocalVehicle"/>
			<dependency name="Iterator@LocalVehicle"/>
			<dependency name="J@"/>
			<dependency name="WC_CreateVehicle"/>
			<dependency name="_@Iter_VehicleDo"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
			<param name="respawn_delay">
			</param>
			<param name="addsiren">
			</param>
		</member>
		<member name="M:Iter_DestroyActor" syntax="Iter_DestroyActor(actorid)">
			<stacksize value="7"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="DestroyActor"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="Iter_Single@LocalActor"/>
			<dependency name="Iterator@LocalActor"/>
			<dependency name="J@"/>
			<dependency name="_@Iter_ActorDo"/>
			<dependency name="false"/>
			<param name="actorid">
			</param>
		</member>
		<member name="M:Iter_DestroyVehicle" syntax="Iter_DestroyVehicle(vehicleid)">
			<stacksize value="7"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="I@"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="Iter_Single@LocalVehicle"/>
			<dependency name="Iterator@LocalVehicle"/>
			<dependency name="J@"/>
			<dependency name="WC_DestroyVehicle"/>
			<dependency name="_@Iter_VehicleDo"/>
			<dependency name="false"/>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:Iter_End" syntax="Iter_End(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the end of.
			</param>
			  <remarks>  Gets a point AFTER the end of the iterator (think "MAX_PLAYERS").  </remarks> 
		</member>
		<member name="M:Iter_FastClear" syntax="Iter_FastClear(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to empty.
			</param>
			  <remarks>  Uses a static array copy to blank the iterator instead of a loop.  BROKEN!  native Iter_FastClear(IteratorArray:Name[]&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_First" syntax="Iter_First(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the first valid element in.
			</param>
			  <remarks>  Gets the first element in an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Free" syntax="Iter_Free(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the first free slot in.
			</param>
			  <remarks>  Wrapper for Iter_Free_Internal.  Returns a slot NOT in the current  iterator.  native Iter_Free(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_FreeMulti" syntax="Iter_FreeMulti(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the multi-iterator to get the first free slot in.
			</param>
			  <remarks>  Wrapper for Iter_FreeMulti_Internal.  Returns a slot NOT in the current  multi-iterator.  native Iter_FreeMulti(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_FreeMulti_Internal" syntax="Iter_FreeMulti_Internal(array[], trueSize, start)">
			<stacksize value="2"/>
			<dependency name="cellmin"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				multi-iterator data.
			</param>
			<param name="trueSize">
				Size of the multi-iterator.
			</param>
			<param name="start">
				End [?, since start points are backwards] of the multi-iterator.
			</param>
			      <remarks>  Finds the first free multi index in the multi-iterator.  </remarks> 
		</member>
		<member name="M:Iter_Free_Internal" syntax="Iter_Free_Internal(array[], size)">
			<stacksize value="2"/>
			<dependency name="cellmin"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Size of the iterator.
			</param>
			    <remarks>  Finds the first free slot in the iterator.  </remarks> 
		</member>
		<member name="M:Iter_Func@Fib" syntax="Iter_Func@Fib(&amp;iterstart, cur)">
			<stacksize value="1"/>
			<param name="iterstart">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="cur">
			</param>
		</member>
		<member name="M:Iter_Func@Filter" syntax="Iter_Func@Filter(cur, val, arr[], size)">
			<stacksize value="1"/>
			<param name="cur">
			</param>
			<param name="val">
			</param>
			<param name="arr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Iter_Func@NonNull" syntax="Iter_Func@NonNull(cur, arr[], size)">
			<stacksize value="1"/>
			<param name="cur">
			</param>
			<param name="arr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Iter_Func@Null" syntax="Iter_Func@Null(cur, arr[], size)">
			<stacksize value="1"/>
			<param name="cur">
			</param>
			<param name="arr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Iter_Func@Powers" syntax="Iter_Func@Powers(&amp;iterstart, cur, base)">
			<stacksize value="1"/>
			<param name="iterstart">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="cur">
			</param>
			<param name="base">
			</param>
		</member>
		<member name="M:Iter_Func@Random" syntax="Iter_Func@Random(&amp;iterstart, cur, count, min, max)">
			<stacksize value="3"/>
			<dependency name="cellmin"/>
			<dependency name="random"/>
			<param name="iterstart">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="cur">
			</param>
			<param name="count">
			</param>
			<param name="min">
			</param>
			<param name="max">
			</param>
		</member>
		<member name="M:Iter_Func@Range" syntax="Iter_Func@Range(cur, min, max, step)">
			<stacksize value="1"/>
			<dependency name="cellmin"/>
			<param name="cur">
			</param>
			<param name="min">
			</param>
			<param name="max">
			</param>
			<param name="step">
			</param>
		</member>
		<member name="M:Iter_Func@Until" syntax="Iter_Func@Until(cur, val, arr[], size)">
			<stacksize value="1"/>
			<param name="cur">
			</param>
			<param name="val">
			</param>
			<param name="arr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:Iter_GetMulti" syntax="Iter_GetMulti(iter[], value)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to check membership of.
			</param>
			<param name="value">
				Value to check.
			</param>
			    <returns>  Index in which the value is contained in the multi-iterator.  </returns>  <remarks>  Checks if the given value is in the given iterator, and if it is return which index it is contained.  native Iter_GetMulti(Iterator:Name&lt;&gt;, value);  </remarks> 
		</member>
		<member name="M:Iter_GetMulti_Internal" syntax="Iter_GetMulti_Internal(array[], trueSize, size, value)">
			<stacksize value="1"/>
			<dependency name="cellmin"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				multi-iterator data.
			</param>
			<param name="trueSize">
				Size of the multi-iterator per index.
			</param>
			<param name="size">
				Size of the multi-iterator.
			</param>
			<param name="value">
				Item to check.
			</param>
			        <returns>  INVALID_ITERATOR_SLOT on failure.  Index of the multi-iterator the value is contained.  </returns>  <remarks>  Checks if this item is in the multi-iterator at all, and if it is returns which index it is in.  </remarks> 
		</member>
		<member name="M:Iter_Index" syntax="Iter_Index(iter[], index, wrap)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get a slot in by index.
			</param>
			<param name="index">
				Index.
			</param>
			<param name="wrap">
				<paraminfo>bool </paraminfo>
				Keep going around until a value is found?
			</param>
			      <remarks>  Wrapper for Iter_Index_Internal.  Returns the Nth value in the iterator  (requires looping due to the way iterators are stored and optimised for  loops not direct access).  native Iter_Index(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_Index_Internal" syntax="Iter_Index_Internal(count, array[], start, size, index, wrap)">
			<stacksize value="1"/>
			<dependency name="cellmin"/>
			<param name="count">
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Array start index.
			</param>
			<param name="size">
				Array size.
			</param>
			<param name="index">
				Index to find Nth value.
			</param>
			<param name="wrap">
				<paraminfo>bool </paraminfo>
				Keep going around until a value is found?
			</param>
			            <remarks>  Allows you to find the Nth value in the iterator.  DO NOT call this in a  loop to get all values - that totally defeats the purpose of "foreach", just  use a normal "foreach" loop with an index counter for that case.  </remarks> 
		</member>
		<member name="M:Iter_Init" syntax="Iter_Init(iter[][])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [][] </paraminfo>
				Name of the iterator array to initialise.
			</param>
			  <remarks>  Wrapper for Iter_Init_Internal.  When <c>__COMPILER_NESTED_ELLIPSIS</c> is  set, this isn't needed because multi-dimensional iterators can be  initialised with the new <c>{{0, 1, ...), ...}</c> feature.  In that case  <c>I@ = 0</c> is called as a <c>void</c> function that does nothing but ends  in a semi-colon (<c>I@</c> is used a lot in YSI as a <c>do nothing</c>  enabler).  <code>native Iter_Init(IteratorArray:Name[]&lt;&gt;);</code>  </remarks> 
		</member>
		<member name="M:Iter_Init_Internal" syntax="Iter_Init_Internal(array[][], first[], s0, s1, entries)">
			<stacksize value="9"/>
			<dependency name="memcpy"/>
			<param name="array">
				<paraminfo> [][] </paraminfo>
				Iterator array to initialise.
			</param>
			<param name="first">
				<paraminfo> [] </paraminfo>
				First iterator slot.
			</param>
			<param name="s0">
				Size of first dimension.
			</param>
			<param name="s1">
				Size of second dimension.
			</param>
			<param name="entries">
				Number of start points.
			</param>
			          <remarks>  Multi-dimensional arrays can't be initialised at compile time, so need to be  done at run time, which is slightly annoying.  </remarks> 
		</member>
		<member name="M:Iter_Last" syntax="Iter_Last(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to
			</param>
			  <remarks>  Gets the last element in an iterator.  Works by getting the previous item  from the one BEFORE the first element (i.e. the one before the sentinel).  </remarks> 
		</member>
		<member name="M:Iter_Next" syntax="Iter_Next(iter[], cur)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the next element in.
			</param>
			<param name="cur">
				The current element.
			</param>
			    <remarks>  Gets the element in an iterator after the current one.  </remarks> 
		</member>
		<member name="M:Iter_None_Internal" syntax="Iter_None_Internal(array[], size, value)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:Iter_OPDCInternal" syntax="Iter_OPDCInternal(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="Iter_Single@Bot"/>
			<dependency name="Iter_Single@Character"/>
			<dependency name="Iter_Single@Player"/>
			<dependency name="Iterator@Bot"/>
			<dependency name="Iterator@Character"/>
			<dependency name="Iterator@Player"/>
			<param name="playerid">
				Player who left.
			</param>
			  <remarks>  Called AFTER "OnPlayerDisconnect" so that using "Kick" inside a  "foreach" loop doesn't crash the server due to an OOB error.  </remarks> 
		</member>
		<member name="M:Iter_Prev" syntax="Iter_Prev(iter[], cur)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the previous element in.
			</param>
			<param name="cur">
				The current element.
			</param>
			    <remarks>  Gets the element in an iterator before the current one.  Slow.  </remarks> 
		</member>
		<member name="M:Iter_Prev_Internal" syntax="Iter_Prev_Internal(array[], elems, size, slot)">
			<stacksize value="2"/>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="elems">
				Number of elements in the iterator.
			</param>
			<param name="size">
				Size of the iterator.
			</param>
			<param name="slot">
				The current slot.
			</param>
			        <remarks>  Gets the element in an iterator that points to the current element.  </remarks> 
		</member>
		<member name="M:Iter_Random" syntax="Iter_Random(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get a random slot from.
			</param>
			  <remarks>  Wrapper for Iter_RandomInternal.  native Iter_Random(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_RandomAdd" syntax="Iter_RandomAdd(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to add a random slot to.
			</param>
			  <remarks>  Wrapper for Iter_RandomAddInternal.  native Iter_RandomAdd(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_RandomAdd_InternalC" syntax="Iter_RandomAdd_InternalC(&amp;count, array[], start, ...)">
			<stacksize value="18"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_RandomFree_InternalC"/>
			<dependency name="YVA2_DummyPush"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="...">
			</param>
			      <remarks>  Adds a random value to an iterator.  </remarks> 
		</member>
		<member name="M:Iter_RandomAdd_InternalD" syntax="Iter_RandomAdd_InternalD(counts[], array[], size, slots, start, slot, ...)">
			<stacksize value="20"/>
			<dependency name="Iter_Add_InternalD"/>
			<dependency name="Iter_RandomFree_InternalC"/>
			<dependency name="YVA2_DummyPush"/>
			<param name="counts">
				<paraminfo> [] </paraminfo>
				Number of items in each iterator part.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Size of the iterator.
			</param>
			<param name="slots">
				Number of multi-iterator values.
			</param>
			<param name="start">
				
			</param>
			<param name="slot">
				Multi-iterator slot to add to.
			</param>
			<param name="...">
			</param>
			            <remarks>  Adds a random value to an iterator.  </remarks> 
		</member>
		<member name="M:Iter_RandomFree" syntax="Iter_RandomFree(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get a random unused slot for.
			</param>
			  <remarks>  Wrapper for Iter_RandomFree_Internal.  native Iter_RandomFree(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_RandomFree_InternalC" syntax="Iter_RandomFree_InternalC(count, array[], start, ...)">
			<stacksize value="9"/>
			<referrer name="Iter_RandomAdd_InternalC"/>
			<referrer name="Iter_RandomAdd_InternalD"/>
			<referrer name="Iter_RandomFree_InternalD"/>
			<dependency name="cellmin"/>
			<dependency name="random"/>
			<param name="count">
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="...">
			</param>
			      <remarks>  Returns a random unused value from an iterator.  </remarks> 
		</member>
		<member name="M:Iter_RandomFree_InternalD" syntax="Iter_RandomFree_InternalD(counts[], array[], start, slots, ...)">
			<stacksize value="16"/>
			<dependency name="Iter_RandomFree_InternalC"/>
			<dependency name="YVA2_DummyPush"/>
			<param name="counts">
				<paraminfo> [] </paraminfo>
				Number of items in each iterator part.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="slots">
				Number of multi-iterator values.
			</param>
			<param name="...">
			</param>
			        <remarks>  Returns a random unused value from an iterator.  </remarks> 
		</member>
		<member name="M:Iter_RandomRemove" syntax="Iter_RandomRemove(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to remove a random slot from.
			</param>
			  <remarks>  Wrapper for Iter_RandomRemoveInternal.  native Iter_RandomRemove(Iterator:Name&lt;&gt;);  </remarks> 
		</member>
		<member name="M:Iter_RandomRemove_InternalC" syntax="Iter_RandomRemove_InternalC(&amp;count, array[], start, ...)">
			<stacksize value="18"/>
			<dependency name="Iter_Random_Internal"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="YVA2_DummyPush"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="...">
			</param>
			      <remarks>  Removes a random value from an iterator.  </remarks> 
		</member>
		<member name="M:Iter_RandomRemove_InternalD" syntax="Iter_RandomRemove_InternalD(&amp;count, array[], size, start, ...)">
			<stacksize value="19"/>
			<dependency name="Iter_Random_Internal"/>
			<dependency name="Iter_Remove_InternalD"/>
			<dependency name="YVA2_DummyPush"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="...">
			</param>
			      <param name="slots">Number of multi-iterator values.</param>  <remarks>  Removes a random value from an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Random_Internal" syntax="Iter_Random_Internal(count, array[], start, ...)">
			<stacksize value="9"/>
			<referrer name="Iter_RandomRemove_InternalC"/>
			<referrer name="Iter_RandomRemove_InternalD"/>
			<dependency name="cellmin"/>
			<dependency name="random"/>
			<param name="count">
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="start">
				Size of the iterator.
			</param>
			<param name="...">
				Excluded elements.
			</param>
			        <remarks>  Returns a random value from an iterator.  If additional parameters are given they are excluded from consideration.  This allows you to chain calls to get multiple random values so follows:  new president     = Iter_Random(Player);  new vicePresident = Iter_Random(Player, president);  new primeMinister = Iter_Random(Player, president, vicePresident);  new minister      = Iter_Random(Player, president, vicePresident, primeMinister);  None of those values can be the same, and this saves horrible random-  dependent loops.  </remarks> 
		</member>
		<member name="M:Iter_Remove" syntax="Iter_Remove(iter[], value)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to remove data from.
			</param>
			<param name="value">
				Data to remove.
			</param>
			    <remarks>  Wrapper for Iter_RemoveInternal.  native Iter_Remove(Iterator:Name&lt;&gt;, value);  </remarks> 
		</member>
		<member name="M:Iter_Remove_InternalC" syntax="Iter_Remove_InternalC(&amp;count, array[], size, value)">
			<stacksize value="8"/>
			<referrer name="Iter_RandomRemove_InternalC"/>
			<referrer name="Iter_OPDCInternal"/>
			<referrer name="Iter_ActorDo"/>
			<referrer name="Iter_DestroyActor"/>
			<referrer name="Iter_VehicleDo"/>
			<referrer name="Iter_DestroyVehicle"/>
			<dependency name="Iter_SafeRemove_InternalC"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				iterator data.
			</param>
			<param name="size">
				Number of iterator elements.
			</param>
			<param name="value">
				Item to remove.
			</param>
			        <remarks>  Removes a value from an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Remove_InternalD" syntax="Iter_Remove_InternalD(&amp;count, array[], start, size, value)">
			<stacksize value="9"/>
			<referrer name="Iter_RandomRemove_InternalD"/>
			<dependency name="Iter_SafeRemove_InternalD"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="size">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:Iter_SafeRemove" syntax="Iter_SafeRemove(iter[], value, &amp;next)">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to remove data from.
			</param>
			<param name="value">
				Data to remove.
			</param>
			<param name="next">
				<paraminfo> &amp; </paraminfo>
				Container for the pointer to the next element.
			</param>
			      <remarks>  Wrapper for Iter_SafeRemoveInternal.  Common use:  Iter_SafeRemove(iter, i, i);  native Iter_SafeRemove(Iterator:Name&lt;&gt;, value, &amp;next);  </remarks> 
		</member>
		<member name="M:Iter_SafeRemove_InternalC" syntax="Iter_SafeRemove_InternalC(&amp;count, array[], size, value, &amp;last)">
			<stacksize value="1"/>
			<referrer name="Iter_Remove_InternalC"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
				Number of items in the iterator.
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
				Iterator data.
			</param>
			<param name="size">
				Number of iterator elements.
			</param>
			<param name="value">
				Item to remove.
			</param>
			<param name="last">
				<paraminfo> &amp; </paraminfo>
				Pointer in which to store the last pointer.
			</param>
			          <remarks>  Removes a value from an iterator safely.  </remarks> 
		</member>
		<member name="M:Iter_SafeRemove_InternalD" syntax="Iter_SafeRemove_InternalD(&amp;count, array[], start, size, value, &amp;last)">
			<stacksize value="1"/>
			<referrer name="Iter_Remove_InternalD"/>
			<dependency name="cellmin"/>
			<param name="count">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="size">
			</param>
			<param name="value">
			</param>
			<param name="last">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:Iter_Size" syntax="Iter_Size(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the size of.
			</param>
			  <remarks>  Accesses the size of an iterator.  </remarks> 
		</member>
		<member name="M:Iter_Starts" syntax="Iter_Starts(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the true starts of.
			</param>
			  <remarks>  Accesses the number of starts in a multi-iterator.  </remarks> 
		</member>
		<member name="M:Iter_TrueArray" syntax="Iter_TrueArray(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the true array of.
			</param>
			  <remarks>  Accesses the internal array of an iterator.  </remarks> 
		</member>
		<member name="M:Iter_TrueCount" syntax="Iter_TrueCount(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the true count of.
			</param>
			  <remarks>  Accesses the internal count of an iterator.  </remarks> 
		</member>
		<member name="M:Iter_TrueMulti" syntax="Iter_TrueMulti(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Multi iterator to get the true count of.
			</param>
			  <remarks>  Accesses the internal count of a multi-iterator.  </remarks> 
		</member>
		<member name="M:Iter_TrueSize" syntax="Iter_TrueSize(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Name of the iterator to get the true size of.
			</param>
			  <remarks>  Accesses the internal size of an iterator.  </remarks> 
		</member>
		<member name="M:Iter_VehicleDo" syntax="Iter_VehicleDo(add, vehicleid)">
			<stacksize value="7"/>
			<referrer name="@@Iter_VehicleDo"/>
			<dependency name="operator*(_no_itertag:,_:)"/>
			<dependency name="FALSE"/>
			<dependency name="Iter_Add_InternalC"/>
			<dependency name="Iter_Remove_InternalC"/>
			<dependency name="Iter_Single@Vehicle"/>
			<dependency name="Iterator@Vehicle"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:Iter_YieldEnter" syntax="Iter_YieldEnter()">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="Debug_Print0"/>
			<dependency name="YSI_gIteratorDepth"/>
			<dependency name="YSI_g_sIteratorStack"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<remarks>  </remarks> 
		</member>
		<member name="M:Iter_YieldLoop" syntax="Iter_YieldLoop()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="E_ITER_YIELD_FIRST"/>
			<dependency name="E_ITER_YIELD_STACK_SIZE"/>
			<dependency name="YSI_gIteratorDepth"/>
			<dependency name="YSI_g_sIteratorStack"/>
			<dependency name="YSI_g_sIteratorStack"/>
			<dependency name="YSI_g_sPtr"/>
			<dependency name="YSI_g_sStackPtr"/>
			<dependency name="false"/>
			<dependency name="memcpy"/>
			<dependency name="true"/>
		</member>
		<member name="M:Iter_YieldReturn" syntax="Iter_YieldReturn(value)">
			<stacksize value="1"/>
			<dependency name="I@"/>
			<dependency name="YSI_gIteratorDepth"/>
			<dependency name="YSI_g_sIteratorStack"/>
			<dependency name="YSI_g_sPtr"/>
			<dependency name="YSI_g_sStackPtr"/>
			<dependency name="memcpy"/>
			<param name="value">
			</param>
		</member>
		<member name="M:Iterator" syntax="Iterator(name)">
			<tagname value="Iterator"/>
			<stacksize value="1"/>
			<param name="name">
			</param>
			<remarks>  Creates a new iterator start/array pair.  </remarks> 
		</member>
		<member name="M:Iterator@Reverse" syntax="Iterator@Reverse(iter[])">
			<stacksize value="1"/>
			<param name="iter">
				<paraminfo>Iterator [] </paraminfo>
				Iterator to run backwards.
			</param>
			  <remarks>  Run an iterator backwards.  </remarks> 
		</member>
		<member name="M:Kick" syntax="Kick(playerid)">
			<attribute name="native"/>
			<referrer name="t_Kick"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="KickLogin"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to kick
			</param>
			<summary>Kicks a player from the server. They will have to quit the game and re-connect if they wish to continue playing.</summary>  <seealso name="Ban"/> <seealso name="BanEx"/> <remarks>As of <b>SA-MP 0.3x</b>, any action taken directly before Kick() (such as sending a message with <a href="#SendClientMessage">SendClientMessage</a>) will not reach the player. A timer must be used to delay the kick.</remarks> <returns>This function always returns <b><c>1</c></b>, even if the function failed to execute (player specified doesn't exist).</returns>
		</member>
		<member name="M:KickDelay" syntax="KickDelay(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:KickLogin" syntax="KickLogin(playerid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="Kick"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:KillTimer" syntax="KillTimer(timerid)">
			<attribute name="native"/>
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="WC_DestroyVehicle"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="OnVehicleSpawn"/>
			<referrer name="OnVehicleDeath"/>
			<referrer name="ScriptExit"/>
			<referrer name="PlayerDeath"/>
			<referrer name="OnPlayerDeathFinished"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="_Timer_I"/>
			<referrer name="_Timer_D"/>
			<referrer name="_Timer_F"/>
			<referrer name="_y_utils_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="@yH_OnGameModeExit@010"/>
			<referrer name="@yH_OnPlayerDisconnect@011"/>
			<referrer name="OnDuelTimer"/>
			<referrer name="OnDialogResponse"/>
			<param name="timerid">
				The ID of the timer to kill (returned by <a href="#SetTimer">SetTimer</a> or <a href="#SetTimerEx">SetTimerEx</a>)
			</param>
			<summary>Kills (stops) a running timer.</summary>  <seealso name="SetTimer"/> <seealso name="SetTimerEx"/> <returns>This function always returns <b><c>0</c></b>.</returns>
		</member>
		<member name="M:L@" syntax="L@(ret, ...)">
			<stacksize value="8"/>
			<referrer name="@@Iter_ActorDo"/>
			<referrer name="@@Iter_VehicleDo"/>
			<dependency name="YSI_g_sPropReturn"/>
			<dependency name="YSI_g_sPropVarArg"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<dependency name="setproperty"/>
			<param name="ret">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:LevenshteinDistance" syntax="LevenshteinDistance(a[], b[])">
			<stacksize value="9"/>
			<dependency name="Debug_Print0"/>
			<dependency name="DoLevenshteinDistance"/>
			<dependency name="strcmp"/>
			<dependency name="strlen"/>
			<param name="a">
				<paraminfo> [] </paraminfo>
				First string to compare.
			</param>
			<param name="b">
				<paraminfo> [] </paraminfo>
				Second string to compare.
			</param>
			    <returns>  The levenshtein difference (0 if the same).  </returns> 
		</member>
		<member name="M:LoadModelSelectionMenu" syntax="LoadModelSelectionMenu(f_name[])">
			<stacksize value="237"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="false"/>
			<dependency name="floatstr"/>
			<dependency name="fopen"/>
			<dependency name="format"/>
			<dependency name="fread"/>
			<dependency name="gItemAmount"/>
			<dependency name="gItemList"/>
			<dependency name="gItemList"/>
			<dependency name="gListAmount"/>
			<dependency name="gLists"/>
			<dependency name="gLists"/>
			<dependency name="gRotZoom"/>
			<dependency name="gRotZoom"/>
			<dependency name="gRotZoomAmount"/>
			<dependency name="io_read"/>
			<dependency name="mS_strtok"/>
			<dependency name="print"/>
			<dependency name="printf"/>
			<dependency name="strval"/>
			<dependency name="true"/>
			<param name="f_name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:Loaded" syntax="Loaded(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:Loading" syntax="Loading(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:MP_OPC" syntax="MP_OPC(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="SetTimerEx"/>
			<dependency name="rAgcCheckTimer"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_ResetPlayerWeapons"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:MP_OPCPTD" syntax="MP_OPCPTD(playerid, playertextid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="playertextid">
				<paraminfo>PlayerText </paraminfo>
			</param>
		</member>
		<member name="M:MP_OPCTD" syntax="MP_OPCTD(playerid, clickedid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="clickedid">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:MakePlayerFacePlayer" syntax="MakePlayerFacePlayer(playerid, targetid, opposite, forcesync)">
			<stacksize value="14"/>
			<referrer name="InflictDamage"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="AngleBetweenPoints"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="UpdateSyncData"/>
			<param name="playerid">
			</param>
			<param name="targetid">
			</param>
			<param name="opposite">
			</param>
			<param name="forcesync">
			</param>
		</member>
		<member name="M:Malloc_Allocate" syntax="Malloc_Allocate(size, clear)">
			<tagname value="Alloc"/>
			<stacksize value="10"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="calloc"/>
			<referrer name="realloc"/>
			<referrer name="Timer_GetSingleSlot"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="__YSI_g_sHeapStart"/>
			<dependency name="__YSI_g_sUnusedStart"/>
			<dependency name="memset"/>
			<param name="size">
				Ammount of memory to allocate IN CELLS.
			</param>
			<param name="clear">
				<paraminfo>bool </paraminfo>
			</param>
			  <param name="cleat">Blank the memory?</param>  <returns>  Memory identifier.  </returns>  <remarks>  The size check should never fail, if there's only 1 cell  extra somewhere just sneak it onto the end of an array,  if the user does proper bounds checking it shouldn't  matter.  Implementation code for <symbolref name="malloc" />.  This code will find an area in memory with sufficient  space to store the given data and   </remarks> 
		</member>
		<member name="M:Malloc_Free" syntax="Malloc_Free(slot)">
			<stacksize value="5"/>
			<referrer name="realloc"/>
			<referrer name="_Timer_F"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="__YSI_g_sHeapStart"/>
			<dependency name="__YSI_g_sUnusedStart"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Memory allocation unit to release
			</param>
			  <remarks>  Implementation code for <symbolref name="free" />.  </remarks> 
		</member>
		<member name="M:Malloc_Get" syntax="Malloc_Get(array, index)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to get information from.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			    <returns>  Data.  </returns>  <remarks>  Displays errors in secure mode.  </remarks> 
		</member>
		<member name="M:Malloc_GetA" syntax="Malloc_GetA(target[], length, array, index)">
			<stacksize value="8"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="memcpy"/>
			<param name="target">
				<paraminfo> [] </paraminfo>
				Target for the array.
			</param>
			<param name="length">
				Length of the target.
			</param>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			        <remarks>  Displays errors in secure mode.  Gets an array.  </remarks> 
		</member>
		<member name="M:Malloc_GetData" syntax="Malloc_GetData(slot, index)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				The allocation unit to get data from.
			</param>
			<param name="index">
				The location in the unit to get.
			</param>
			    <returns>  The data  </returns>  <remarks>  Basically like <symbolref name="Malloc_Get" /> but used internally.  </remarks> 
		</member>
		<member name="M:Malloc_GetS" syntax="Malloc_GetS(target[], length, array, index, pack)">
			<stacksize value="5"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="strpack"/>
			<dependency name="strunpack"/>
			<param name="target">
				<paraminfo> [] </paraminfo>
				Target for the string.
			</param>
			<param name="length">
				Length of the target.
			</param>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				Return the string packed?
			</param>
			          <remarks>  Displays errors in secure mode.  Gets a string.  </remarks> 
		</member>
		<member name="M:Malloc_GetSlotSize" syntax="Malloc_GetSlotSize(slot)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Allocation unit to get the size of.
			</param>
			  <returns>  The size.  </returns> 
		</member>
		<member name="M:Malloc_NewS" syntax="Malloc_NewS(string[], pack)">
			<tagname value="Alloc"/>
			<stacksize value="7"/>
			<dependency name="Malloc_Allocate"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="false"/>
			<dependency name="strlen"/>
			<dependency name="strpack"/>
			<dependency name="strunpack"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The string to store.
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				Whether or not the string will be packed.
			</param>
			    <returns>  0 on fail or a data handle on sucess.  </returns>  <remarks>  Allocates a new piece of memory with enough space to store the given string.  </remarks> 
		</member>
		<member name="M:Malloc_NextSlot" syntax="Malloc_NextSlot(slot)">
			<stacksize value="1"/>
			<param name="slot">
				The unit to get the one after of.
			</param>
			  <remarks>  Gets the next free block of memory after the current one.  </remarks> 
		</member>
		<member name="M:Malloc_OnCodeInit" syntax="Malloc_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="YSI_g_sInitialised"/>
			<dependency name="YVA2_Initalise"/>
		</member>
		<member name="M:Malloc_Reconcile" syntax="Malloc_Reconcile(addr)">
			<tagname value="Alloc"/>
			<stacksize value="1"/>
			<dependency name="YSI_gMallocMemory"/>
			<param name="addr">
				<paraminfo>ResolvedAlloc </paraminfo>
				Memory address to find
			</param>
			  <remarks>  Transforms a memory address in to a memory slot.  </remarks> 
		</member>
		<member name="M:Malloc_Resolve" syntax="Malloc_Resolve(slot)">
			<tagname value="ResolvedAlloc"/>
			<stacksize value="1"/>
			<dependency name="YSI_gMallocMemory"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Memory allocation unit to find
			</param>
			  <remarks>  Transforms a memory slot in to a memory address.  </remarks> 
		</member>
		<member name="M:Malloc_Set" syntax="Malloc_Set(array, index, value)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="value">
				Value to insert
			</param>
			      <remarks>  Displays errors in secure mode.  </remarks> 
		</member>
		<member name="M:Malloc_SetA" syntax="Malloc_SetA(array, index, str[], len)">
			<stacksize value="8"/>
			<referrer name="_Timer_A"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="memcpy"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Array to insert.
			</param>
			<param name="len">
				Length of the array.
			</param>
			        <remarks>  Displays errors in secure mode.  Inserts an array.  </remarks> 
		</member>
		<member name="M:Malloc_SetData" syntax="Malloc_SetData(slot, index, value)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				The allocation unit to set in.
			</param>
			<param name="index">
				Where in the unit to set.
			</param>
			<param name="value">
				The value to save.
			</param>
			     
		</member>
		<member name="M:Malloc_SetS" syntax="Malloc_SetS(array, index, str[], pack)">
			<stacksize value="6"/>
			<referrer name="_Timer_S"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="cellmax"/>
			<dependency name="strlen"/>
			<dependency name="strpack"/>
			<dependency name="strunpack"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to insert
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				Should the string be packed in?
			</param>
			        <remarks>  Displays errors in secure mode.  Inserts a string.  </remarks> 
		</member>
		<member name="M:Malloc_SetSlotSize" syntax="Malloc_SetSlotSize(slot, size)">
			<stacksize value="1"/>
			<param name="slot">
				The allocation unit to set the size of.
			</param>
			<param name="size">
				The size to set it to.
			</param>
			   
		</member>
		<member name="M:Malloc_SetVAA" syntax="Malloc_SetVAA(array, index, arg)">
			<stacksize value="2"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="memcpy"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="arg">
				Offset in the stack of the array to store.
			</param>
			      <remarks>  Inserts an array by stack offset for use in vararg functions.  </remarks> 
		</member>
		<member name="M:Malloc_SetVAS" syntax="Malloc_SetVAS(array, index, arg)">
			<stacksize value="2"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="strcat"/>
			<dependency name="strlen"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="arg">
				Offset in the stack of the string to store.
			</param>
			      <remarks>  Inserts a string by stack offset for use in vararg functions.  </remarks> 
		</member>
		<member name="M:Malloc_SlotSize" syntax="Malloc_SlotSize(slot)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Allocation unit to get the size of.
			</param>
			  <returns>  The size.  </returns> 
		</member>
		<member name="M:Mean" syntax="Mean(arr[], num)">
			<stacksize value="5"/>
			<dependency name="Sum"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array whose values need averaging.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <returns>  The mathematical mean value of the array.  </returns> 
		</member>
		<member name="M:Median" syntax="Median(arr[], num)">
			<stacksize value="5"/>
			<dependency name="Utils_PreSort"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array whose values need averaging.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <returns>  The mathematical median value of the array.  </returns> 
		</member>
		<member name="M:Mode" syntax="Mode(arr[], num)">
			<stacksize value="6"/>
			<dependency name="Utils_PreSort"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array whose values need averaging.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <returns>  The mathematical modal value of the array.  </returns> 
		</member>
		<member name="M:NOT_IN_RANGE" syntax="NOT_IN_RANGE(value, lower, upper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="value">
				The number to compare.
			</param>
			<param name="lower">
				The lower limit.
			</param>
			<param name="upper">
				The upper limit.
			</param>
			      <returns>  Is the value outside the given range.  </returns>  <remarks>  Equivalent to:  <code>		(%1) &lt;= (%0) &lt; (%2)</code>  </remarks> 
		</member>
		<member name="M:NetStats_PacketLossPercent" syntax="NetStats_PacketLossPercent(playerid)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="pc_cmd_pl"/>
			<param name="playerid">
				The ID of the player to get the data from
			</param>
			<summary>Gets the packet loss percentage of a player. Packet loss means data the player is sending to the server is being lost (or vice-versa).</summary>  <seealso name="GetPlayerNetworkStats"/> <seealso name="GetNetworkStats"/> <seealso name="NetStats_GetConnectedTime"/> <seealso name="NetStats_MessagesReceived"/> <seealso name="NetStats_BytesReceived"/> <seealso name="NetStats_MessagesSent"/> <seealso name="NetStats_BytesSent"/> <seealso name="NetStats_MessagesRecvPerSecond"/> <seealso name="NetStats_ConnectionStatus"/> <seealso name="NetStats_GetIpPort"/> <remarks>This function was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <remarks>Anything greater than 0.0% should already be a cause of concern. Anything greater than 1.0% is outright bad.</remarks> <remarks>This function has been found to be currently unreliable the output is not as expected when compared to the client. Therefore this function should not be used as a packet loss kicker. </remarks> <remarks>A more accurate packetloss function can be found here: <a href="http://forum.sa-mp.com/showpost.php?p=2488911&amp;postcount=984">http://forum.sa-mp.com/showpost.php?p=2488911&amp;postcount=984</a></remarks> <returns>The percentage packet loss as a float. <b><c>0.0</c></b> if player not connected.</returns>
		</member>
		<member name="M:NtCompare" syntax="NtCompare(s1, s2[])">
			<stacksize value="8"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetTagIndexFromName"/>
			<dependency name="ReadAmxMemory"/>
			<param name="s1">
			</param>
			<param name="s2">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:NtCopy" syntax="NtCopy(src, dest[], size)">
			<stacksize value="6"/>
			<referrer name="GetPublicNameFromIndex"/>
			<referrer name="GetNativeNameFromIndex"/>
			<referrer name="GetPubVarNameFromIndex"/>
			<referrer name="GetTagNameFromIndex"/>
			<dependency name="ReadAmxMemory"/>
			<param name="src">
			</param>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:O@" syntax="O@(function[], time, repeat, format[], ...)">
			<attribute name="native"/>
			<referrer name="Yield_OnCodeInit"/>
			<referrer name="_Timer_I"/>
			<referrer name="_Timer_D"/>
			<referrer name="t_Kick_yT@"/>
			<param name="function">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="time">
			</param>
			<param name="repeat">
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:O@A_" syntax="O@A_()">
			<tagname value="bool"/>
			<stacksize value="11"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<referrer name="YVA2_Initalise"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmGetOperandReloc"/>
			<dependency name="DisasmInit"/>
			<dependency name="DisasmNext"/>
			<dependency name="GetCurrentFrameReturn"/>
			<dependency name="O@V_"/>
			<dependency name="OP_CALL"/>
			<dependency name="false"/>
		</member>
		<member name="M:OnActorStreamIn" syntax="OnActorStreamIn(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor in
			</param>
			<summary>This callback is called when an actor is streamed in by a player's client.</summary>   <seealso name="OnActorStreamOut"/> <seealso name="OnPlayerStreamIn"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>It is always called first in filterscripts.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnActorStreamOut" syntax="OnActorStreamOut(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed out for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor out
			</param>
			<summary>This callback is called when an actor is streamed out by a player's client.</summary>   <seealso name="OnActorStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This function was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>It is always called first in filterscripts.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnClientCheckResponse" syntax="OnClientCheckResponse(playerid, actionid, memaddr, retndata)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player checked
			</param>
			<param name="actionid">
				The type of check performed
			</param>
			<param name="memaddr">
				The address requested
			</param>
			<param name="retndata">
				The result of the check
			</param>
			<summary>This callback is called when a SendClientCheck request comletes</summary>     <seealso name="SendClientCheck"/>
		</member>
		<member name="M:OnDialogResponse" syntax="OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="262"/>
			<dependency name="ClearFPlayer"/>
			<dependency name="DIALOG_REGISTER"/>
			<dependency name="D_ACODE"/>
			<dependency name="D_LOGIN"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerIp"/>
			<dependency name="GivePlayerMoney"/>
			<dependency name="Kick"/>
			<dependency name="KillTimer"/>
			<dependency name="LoggedIn"/>
			<dependency name="LoginTimer"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="PasswordCheck"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SQL"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="ShowEmailDialog"/>
			<dependency name="ShowLanguageDialog"/>
			<dependency name="ShowLoginTextDraws"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="ShowRegisterDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetSpawnInfo"/>
			<dependency name="WC_SpawnPlayer"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="format"/>
			<dependency name="getdate"/>
			<dependency name="gettime"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pACode"/>
			<dependency name="pAdmin"/>
			<dependency name="pCash"/>
			<dependency name="pDeaths"/>
			<dependency name="pKills"/>
			<dependency name="pLang"/>
			<dependency name="pPass"/>
			<dependency name="pRank"/>
			<dependency name="pSQLID"/>
			<dependency name="pSkin"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="regex_match"/>
			<dependency name="sscanf"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<dependency name="udb_hash"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
				The ID of the player that responded to the dialog
			</param>
			<param name="dialogid">
				The ID of the dialog the player responded to, assigned in ShowPlayerDialog
			</param>
			<param name="response">
				<b><c>1</c></b> for left button and <b><c>0</c></b> for right button (if only one button shown, always <b><c>1</c></b>)
			</param>
			<param name="listitem">
				The ID of the list item selected by the player (starts at <b><c>0</c></b>) (only if using a list style dialog)
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
				The text entered into the input box by the player or the selected list item text
			</param>
			<summary>This callback is called when a player responds to a dialog shown using <a href="#ShowPlayerDialog">ShowPlayerDialog</a> by either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).</summary>      <seealso name="ShowPlayerDialog"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>A player's dialog doesn't hide when the gamemode restarts, causing the server to print <c>"Warning: PlayerDialogResponse PlayerId: 0 dialog ID doesn't match last sent dialog ID"</c> if a player responded to this dialog after restart.</remarks> <remarks>Parameters can contain different values, based on dialog's <a href="http://wiki.sa-mp.com/wiki/Dialog_Styles">style</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will pass the dialog to another script in case no matching code were found in your gamemode's callback.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnDuelTimer" syntax="OnDuelTimer(targetid)">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="E_COUNTDOWN"/>
			<dependency name="E_PLAYER"/>
			<dependency name="E_TIMER"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="KillTimer"/>
			<dependency name="PlayerPlaySound"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="format"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="szSmallString"/>
			<param name="targetid">
			</param>
		</member>
		<member name="M:OnDynamicActorStreamIn" syntax="OnDynamicActorStreamIn(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicActorStreamOut" syntax="OnDynamicActorStreamOut(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicObjectMoved" syntax="OnDynamicObjectMoved(objectid)">
			<stacksize value="1"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:OnEnterExitModShop" syntax="OnEnterExitModShop(playerid, enterexit, interiorid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered or exited the modshop
			</param>
			<param name="enterexit">
				<b><c>1</c></b> if the player entered or <b><c>0</c></b> if they exited
			</param>
			<param name="interiorid">
				The interior ID of the modshop that the player is entering (or 0 if exiting)
			</param>
			<summary>This callback is called when a player enters or exits a mod shop.</summary>    <seealso name="OnVehicleMod"/> <seealso name="OnVehicleRespray"/> <seealso name="OnVehiclePaintjob"/> <seealso name="AddVehicleComponent"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Players collide when they get into the same mod shop.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnFilterScriptExit" syntax="OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptExit"/>
			<summary>This callback is called when a filterscript is unloaded. It is only called inside the filterscript which is unloaded.</summary> <seealso name="OnFilterScriptInit"/> <seealso name="OnGameModeInit"/> <seealso name="OnGameModeExit"/> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnFilterScriptInit" syntax="OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptInit"/>
			<summary>This callback is called when a filterscript is initialized (loaded). It is only called inside the filterscript which is starting.</summary> <seealso name="OnFilterScriptExit"/> <seealso name="OnGameModeInit"/> <seealso name="OnGameModeExit"/> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnGameModeExit" syntax="OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptExit"/>
			<summary>This callback is called when a gamemode ends, either through 'gmx', the server being shut down, or <a href="#GameModeExit">GameModeExit</a>.</summary> <seealso name="OnGameModeInit"/> <seealso name="OnFilterScriptExit"/> <seealso name="OnFilterScriptInit"/> <seealso name="GameModeExit"/> <remarks>This function can also be used in a filterscript to detect if the gamemode changes with RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks> <remarks>When using OnGameModeExit in conjunction with the 'rcon gmx' console command keep in mind there is a potential for client bugs to occur an example of this is excessive <a href="#RemoveBuildingForPlayer">RemoveBuildingForPlayer</a> calls during OnGameModeInit which could result in a client crash. </remarks> <remarks>This callback will NOT be called if the server crashes or the process is killed by other means, such as using the Linux kill command or pressing the close-button on the Windows console. </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnGameModeInit" syntax="OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptInit"/>
			<summary>This callback is triggered when the gamemode starts.</summary> <seealso name="OnGameModeExit"/> <seealso name="OnFilterScriptInit"/> <seealso name="OnFilterScriptExit"/> <remarks>This function can also be used in a filterscript to detect if the gamemode changes with RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnIncomingConnection" syntax="OnIncomingConnection(playerid, ip_address[], port)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player attempting to connect
			</param>
			<param name="ip_address">
				<paraminfo> [] </paraminfo>
				The IP address of the player attempting to connect
			</param>
			<param name="port">
				The port of the attempted connection
			</param>
			<summary>This callback is called when an IP address attempts a connection to the server. To block incoming connections, use <a href="#BlockIpAddress">BlockIpAddress</a>.</summary>    <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <seealso name="OnPlayerFinishedDownloading"/> <seealso name="BlockIpAddress"/> <seealso name="UnBlockIpAddress"/> <remarks> 	This callback was added in <b>SA-MP 0.3z R2-2</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnInvalidWeaponDamage" syntax="OnInvalidWeaponDamage(playerid, damagedid, amount, weaponid, bodypart, error, given)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="playerid">
			</param>
			<param name="damagedid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
			<param name="error">
			</param>
			<param name="given">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:OnJITCompile" syntax="OnJITCompile()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="Debug_Print0"/>
			<dependency name="ScriptInit_CallOnCodeInit"/>
			<dependency name="ScriptInit_OnJITCompile"/>
			<dependency name="YSI_g_sCodeJITed"/>
			<dependency name="YSI_g_sCodeJITing"/>
			<dependency name="true"/>
			<transition target="_ALS_go"/>

		</member>
		<member name="M:OnObjectMoved" syntax="OnObjectMoved(objectid)">
			<stacksize value="1"/>
			<param name="objectid">
				The ID of the object that was moved
			</param>
			<summary>This callback is called when an object is moved after <a href="#MoveObject">MoveObject</a> (when it stops moving).</summary>  <seealso name="MoveObject"/> <seealso name="IsObjectMoving"/> <seealso name="StopObject"/> <seealso name="OnPlayerObjectMoved"/> <remarks><a href="#SetObjectPos">SetObjectPos</a> does not work when used in this callback. To fix it, recreate the object.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerClickMap" syntax="OnPlayerClickMap(playerid, fX, fY, fZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that placed a target/waypoint
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X float coordinate where the player clicked
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y float coordinate where the player clicked
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z float coordinate where the player clicked (inaccurate - see note below)
			</param>
			<summary>OnPlayerClickMap is called when a player places a target/waypoint on the pause menu map (by right-clicking).</summary>     <seealso name="SetPlayerPos"/> <seealso name="SetPlayerPosFindZ"/> <seealso name="GetPlayerPos"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks>The Z value returned will be <b><c>0</c></b> (invalid) if it is far away from the player; use the <a href="http://forum.sa-mp.com/showthread.php?t=275492">MapAndreas plugin</a> to get a more accurate Z coordinate.</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerClickPlayer" syntax="OnPlayerClickPlayer(playerid, clickedplayerid, source)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked on a player on the scoreboard
			</param>
			<param name="clickedplayerid">
				The ID of the player that was clicked on
			</param>
			<param name="source">
				The source of the player's click
			</param>
			<summary>Called when a player double-clicks on a player on the scoreboard.</summary>    <seealso name="OnPlayerClickTextDraw"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>There is currently only one <paramref name="source"/> (<b><c>0 - CLICK_SOURCE_SCOREBOARD</c></b>). The existence of this argument suggests that more sources may be supported in the future.</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerClickPlayerTextDraw" syntax="OnPlayerClickPlayerTextDraw(playerid, playertextid)">
			<attribute name="public"/>
			<stacksize value="14"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="GetPVarInt"/>
			<dependency name="GetTickCount"/>
			<dependency name="HideModelSelectionMenu"/>
			<dependency name="PlayerPlaySound"/>
			<dependency name="SetPVarInt"/>
			<dependency name="gCancelButtonTextDrawId"/>
			<dependency name="gNextButtonTextDrawId"/>
			<dependency name="gPrevButtonTextDrawId"/>
			<dependency name="gSelectionItems"/>
			<dependency name="gSelectionItemsTag"/>
			<dependency name="mS_GetNumberOfPages"/>
			<dependency name="mS_GetNumberOfPagesEx"/>
			<dependency name="mS_GetPlayerCurrentListID"/>
			<dependency name="mS_ShowPlayerMPs"/>
			<dependency name="mS_UpdatePageTextDraw"/>
			<param name="playerid">
				The ID of the player that selected a textdraw
			</param>
			<param name="playertextid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw that the player selected
			</param>
			<summary>This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select mode (ESC) - however, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> is.</summary>   <seealso name="PlayerTextDrawSetSelectable"/> <seealso name="OnPlayerClickTextDraw"/> <seealso name="OnPlayerClickPlayer"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>When a player presses ESC to cancel selecting a textdraw, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a> is called with a textdraw ID of <b><c>INVALID_TEXT_DRAW</c></b>. <a href="#OnPlayerClickPlayerTextDraw">OnPlayerClickPlayerTextDraw</a> won't be called also.</remarks> <returns> Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts. This should be used to signal that the textdraw on which they clicked was 'found' and no further processing is needed. You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found, just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerClickTextDraw" syntax="OnPlayerClickTextDraw(playerid, clickedid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="GetPVarInt"/>
			<dependency name="PlayerPlaySound"/>
			<dependency name="SetPVarInt"/>
			<dependency name="mS_DestroySelectionMenu"/>
			<dependency name="mS_GetPlayerCurrentListID"/>
			<param name="playerid">
				The ID of the player that clicked on the textdraw
			</param>
			<param name="clickedid">
				<paraminfo>Text </paraminfo>
				The ID of the clicked textdraw. <b><c>INVALID_TEXT_DRAW</c></b> if selection was cancelled
			</param>
			<summary>This callback is called when a player clicks on a textdraw or cancels the select mode with the Escape key.</summary>   <seealso name="OnPlayerClickPlayerTextDraw"/> <seealso name="OnPlayerClickPlayer"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>The clickable area is defined by <a href="#TextDrawTextSize">TextDrawTextSize</a>. The x and y parameters passed to that function must not be zero or negative. </remarks> <remarks>Do not use <a href="#CancelSelectTextDraw">CancelSelectTextDraw</a> unconditionally within this callback. This results in an infinite loop. </remarks> <returns> Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts. This should be used to signal that the textdraw on which they clicked was 'found' and no further processing is needed. You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found, just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerCommandPerformed" syntax="OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="pLang"/>
			<dependency name="printf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="cmd">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="result">
			</param>
			<param name="flags">
			</param>
		</member>
		<member name="M:OnPlayerCommandReceived" syntax="OnPlayerCommandReceived(playerid, cmd[], params[], flags)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="GetTickCount"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="false"/>
			<dependency name="gtc_Cmd"/>
			<dependency name="pAdmin"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="cmd">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="flags">
			</param>
		</member>
		<member name="M:OnPlayerCommandText" syntax="OnPlayerCommandText(playerid, cmdtext[])">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered a command
			</param>
			<param name="cmdtext">
				<paraminfo> [] </paraminfo>
				The command that was entered (including the forward slash)
			</param>
			<summary>This callback is called when a player enters a command into the client chat window. Commands are anything that start with a forward slash, e.g. <c>/help</c>.</summary>   <seealso name="OnPlayerText"/> <seealso name="OnRconCommand"/> <seealso name="SendRconCommand"/> <remarks>This callback can also be called by NPC.</remarks> <returns> Return <b><c>1</c></b> if the command was processed, otherwise <b><c>0</c></b>; If the command was not found both in filterscripts and in gamemode, the player will be received a message: <em>SERVER: Unknown command</em>.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerConnect" syntax="OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetTickCount"/>
			<dependency name="RemoveDefaultVendingMachines"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetPlayerTeam"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Time"/>
			<dependency name="false"/>
			<dependency name="s_AlreadyConnected"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_CbugAllowed"/>
			<dependency name="s_CbugFroze"/>
			<dependency name="s_CbugGlobal"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsGiven"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedHitsTaken"/>
			<dependency name="s_DamageFeedLastUpdate"/>
			<dependency name="s_DamageFeedPlayer"/>
			<dependency name="s_DamageFeedTimer"/>
			<dependency name="s_DeathSkip"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_DelayedDeathTimer"/>
			<dependency name="s_FirstSpawn"/>
			<dependency name="s_ForceClassSelection"/>
			<dependency name="s_HealthBarVisible"/>
			<dependency name="s_HitsIssued"/>
			<dependency name="s_InClassSelection"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastAnim"/>
			<dependency name="s_LastExplosive"/>
			<dependency name="s_LastHitIdx"/>
			<dependency name="s_LastSentArmour"/>
			<dependency name="s_LastSentHealth"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShotIdx"/>
			<dependency name="s_LastStop"/>
			<dependency name="s_LastUpdate"/>
			<dependency name="s_LastVehicleEnterTime"/>
			<dependency name="s_LastVehicleTick"/>
			<dependency name="s_LastZ"/>
			<dependency name="s_LastZVelo"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerClass"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxArmour"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_PlayerTeam"/>
			<dependency name="s_PreviousHitI"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHits"/>
			<dependency name="s_RejectedHitsIdx"/>
			<dependency name="s_ShotsFired"/>
			<dependency name="s_SpawnForStreamedIn"/>
			<dependency name="s_SpawnInfoModified"/>
			<dependency name="s_Spectating"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="s_World"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that connected
			</param>
			<summary>This callback is called when a player connects to the server.</summary>  <seealso name="OnPlayerDisconnect"/> <seealso name="OnIncomingConnection"/> <seealso name="OnPlayerFinishedDownloading"/> <remarks>This callback can also be called by NPC.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerDamage" syntax="OnPlayerDamage(&amp;playerid, &amp;amount, &amp;issuerid, &amp;weapon, &amp;bodypart)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
			<param name="playerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="amount">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="issuerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="weapon">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="bodypart">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerDamageDone" syntax="OnPlayerDamageDone(playerid, amount, issuerid, weapon, bodypart)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
			<dependency name="DamageFeedAddHitGiven"/>
			<dependency name="DamageFeedAddHitTaken"/>
			<dependency name="GetLastDamageArmour"/>
			<dependency name="GetLastDamageHealth"/>
			<dependency name="GetTickCount"/>
			<dependency name="IsHighRateWeapon"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="PlayerPlaySound"/>
			<dependency name="e_Amount"/>
			<dependency name="e_Armour"/>
			<dependency name="e_Bodypart"/>
			<dependency name="e_Health"/>
			<dependency name="e_Issuer"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Weapon"/>
			<dependency name="s_DamageGivenSound"/>
			<dependency name="s_DamageTakenSound"/>
			<dependency name="s_PreviousHitI"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_Spectating"/>
			<param name="playerid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="issuerid">
			</param>
			<param name="weapon">
			</param>
			<param name="bodypart">
			</param>
		</member>
		<member name="M:OnPlayerDeath" syntax="OnPlayerDeath(playerid, killerid, reason)">
			<attribute name="public"/>
			<stacksize value="77"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="ForceClassSelection"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSkin"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetVehicleZAngle"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="HasSameTeam"/>
			<dependency name="IsPlayerStreamedIn"/>
			<dependency name="KillTimer"/>
			<dependency name="OnPlayerDamage"/>
			<dependency name="OnPlayerDamageDone"/>
			<dependency name="OnPlayerDeathFinished"/>
			<dependency name="OnPlayerPrepareDeath"/>
			<dependency name="SaveSyncData"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="SetSpawnInfo"/>
			<dependency name="SpawnPlayerInPlace"/>
			<dependency name="TogglePlayerControllable"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="WasPlayerInVehicle"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_DamageDoneArmour"/>
			<dependency name="s_DamageDoneHealth"/>
			<dependency name="s_DeathSkip"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_ForceClassSelection"/>
			<dependency name="s_InClassSelection"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastVehicleShooter"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that died
			</param>
			<param name="killerid">
				The ID of the player that killed the player who died, or <b><c>INVALID_PLAYER_ID</c></b> if there was none
			</param>
			<param name="reason">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> for the player's death
			</param>
			<summary>This callback is called when a player dies, either by suicide or by being killed by another player.</summary>    <seealso name="OnPlayerSpawn"/> <seealso name="SendDeathMessage"/> <seealso name="SetPlayerHealth"/> <remarks> The reason will return 37 (flame thrower) from any fire sources (e.g. molotov, 18)<p/> The reason will return 51 from any weapon that creates an explosion (e.g. RPG, grenade)<p/> You do not need to check whether killerid is valid before using it in <a href="#SendDeathMessage">SendDeathMessage</a>. <b><c>INVALID_PLAYER_ID</c></b> is a valid killerid ID parameter in that function.<p/> <b>playerid</b> is the only one who can call the callback. (good to know for anti fake death) </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerDeathFinished" syntax="OnPlayerDeathFinished(playerid, cancelable)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="KillTimer"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<param name="playerid">
			</param>
			<param name="cancelable">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerDisconnect" syntax="OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="KillTimer"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="SetHealthBarVisible"/>
			<dependency name="e_Issuer"/>
			<dependency name="false"/>
			<dependency name="s_DamageFeedGiven"/>
			<dependency name="s_DamageFeedTaken"/>
			<dependency name="s_DamageFeedTimer"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_DelayedDeathTimer"/>
			<dependency name="s_HealthBarForeground"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_KnifeTimeout"/>
			<dependency name="s_LastVehicleShooter"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_Spectating"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that disconnected
			</param>
			<param name="reason">
				The reason for the disconnection. See table below
			</param>
			<summary>This callback is called when a player disconnects from the server.</summary>   <seealso name="OnPlayerConnect"/> <seealso name="OnIncomingConnection"/> <seealso name="OnPlayerFinishedDownloading"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>Some functions might not work correctly when used in this callback because the player is already disconnected when the callback is called. This means that you can't get unambiguous information from functions like <a href="#GetPlayerIp">GetPlayerIp</a> and <a href="#GetPlayerPos">GetPlayerPos</a>.</remarks> <remarks> <b>Reasons:</b><p/> <ul> <li><b><c>0</c></b> - timeout/Crash - the player's connection was lost. Either their game crashed or their network had a fault.</li> <li><b><c>1</c></b> - quit - the player purposefully quit, either using the <b><c>/quit (/q)</c></b> command or via the pause menu.</li> <li><b><c>2</c></b> - kick/ban - the player was kicked or banned by the server.</li> </ul> </remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEditAttachedObject" syntax="OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that ended edition mode
			</param>
			<param name="response">
				<b><c>0</c></b> if they cancelled (ESC) or <b><c>1</c></b> if they clicked the save icon
			</param>
			<param name="index">
				The index of the attached object
			</param>
			<param name="modelid">
				The model of the attached object that was edited
			</param>
			<param name="boneid">
				The bone of the attached object that was edited
			</param>
			<param name="fOffsetX">
				<paraminfo>Float </paraminfo>
				The X offset for the attached object that was edited
			</param>
			<param name="fOffsetY">
				<paraminfo>Float </paraminfo>
				The Y offset for the attached object that was edited
			</param>
			<param name="fOffsetZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the attached object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation for the attached object that was edited
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation for the attached object that was edited
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation for the attached object that was edited
			</param>
			<param name="fScaleX">
				<paraminfo>Float </paraminfo>
				The X scale for the attached object that was edited
			</param>
			<param name="fScaleY">
				<paraminfo>Float </paraminfo>
				The Y scale for the attached object that was edited
			</param>
			<param name="fScaleZ">
				<paraminfo>Float </paraminfo>
				The Z scale for the attached object that was edited
			</param>
			<summary>This callback is called when a player ends attached object edition mode.</summary>               <seealso name="EditAttachedObject"/> <seealso name="SetPlayerAttachedObject"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Editions should be discarded if response was <b><c>0</c></b> (cancelled). This must be done by storing the offsets etc. in an array BEFORE using <a href="#EditAttachedObject">EditAttachedObject</a>.</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEditDynamicObject" syntax="OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="response">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerEditObject" syntax="OnPlayerEditObject(playerid, playerobject, objectid, response, fX, fY, fZ, fRotX, fRotY, fRotZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that edited an object
			</param>
			<param name="playerobject">
				<b><c>0</c></b> if it is a global object or <b><c>1</c></b> if it is a playerobject
			</param>
			<param name="objectid">
				The ID of the edited object
			</param>
			<param name="response">
				The type of response
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X offset for the object that was edited
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y offset for the object that was edited
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation for the object that was edited
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation for the object that was edited
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation for the object that was edited
			</param>
			<summary>This callback is called when a player finishes editing an object (<a href="#EditObject">EditObject</a>/<a href="#EditPlayerObject">EditPlayerObject</a>).</summary>           <seealso name="EditObject"/> <seealso name="CreateObject"/> <seealso name="DestroyObject"/> <seealso name="MoveObject"/> <remarks>This callback was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>When using <b><c>EDIT_RESPONSE_UPDATE</c></b> be aware that this callback will not be called when releasing an edit in progress resulting in the last update of <b><c>EDIT_RESPONSE_UPDATE</c></b> being out of sync of the objects current position.</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterCheckpoint" syntax="OnPlayerEnterCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="IsPlayerSpawned"/>
			<param name="playerid">
				The player who entered the checkpoint
			</param>
			<summary>This callback is called when a player enters the checkpoint set for that player.</summary>  <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterDynamicArea" syntax="OnPlayerEnterDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicCP" syntax="OnPlayerEnterDynamicCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicRaceCP" syntax="OnPlayerEnterDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterRaceCheckpoint" syntax="OnPlayerEnterRaceCheckpoint(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who entered the race checkpoint
			</param>
			<summary>This callback is called when a player enters a race checkpoint.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerEnterVehicle" syntax="OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="GetTickCount"/>
			<dependency name="KillTimer"/>
			<dependency name="gettime"/>
			<dependency name="s_LastVehicleEnterTime"/>
			<dependency name="s_LastVehicleTick"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
			<param name="playerid">
				ID of the player who attempts to enter a vehicle
			</param>
			<param name="vehicleid">
				ID of the vehicle the player is attempting to enter
			</param>
			<param name="ispassenger">
				<b><c>0</c></b> if entering as driver. <b><c>1</c></b> if entering as passenger
			</param>
			<summary>This callback is called when a player <b><c>starts</c></b> to enter a vehicle, meaning the player is not in vehicle yet at the time this callback is called.</summary>    <seealso name="OnPlayerExitVehicle"/> <seealso name="OnPlayerStateChange"/> <seealso name="PutPlayerInVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <remarks>This callback is called when a player <b>BEGINS</b> to enter a vehicle, not when they HAVE entered it. See <a href="#OnPlayerStateChange">OnPlayerStateChange</a>. </remarks> <remarks>This callback is still called if the player is denied entry to the vehicle (e.g. it is locked or full). </remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerExitVehicle" syntax="OnPlayerExitVehicle(playerid, vehicleid)">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="GetTickCount"/>
			<dependency name="s_LastVehicleTick"/>
			<param name="playerid">
				The ID of the player that is exiting a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle the player is exiting
			</param>
			<summary>This callback is called when a player <b>starts</b> to exit a vehicle.</summary>   <seealso name="OnPlayerEnterVehicle"/> <seealso name="OnPlayerStateChange"/> <seealso name="RemovePlayerFromVehicle"/> <seealso name="GetPlayerVehicleSeat"/> <remarks>Not called if the player falls off a bike or is removed from a vehicle by other means such as using <a href="#SetPlayerPos">SetPlayerPos</a>.</remarks> <remarks>You must use <a href="#OnPlayerStateChange">OnPlayerStateChange</a> and check if their old state is <b><c>PLAYER_STATE_DRIVER</c></b> or <b><c>PLAYER_STATE_PASSENGER</c></b> and their new state is <b><c>PLAYER_STATE_ONFOOT</c></b>.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerExitedMenu" syntax="OnPlayerExitedMenu(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that exited the menu
			</param>
			<summary>Called when a player exits a menu.</summary>  <seealso name="OnPlayerSelectedMenuRow"/> <seealso name="CreateMenu"/> <seealso name="DestroyMenu"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerFinishedDownloading" syntax="OnPlayerFinishedDownloading(playerid, virtualworld)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that finished downloading custom models
			</param>
			<param name="virtualworld">
				The ID of the virtual world the player finished downloading custom models for
			</param>
			<summary>This callback is called when a player finishes downloading custom models. For more information on how to add custom models to your server, see <a href="http://forum.sa-mp.com/showthread.php?t=644105">the release thread</a> and <a href="http://forum.sa-mp.com/showthread.php?t=644123">this tutorial</a>.</summary>   <seealso name="OnPlayerConnect"/> <seealso name="OnPlayerDisconnect"/> <seealso name="OnIncomingConnection"/> <remarks>This callback was added in <b>SA-MP 0.3DL</b> and will not work in earlier versions!</remarks> <remarks>This callback is called every time a player changes virtual worlds, even if there are no custom models present in that world.</remarks> <returns>This callback does not handle returns.</returns>
		</member>
		<member name="M:OnPlayerGiveDamage" syntax="OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="18"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="AddRejectedHit"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="AverageHitRate"/>
			<dependency name="ClearAnimations"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerVehicleSeat"/>
			<dependency name="GetTickCount"/>
			<dependency name="HIT_DYING_PLAYER"/>
			<dependency name="HIT_INVALID_DAMAGE"/>
			<dependency name="HIT_INVALID_WEAPON"/>
			<dependency name="HIT_MULTIPLE_PLAYERS"/>
			<dependency name="HIT_MULTIPLE_PLAYERS_SHOTGUN"/>
			<dependency name="HIT_NOT_SPAWNED"/>
			<dependency name="HIT_NO_DAMAGEDID"/>
			<dependency name="HIT_RATE_TOO_FAST"/>
			<dependency name="HIT_RATE_TOO_FAST_MULTIPLE"/>
			<dependency name="HIT_SAME_TEAM"/>
			<dependency name="HIT_UNSTREAMED"/>
			<dependency name="HasSameTeam"/>
			<dependency name="InflictDamage"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="IsHighRateWeapon"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="IsPlayerPaused"/>
			<dependency name="IsPlayerSpawned"/>
			<dependency name="IsPlayerStreamedIn"/>
			<dependency name="KillTimer"/>
			<dependency name="OnInvalidWeaponDamage"/>
			<dependency name="OnPlayerDamage"/>
			<dependency name="OnPlayerDamageDone"/>
			<dependency name="PlayerDeath"/>
			<dependency name="PosInFront"/>
			<dependency name="ProcessDamage"/>
			<dependency name="SetPlayerArmedWeapon"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_INVALID_DAMAGE"/>
			<dependency name="WC_INVALID_DISTANCE"/>
			<dependency name="WC_NO_DAMAGED"/>
			<dependency name="e_Hits"/>
			<dependency name="e_Valid"/>
			<dependency name="false"/>
			<dependency name="s_DamageDoneArmour"/>
			<dependency name="s_DamageDoneHealth"/>
			<dependency name="s_HitsIssued"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_KnifeTimeout"/>
			<dependency name="s_LagCompMode"/>
			<dependency name="s_LastHitIdx"/>
			<dependency name="s_LastHitTicks"/>
			<dependency name="s_LastHitTicks"/>
			<dependency name="s_LastHitWeapons"/>
			<dependency name="s_LastHitWeapons"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_MaxHitRateSamples"/>
			<dependency name="s_MaxWeaponShootRate"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_ValidDamageGiven"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damagedid">
				The ID of the player that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damagedid has lost (combined)
			</param>
			<param name="weaponid">
				The <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> that caused the damage
			</param>
			<param name="bodypart">
				The body part that was hit. (NOTE: This parameter was added in <b>0.3z</b>. Leave it out if using an older version!)
			</param>
			<summary>This callback is called when a player gives damage to another player.</summary>      <seealso name="OnPlayerTakeDamage"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks> Keep in mind this function can be inaccurate in some cases.<p/> If you want to prevent certain players from damaging eachother, use <a href="#SetPlayerTeam">SetPlayerTeam</a>.<p/> The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g. molotov, 18)<p/> The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g. RPG, grenade)<p/> <b>playerid</b> is the only one who can call the callback.<p/> The amount is always the maximum damage the weaponid can do, even when the health left is less than that maximum damage. So when a player has <b><c>100.0</c></b> health and gets shot with a Desert Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player. All 3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player only has <b><c>7.6</c></b> health left. </remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerGiveDamageActor" syntax="OnPlayerGiveDamageActor(playerid, damaged_actorid, amount, weaponid, bodypart)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damaged_actorid">
				The ID of the actor that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damaged_actorid has lost
			</param>
			<param name="weaponid">
				The reason that caused the damage
			</param>
			<param name="bodypart">
				The body part that was hit
			</param>
			<summary>This callback is called when a player gives damage to an actor.</summary>      <seealso name="CreateActor"/> <seealso name="SetActorInvulnerable"/> <seealso name="SetActorHealth"/> <seealso name="GetActorHealth"/> <seealso name="IsActorInvulnerable"/> <seealso name="IsValidActor"/> <seealso name="OnActorStreamOut"/> <seealso name="OnPlayerStreamIn"/> <remarks>This callback was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This function does not get called if the actor is set invulnerable (WHICH IS BY DEFAULT). See <a href="#SetActorInvulnerable">SetActorInvulnerable</a>.</remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerGiveDamageDynamicActor" syntax="OnPlayerGiveDamageDynamicActor(playerid, actorid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="actorid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
		</member>
		<member name="M:OnPlayerInteriorChange" syntax="OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)">
			<stacksize value="1"/>
			<param name="playerid">
				The playerid who changed interior
			</param>
			<param name="newinteriorid">
				The interior the player is now in
			</param>
			<param name="oldinteriorid">
				The interior the player was in before
			</param>
			<summary>Called when a player changes interior. Can be triggered by SetPlayerInterior or when a player enter/exits a building.</summary>    <seealso name="SetPlayerInterior"/> <seealso name="GetPlayerInterior"/> <seealso name="LinkVehicleToInterior"/> <seealso name="OnPlayerStateChange"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerKeyStateChange" syntax="OnPlayerKeyStateChange(playerid, newkeys, oldkeys)">
			<attribute name="public"/>
			<stacksize value="16"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="AngleBetweenPoints"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="ClearAnimations"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="GetPlayerMoney"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerState"/>
			<dependency name="GetPlayerWeapon"/>
			<dependency name="GetPlayerWeaponData"/>
			<dependency name="GetTickCount"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerDying"/>
			<dependency name="IsPlayerInRangeOfPoint"/>
			<dependency name="KillTimer"/>
			<dependency name="OnPlayerUseVendingMachine"/>
			<dependency name="PlayerPlaySound"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_GetPlayerArmour"/>
			<dependency name="WC_GetPlayerHealth"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="e_Armour"/>
			<dependency name="e_FrontX"/>
			<dependency name="e_FrontY"/>
			<dependency name="e_HX"/>
			<dependency name="e_HY"/>
			<dependency name="e_Health"/>
			<dependency name="e_Issuer"/>
			<dependency name="e_OX"/>
			<dependency name="e_OY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_RotZ"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Valid"/>
			<dependency name="false"/>
			<dependency name="floatabs"/>
			<dependency name="s_CbugAllowed"/>
			<dependency name="s_CbugFroze"/>
			<dependency name="s_CustomVendingMachines"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_DelayedDeathTimer"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastExplosive"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_PreviousHits"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="sc_VendingMachines"/>
			<dependency name="sc_VendingMachines"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that pressed or released a key
			</param>
			<param name="newkeys">
				A map (bitmask) of the keys currently held - see <a href="http://wiki.sa-mp.com/wiki/Keys">here</a>
			</param>
			<param name="oldkeys">
				A map (bitmask) of the keys held prior to the current change - see <a href="http://wiki.sa-mp.com/wiki/Keys">here</a>
			</param>
			<summary>This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right).</summary>    <seealso name="GetPlayerKeys"/> <remarks>This callback can also be called by NPC.</remarks> <remarks> Useful macros:<p/> <code> // HOLDING(keys)<p/> #define HOLDING(%0) ((newkeys &amp; (%0)) == (%0))<p/> <p/> // PRESSED(keys)<p/> #define PRESSED(%0) (((newkeys &amp; (%0)) == (%0)) &amp;&amp; ((oldkeys &amp; (%0)) != (%0)))<p/> <p/> // PRESSING(keyVariable, keys)<p/> #define PRESSING(%0,%1) (%0 &amp; (%1))<p/> <p/> // RELEASED(keys)<p/> #define RELEASED(%0) (((newkeys &amp; (%0)) != (%0)) &amp;&amp; ((oldkeys &amp; (%0)) == (%0)))<p/> </code> </remarks> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerLeaveCheckpoint" syntax="OnPlayerLeaveCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="s_IsDying"/>
			<param name="playerid">
				The ID of the player that left their checkpoint
			</param>
			<summary>This callback is called when a player leaves the checkpoint set for them by <a href="#SetPlayerCheckpoint">SetPlayerCheckpoint</a>. Only one checkpoint can be set at a time.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="OnPlayerLeaveRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerLeaveDynamicArea" syntax="OnPlayerLeaveDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicCP" syntax="OnPlayerLeaveDynamicCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicRaceCP" syntax="OnPlayerLeaveDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveRaceCheckpoint" syntax="OnPlayerLeaveRaceCheckpoint(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that left the race checkpoint
			</param>
			<summary>This callback is called when a player leaves the race checkpoint.</summary>  <seealso name="OnPlayerEnterCheckpoint"/> <seealso name="OnPlayerLeaveCheckpoint"/> <seealso name="OnPlayerEnterRaceCheckpoint"/> <seealso name="SetPlayerCheckpoint"/> <seealso name="DisablePlayerCheckpoint"/> <seealso name="IsPlayerInCheckpoint"/> <seealso name="SetPlayerRaceCheckpoint"/> <seealso name="DisablePlayerRaceCheckpoint"/> <seealso name="IsPlayerInRaceCheckpoint"/> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerModelSelection" syntax="OnPlayerModelSelection(playerid, response, listid, modelid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="SetPlayerSkin"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<dependency name="pSkin"/>
			<dependency name="skinList"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="response">
			</param>
			<param name="listid">
			</param>
			<param name="modelid">
			</param>
		</member>
		<member name="M:OnPlayerModelSelectionEx" syntax="OnPlayerModelSelectionEx(playerid, response, extraid, modelid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="response">
			</param>
			<param name="extraid">
			</param>
			<param name="modelid">
			</param>
		</member>
		<member name="M:OnPlayerObjectMoved" syntax="OnPlayerObjectMoved(playerid, objectid)">
			<stacksize value="1"/>
			<param name="playerid">
				The playerid the object is assigned to
			</param>
			<param name="objectid">
				The ID of the player object that was moved
			</param>
			<summary>This callback is called when a player object is moved after <a href="#MovePlayerObject">MovePlayerObject</a> (when it stops moving).</summary>   <seealso name="OnObjectMoved"/> <seealso name="MovePlayerObject"/> <seealso name="IsPlayerObjectMoving"/> <seealso name="StopPlayerObject"/> <remarks>This callback can also be called for NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerPickUpDynamicPickup" syntax="OnPlayerPickUpDynamicPickup(playerid, pickupid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="pickupid">
			</param>
		</member>
		<member name="M:OnPlayerPickUpPickup" syntax="OnPlayerPickUpPickup(playerid, pickupid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="IsPlayerSpawned"/>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<summary>Called when a player picks up a pickup created with <a href="#CreatePickup">CreatePickup</a>.</summary>   <seealso name="CreatePickup"/> <seealso name="DestroyPickup"/> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerPrepareDeath" syntax="OnPlayerPrepareDeath(playerid, animlib[], animname[], &amp;anim_lock, &amp;respawn_time)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="PlayerDeath"/>
			<param name="playerid">
			</param>
			<param name="animlib">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="animname">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="anim_lock">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="respawn_time">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerRequestClass" syntax="OnPlayerRequestClass(playerid, classid)">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="KillTimer"/>
			<dependency name="OnPlayerDeathFinished"/>
			<dependency name="RemoveBuildingForPlayer"/>
			<dependency name="SpawnPlayer"/>
			<dependency name="SpawnPlayerInPlace"/>
			<dependency name="UpdatePlayerVirtualWorld"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_DeathSkip"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_ForceClassSelection"/>
			<dependency name="s_InClassSelection"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_PlayerClass"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that changed class
			</param>
			<param name="classid">
				The ID of the current class being viewed (returned by <a href="#AddPlayerClass">AddPlayerClass</a>)
			</param>
			<summary>Called when a player changes class at class selection (and when class selection first appears).</summary>   <seealso name="OnPlayerRequestSpawn"/> <seealso name="AddPlayerClass"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is also called when a player presses <b>F4</b>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will prevent the player from spawning. The player can be forced to spawn when <a href="#SpawnPlayer">SpawnPlayer</a> is used.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerRequestDownload" syntax="OnPlayerRequestDownload(playerid, type, crc)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="type">
			</param>
			<param name="crc">
			</param>
		</member>
		<member name="M:OnPlayerRequestSpawn" syntax="OnPlayerRequestSpawn(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that requested to spawn
			</param>
			<summary>Called when a player attempts to spawn via class selection either by pressing SHIFT or clicking the 'Spawn' button.</summary>  <seealso name="OnPlayerSpawn"/> <seealso name="OnPlayerRequestClass"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>To prevent players from spawning with certain classes, the last viewed class must be saved in a variable in <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will prevent the player from spawning.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerSelectDynamicObject" syntax="OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSelectObject" syntax="OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected an object
			</param>
			<param name="type">
				The type of selection
			</param>
			<param name="objectid">
				The ID of the selected object
			</param>
			<param name="modelid">
				The model ID of the selected object
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X position of the selected object
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y position of the selected object
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z position of the selected object
			</param>
			<summary>This callback is called when a player selects an object after <a href="#SelectObject">SelectObject</a> has been used.</summary>        <seealso name="SelectObject"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerSelectedMenuRow" syntax="OnPlayerSelectedMenuRow(playerid, row)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected a menu item
			</param>
			<param name="row">
				The ID of the row that was selected. The first row is ID <b><c>0</c></b>
			</param>
			<summary>This callback is called when a player selects an item from a menu (<a href="#ShowMenuForPlayer">ShowMenuForPlayer</a>).</summary>   <seealso name="OnPlayerExitedMenu"/> <seealso name="OnDialogResponse"/> <seealso name="CreateMenu"/> <seealso name="DestroyMenu"/> <seealso name="AddMenuItem"/> <seealso name="ShowMenuForPlayer"/> <seealso name="HideMenuForPlayer"/> <remarks>The menu ID is not passed to this callback. <a href="#GetPlayerMenu">GetPlayerMenu</a> must be used to determine which menu the player selected an item on.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in gamemode. </returns>
		</member>
		<member name="M:OnPlayerShootDynamicObject" syntax="OnPlayerShootDynamicObject(playerid, weaponid, objectid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSpawn" syntax="OnPlayerSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="28"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="ClearAnimations"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="E_SPAWN_INFO"/>
			<dependency name="ForceClassSelection"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSkin"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="GetTickCount"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="KillTimer"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetPlayerArmedWeapon"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="SetPlayerSkin"/>
			<dependency name="SetPlayerSpecialAction"/>
			<dependency name="SetPlayerTeam"/>
			<dependency name="SetPlayerVirtualWorld"/>
			<dependency name="SetSpawnInfo"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="UpdatePlayerVirtualWorld"/>
			<dependency name="e_Ammo1"/>
			<dependency name="e_Ammo2"/>
			<dependency name="e_Ammo3"/>
			<dependency name="e_PosA"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_Rot"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Team"/>
			<dependency name="e_Team"/>
			<dependency name="e_Weapon"/>
			<dependency name="e_Weapon1"/>
			<dependency name="e_Weapon2"/>
			<dependency name="e_Weapon3"/>
			<dependency name="e_WeaponAmmo"/>
			<dependency name="e_WeaponId"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_ClassSpawnInfo"/>
			<dependency name="s_CustomVendingMachines"/>
			<dependency name="s_DeathSkip"/>
			<dependency name="s_DeathSkipTick"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_FirstSpawn"/>
			<dependency name="s_ForceClassSelection"/>
			<dependency name="s_InClassSelection"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<dependency name="s_LastUpdate"/>
			<dependency name="s_PlayerClass"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_PlayerSpawnInfo"/>
			<dependency name="s_PlayerTeam"/>
			<dependency name="s_SpawnInfoModified"/>
			<dependency name="s_SyncData"/>
			<dependency name="s_SyncData"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that spawned
			</param>
			<summary>This callback is called when a player spawns.(i.e. after caling <a href="#SpawnPlayer">SpawnPlayer</a> function).</summary>  <seealso name="OnPlayerDeath"/> <seealso name="OnVehicleSpawn"/> <seealso name="SpawnPlayer"/> <seealso name="AddPlayerClass"/> <seealso name="SetSpawnInfo"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>The game sometimes deducts $100 from players after spawn.</remarks> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStateChange" syntax="OnPlayerStateChange(playerid, newstate, oldstate)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="ClearAnimationsForPlayer"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetTickCount"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerStreamedIn"/>
			<dependency name="KillTimer"/>
			<dependency name="SendLastSyncData"/>
			<dependency name="SetHealthBarVisible"/>
			<dependency name="TogglePlayerControllable"/>
			<dependency name="false"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastVehicleTick"/>
			<dependency name="s_Spectating"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that changed state
			</param>
			<param name="newstate">
				The player's new state
			</param>
			<param name="oldstate">
				The player's previous state
			</param>
			<summary>This callback is called when a player changes state. For example, when a player changes from being the driver of a vehicle to being on-foot.</summary>    <seealso name="OnPlayerInteriorChange"/> <seealso name="GetPlayerState"/> <seealso name="GetPlayerSpecialAction"/> <seealso name="SetPlayerSpecialAction"/> <remarks>This callback can also be called by NPC.</remarks> <remarks> <b>States:</b><p/> <ul> <li><b><c>PLAYER_STATE_NONE</c></b> - empty (while initializing)</li> <li><b><c>PLAYER_STATE_ONFOOT</c></b> - player is on foot</li> <li><b><c>PLAYER_STATE_DRIVER</c></b> - player is the driver of a vehicle</li> <li><b><c>PLAYER_STATE_PASSENGER</c></b> - player is passenger of a vehicle</li> <li><b><c>PLAYER_STATE_WASTED</c></b> - player is dead or on class selection</li> <li><b><c>PLAYER_STATE_SPAWNED</c></b> - player is spawned</li> <li><b><c>PLAYER_STATE_SPECTATING</c></b> - player is spectating</li> <li><b><c>PLAYER_STATE_EXIT_VEHICLE</c></b> - player exits a vehicle</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_DRIVER</c></b> - player enters a vehicle as driver</li> <li><b><c>PLAYER_STATE_ENTER_VEHICLE_PASSENGER</c></b> - player enters a vehicle as passenger </li> </ul> </remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStreamIn" syntax="OnPlayerStreamIn(playerid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="SendLastSyncData"/>
			<dependency name="s_IsDying"/>
			<param name="playerid">
				The ID of the player who has been streamed
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the other player in
			</param>
			<summary>This callback is called when a player is streamed by some other player's client.</summary>   <seealso name="OnPlayerStreamOut"/> <seealso name="OnActorStreamIn"/> <seealso name="OnVehicleStreamIn"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerStreamOut" syntax="OnPlayerStreamOut(playerid, forplayerid)">
			<stacksize value="1"/>
			<param name="playerid">
				The player who has been destreamed
			</param>
			<param name="forplayerid">
				The player who has destreamed the other player
			</param>
			<summary>This callback is called when a player is streamed out from some other player's client.</summary>   <seealso name="OnPlayerStreamIn"/> <seealso name="OnActorStreamOut"/> <seealso name="OnVehicleStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerSuspectedForAimbot" syntax="OnPlayerSuspectedForAimbot(playerid, hitid, weaponid, warnings)">
			<attribute name="public"/>
			<stacksize value="206"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<dependency name="GetPlayerName"/>
			<dependency name="WARNING_CONTINOUS_SHOTS"/>
			<dependency name="WARNING_OUT_OF_RANGE_SHOT"/>
			<dependency name="WARNING_PROAIM_TELEPORT"/>
			<dependency name="WARNING_RANDOM_AIM"/>
			<dependency name="format"/>
			<dependency name="sendAltChatMessage"/>
			<param name="playerid">
			</param>
			<param name="hitid">
			</param>
			<param name="weaponid">
			</param>
			<param name="warnings">
			</param>
		</member>
		<member name="M:OnPlayerTakeDamage" syntax="OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="17"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="AddRejectedHit"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="GetPlayerDistanceFromPoint"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPing"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerVehicleSeat"/>
			<dependency name="HIT_INVALID_DAMAGE"/>
			<dependency name="HIT_OUT_OF_RANGE"/>
			<dependency name="HasSameTeam"/>
			<dependency name="InflictDamage"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="IsHighRateWeapon"/>
			<dependency name="IsMeleeWeapon"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="KillTimer"/>
			<dependency name="OnInvalidWeaponDamage"/>
			<dependency name="OnPlayerDamage"/>
			<dependency name="OnPlayerDamageDone"/>
			<dependency name="PlayerDeath"/>
			<dependency name="PosInFront"/>
			<dependency name="ProcessDamage"/>
			<dependency name="ResyncPlayer"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="WC_INVALID_DAMAGE"/>
			<dependency name="WC_INVALID_DISTANCE"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_CustomFallDamage"/>
			<dependency name="s_DamageDoneArmour"/>
			<dependency name="s_DamageDoneHealth"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_KnifeTimeout"/>
			<dependency name="s_LagCompMode"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_ValidDamageTaken"/>
			<dependency name="s_WeaponRange"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that took damage
			</param>
			<param name="issuerid">
				The ID of the player that caused the damage. <b><c>INVALID_PLAYER_ID</c></b> if self-inflicted
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of damage the player took (health and armour combined)
			</param>
			<param name="weaponid">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">weapon/reason</a> for the damage
			</param>
			<param name="bodypart">
				The body part that was hit. (NOTE: This parameter was added in <b>0.3z</b>. Leave it out if using an older version!)
			</param>
			<summary>This callback is called when a player takes damage.</summary>      <seealso name="OnPlayerGiveDamage"/> <seealso name="OnPlayerWeaponShot"/> <remarks>This callback was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks><a href="#GetPlayerHealth">GetPlayerHealth</a> and <a href="#GetPlayerArmour">GetPlayerArmour</a> will return the old amounts of the player before this callback. </remarks> <remarks> The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g. molotov, <b><c>18</c></b>).<p/> The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g. RPG, grenade)<p/> <b>playerid</b> is the only one who can call the callback.<p/> The amount is always the maximum damage the weaponid can do, even when the health left is less than that maximum damage. So when a player has <b><c>100.0</c></b> health and gets shot with a Desert Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player. All 3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player only has <b><c>7.6</c></b> health left. </remarks> <returns> <b><c>1</c></b> - Callback will not be called in other filterscripts.<p/> <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerText" syntax="OnPlayerText(playerid, text[])">
			<attribute name="public"/>
			<stacksize value="290"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerColor"/>
			<dependency name="GetTickCount"/>
			<dependency name="Iterator@Player"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="format"/>
			<dependency name="gtc_text"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<param name="playerid">
				The ID of the player who typed the text
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text the player typed
			</param>
			<summary>Called when a player sends a chat message.</summary>   <seealso name="OnPlayerCommandText"/> <seealso name="SendPlayerMessageToPlayer"/> <seealso name="SendPlayerMessageToAll"/> <remarks>This callback can also be called by NPC.</remarks> <returns> Returning <b><c>0</c></b> in this callback will stop the text from being sent to all players.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnPlayerUpdate" syntax="OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="19"/>
			<dependency name="operator!=(Float:,Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="GetPlayerAnimationIndex"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSkin"/>
			<dependency name="GetPlayerSurfingObjectID"/>
			<dependency name="GetPlayerSurfingVehicleID"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetPlayerWeapon"/>
			<dependency name="GetTickCount"/>
			<dependency name="InflictDamage"/>
			<dependency name="SetSpawnInfo"/>
			<dependency name="WC_DeathSkipEnd"/>
			<dependency name="WC_SpawnForStreamedIn"/>
			<dependency name="false"/>
			<dependency name="s_CustomFallDamage"/>
			<dependency name="s_DeathSkip"/>
			<dependency name="s_DeathSkipTick"/>
			<dependency name="s_FallDeathVelocity"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastAnim"/>
			<dependency name="s_LastStop"/>
			<dependency name="s_LastUpdate"/>
			<dependency name="s_LastZ"/>
			<dependency name="s_LastZVelo"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_SpawnForStreamedIn"/>
			<dependency name="s_WeaponDamage"/>
			<param name="playerid">
				ID of the player sending an update packet
			</param>
			<summary>This callback is called every time a client/player updates the server with their status. It is often used to create custom callbacks for client updates that aren't actively tracked by the server, such as health or armor updates or players switching weapons.</summary>  <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is called, on average, 30 times per second, per player; only use it when you know what it's meant for (or more importantly what it's NOT meant for). </remarks> <remarks>The frequency with which this callback is called for each player varies, depending on what the player is doing. Driving or shooting will trigger a lot more updates than idling. </remarks> <returns> <b><c>0</c></b> - Update from this player will not be replicated to other clients.<p/> <b><c>1</c></b> - Indicates that this update can be processed normally and sent to other players.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnPlayerUseVendingMachine" syntax="OnPlayerUseVendingMachine(playerid, &amp;health_given)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<dependency name="GetPlayerMoney"/>
			<dependency name="GivePlayerMoney"/>
			<param name="playerid">
			</param>
			<param name="health_given">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerWeaponShot" syntax="OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="27"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="AddRejectedHit"/>
			<dependency name="AverageShootRate"/>
			<dependency name="GetPlayerDistanceFromPoint"/>
			<dependency name="GetPlayerLastShotVectors"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSurfingVehicleID"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetPlayerVehicleSeat"/>
			<dependency name="GetTickCount"/>
			<dependency name="GetVehicleHealth"/>
			<dependency name="HIT_BEING_RESYNCED"/>
			<dependency name="HIT_DISCONNECTED"/>
			<dependency name="HIT_INVALID_HITTYPE"/>
			<dependency name="HIT_INVALID_VEHICLE"/>
			<dependency name="HIT_INVALID_WEAPON"/>
			<dependency name="HIT_NOT_SPAWNED"/>
			<dependency name="HIT_OUT_OF_RANGE"/>
			<dependency name="HIT_OWN_VEHICLE"/>
			<dependency name="HIT_SAME_VEHICLE"/>
			<dependency name="HIT_TOO_FAR_FROM_ORIGIN"/>
			<dependency name="HIT_TOO_FAR_FROM_SHOT"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="IsPlayerSpawned"/>
			<dependency name="KillTimer"/>
			<dependency name="SHOOTING_RATE_TOO_FAST"/>
			<dependency name="SHOOTING_RATE_TOO_FAST_MULTIPLE"/>
			<dependency name="SetTimerEx"/>
			<dependency name="SetVehicleHealth"/>
			<dependency name="VectorSize"/>
			<dependency name="WC_IsValidVehicle"/>
			<dependency name="e_HX"/>
			<dependency name="e_HY"/>
			<dependency name="e_HZ"/>
			<dependency name="e_HitId"/>
			<dependency name="e_HitType"/>
			<dependency name="e_Hits"/>
			<dependency name="e_Length"/>
			<dependency name="e_OX"/>
			<dependency name="e_OY"/>
			<dependency name="e_OZ"/>
			<dependency name="e_Tick"/>
			<dependency name="e_Valid"/>
			<dependency name="e_Weapon"/>
			<dependency name="e_X"/>
			<dependency name="e_Y"/>
			<dependency name="e_Z"/>
			<dependency name="false"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_CbugFroze"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_LastShotIdx"/>
			<dependency name="s_LastShotTicks"/>
			<dependency name="s_LastShotTicks"/>
			<dependency name="s_LastShotWeapons"/>
			<dependency name="s_LastShotWeapons"/>
			<dependency name="s_LastVehicleShooter"/>
			<dependency name="s_MaxShootRateSamples"/>
			<dependency name="s_MaxWeaponShootRate"/>
			<dependency name="s_ShotsFired"/>
			<dependency name="s_VehiclePassengerDamage"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<dependency name="s_VehicleUnoccupiedDamage"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="s_WeaponDamage"/>
			<dependency name="s_WeaponRange"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that shot a weapon
			</param>
			<param name="weaponid">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> shot by the player
			</param>
			<param name="hittype">
				The type of thing the shot hit (none, player, vehicle, or (player)object)
			</param>
			<param name="hitid">
				The ID of the player, vehicle or object that was hit
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X coordinate that the shot hit
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y coordinate that the shot hit
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z coordinate that the shot hit
			</param>
			<summary>This callback is called when a player fires a shot from a weapon. Only bullet weapons are supported. Only <b>passenger</b> drive-by is supported (not driver drive-by, and not sea sparrow / hunter shots).</summary>        <seealso name="OnPlayerGiveDamage"/> <seealso name="GetPlayerLastShotVectors"/> <remarks>This callback was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <remarks> <li><b><c>BULLET_HIT_TYPE_NONE(0)</c></b></li> <li><b><c>BULLET_HIT_TYPE_PLAYER(1)</c></b></li> <li><b><c>BULLET_HIT_TYPE_VEHICLE(2)</c></b></li> <li><b><c>BULLET_HIT_TYPE_OBJECT(3)</c></b></li> <li><b><c>BULLET_HIT_TYPE_PLAYER_OBJECT(4)</c></b></li> </remarks> <remarks><b><c>BULLET_HIT_TYPE_PLAYER</c></b> is also called for NPCs. Actors are ignored by this callback and detects as <b><c>BULLET_HIT_TYPE_NONE</c></b>.</remarks> <remarks>This callback is only called when lag compensation is <b>enabled</b>. </remarks> <remarks> If hittype is:<p/> <ul> <li>- <b><c>BULLET_HIT_TYPE_NONE</c></b>: the fX, fY and fZ parameters are normal coordinates, will give 0.0 for coordinates if nothing was hit (e.g. far object that the bullet can't reach);</li> <li>- Others: the fX, fY and fZ are offsets relative to the hitid.</li> </ul> </remarks> <remarks> Isn't called if you fired in vehicle as driver or if you are looking behind with the aim enabled (shooting in air).<p/> It is called as <b><c>BULLET_HIT_TYPE_VEHICLE</c></b> with the correct hitid (the hit player's vehicleid) if you are shooting a player which is in a vehicle. It won't be called as <b><c>BULLET_HIT_TYPE_PLAYER</c></b> at all.<p/> <b>Partially fixed in SA-MP 0.3.7:</b> If fake weapon data is sent by a malicious user, other player clients may freeze or crash. To combat this, check if the reported weaponid can actually fire bullets. </remarks> <remarks> </remarks> <remarks><a href="#GetPlayerLastShotVectors">GetPlayerLastShotVectors</a> can be used in this callback for more detailed bullet vector information.</remarks> <returns> <b><c>0</c></b> - Prevent the bullet from causing damage.<p/> <b><c>1</c></b> - Allow the bullet to cause damage.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnQueryError" syntax="OnQueryError(errorid, error[], callback[], query[], handle)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="cellmin"/>
			<dependency name="printf"/>
			<param name="errorid">
			</param>
			<param name="error">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="callback">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="query">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="handle">
				<paraminfo>MySQL </paraminfo>
			</param>
		</member>
		<member name="M:OnRconCommand" syntax="OnRconCommand(cmd[])">
			<stacksize value="1"/>
			<param name="cmd">
				<paraminfo> [] </paraminfo>
				A string containing the command that was typed, as well as any passed parameters
			</param>
			<summary>This callback is called when a command is sent through the server console, remote RCON, or via the in-game "/rcon command".</summary>  <seealso name="IsPlayerAdmin"/> <seealso name="OnRconLoginAttempt"/> <remarks>You will need to include this callback in a loaded filterscript for it to work in the gamemode!</remarks> <remarks>"/rcon" is not included in "cmd" when a player types a command. </remarks> <remarks>If you use the <a href="#print">print</a> function here, it will send a message to the player who typed the command in-game as well as the log.</remarks> <remarks>This callback is not called when the player is not logged in as RCON admin. </remarks> <remarks>When the player is not logged in as RCON admin and uses <b>/rcon login</b>, this callback will not be called and <a href="#OnRconLoginAttempt">OnRconLoginAttempt</a> is called instead. However, when the player is logged in as RCON admin, the use of this command will call this callback. </remarks> <returns> <b><c>0</c></b> if the command was not processed, it will be passed to another script or <b><c>1</c></b> if the command was processed, will not be passed to other scripts.<p/> It is always called first in filterscripts so returning <b><c>1</c></b> there blocks gamemode from seeing it. </returns>
		</member>
		<member name="M:OnRconLoginAttempt" syntax="OnRconLoginAttempt(ip[], password[], success)">
			<stacksize value="1"/>
			<param name="ip">
				<paraminfo> [] </paraminfo>
				The IP of the player that tried to log in to RCON
			</param>
			<param name="password">
				<paraminfo> [] </paraminfo>
				The password used to login with
			</param>
			<param name="success">
				<b><c>0</c></b> if the password was incorrect or <b><c>1</c></b> if it was correct
			</param>
			<summary>This callback is called when someone attempts to log in to RCON in-game; successful or not.</summary>    <seealso name="OnRconCommand"/> <seealso name="IsPlayerAdmin"/> <seealso name="SendRconCommand"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback is only called when /rcon login is used in-game. </remarks> <remarks>This callback is only called when the player is not yet logged in. When the player is logged in, <a href="#OnRconCommand">OnRconCommand</a> is called instead.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnRejectedHit" syntax="OnRejectedHit(playerid, hit[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<referrer name="AddRejectedHit"/>
			<dependency name="false"/>
			<param name="playerid">
			</param>
			<param name="hit">
				<paraminfo> [33] </paraminfo>
			</param>
		</member>
		<member name="M:OnRuntimeError" syntax="OnRuntimeError(code, &amp;suppress)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="ScriptInit_OnRuntimeError"/>
			<dependency name="YSI_g_sCrashdetect"/>
			<dependency name="true"/>
			<param name="code">
			</param>
			<param name="suppress">
				<paraminfo>bool &amp; </paraminfo>
			</param>
		</member>
		<member name="M:OnScriptCash" syntax="OnScriptCash(playerid, amount, source)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who got cash from the game
			</param>
			<param name="amount">
				The amount of cash given
			</param>
			<param name="source">
				Where the money came from
			</param>
			<summary>This callback is called when a SendClientCheck request comletes</summary>    <remarks>Doesn't work</remarks>
		</member>
		<member name="M:OnTrailerUpdate" syntax="OnTrailerUpdate(playerid, vehicleid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who sent a trailer update
			</param>
			<param name="vehicleid">
				The Trailer being updated
			</param>
			<summary>This callback is called when a player sent a trailer update.</summary>   <seealso name="OnUnoccupiedVehicleUpdate"/> <seealso name="GetVehicleTrailer"/> <seealso name="IsTrailerAttachedToVehicle"/> <seealso name="AttachTrailerToVehicle"/> <seealso name="DetachTrailerFromVehicle"/> <remarks>This callback was added in <b>SA-MP 0.3z R4</b> and will not work in earlier versions!</remarks> <remarks>This callback is called very frequently per second per trailer. You should refrain from implementing intensive calculations or intensive file writing/reading operations in this callback. </remarks> <returns> <b><c>0</c></b> - Cancels any trailer updates from being sent to other players. Update is still sent to the updating player.<p/> <b><c>1</c></b> - Processes the trailer update as normal and synchronizes it between all players.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnUnoccupiedVehicleUpdate" syntax="OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z)">
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that's position was updated
			</param>
			<param name="playerid">
				The ID of the player that sent a vehicle position sync update
			</param>
			<param name="passenger_seat">
				The ID of the seat if the player is a passenger. 0=not in vehicle, 1=front passenger, 2=backleft 3=backright 4+ is for coach/bus etc. with many passenger seats
			</param>
			<param name="new_x">
				<paraminfo>Float </paraminfo>
				The new X coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="new_y">
				<paraminfo>Float </paraminfo>
				The new Y coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="new_z">
				<paraminfo>Float </paraminfo>
				The new Z coordinate of the vehicle. This parameter was added in <b>0.3z</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_x">
				<paraminfo>Float </paraminfo>
				The new X velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_y">
				<paraminfo>Float </paraminfo>
				The new Y velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<param name="vel_z">
				<paraminfo>Float </paraminfo>
				The new Z velocity of the vehicle. This parameter was added in <b>0.3z R4</b>. Leave it out if using an earlier version
			</param>
			<summary>This callback is called when a player's client updates/syncs the position of a vehicle they're not driving. This can happen outside of the vehicle or when the player is a passenger of a vehicle that has no driver.</summary>          <seealso name="OnTrailerUpdate"/> <remarks>This callback was added in <b>SA-MP 0.3c R3</b> and will not work in earlier versions!</remarks> <remarks>This callback is called very frequently per second per unoccupied vehicle. You should refrain from implementing intensive calculations or intensive file writing/reading operations in this callback.</remarks> <remarks><a href="#GetVehiclePos">GetVehiclePos</a> will return the old coordinates of the vehicle before this update.</remarks> <returns> Returning <b><c>0</c></b> in this callback will stop the vehicle's position being synced to other players. Update is still sent to the updating player. Useful for combating vehicle teleport hacks.<p/> It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other scripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleDamageStatusUpdate" syntax="OnVehicleDamageStatusUpdate(vehicleid, playerid)">
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that was changed its damage status
			</param>
			<param name="playerid">
				The ID of the player who synced the change in the damage status (who had the car damaged or repaired)
			</param>
			<summary>This callback is called when a vehicle element such as doors, tires, panels, or lights change their damage status.</summary>   <seealso name="GetVehicleDamageStatus"/> <seealso name="UpdateVehicleDamageStatus"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This does not include vehicle health changes</remarks> <returns> <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts.<p/> </returns>
		</member>
		<member name="M:OnVehicleDeath" syntax="OnVehicleDeath(vehicleid, killerid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="WC_KillVehicle"/>
			<dependency name="KillTimer"/>
			<dependency name="false"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<param name="vehicleid">
				The ID of the vehicle that was destroyed
			</param>
			<param name="killerid">
				The ID of the player that reported (synced) the vehicle's destruction (name is misleading). Generally the driver or a passenger (if any) or the closest player
			</param>
			<summary>This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.</summary>   <seealso name="OnVehicleSpawn"/> <seealso name="SetVehicleHealth"/> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback will also be called when a vehicle enters water, but the vehicle can be saved from destruction by teleportation or driving out (if only partially submerged). The callback won't be called a second time, and the vehicle may disappear when the driver exits, or after a short time.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleMod" syntax="OnVehicleMod(playerid, vehicleid, componentid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the driver of the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle which is modded
			</param>
			<param name="componentid">
				The ID of the component which was added to the vehicle
			</param>
			<summary>This callback is called when a vehicle is modded.</summary>    <seealso name="AddVehicleComponent"/> <seealso name="OnEnterExitModShop"/> <seealso name="OnVehiclePaintjob"/> <seealso name="OnVehicleRespray"/> <remarks>This callback is NOT called by <a href="#AddVehicleComponent">AddVehicleComponent</a>.</remarks> <returns> Return <b><c>0</c></b> to desync the mod (or an invalid mod) from propagating and / or crashing players.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehiclePaintjob" syntax="OnVehiclePaintjob(playerid, vehicleid, paintjobid)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that changed the paintjob of their vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that had its paintjob changed
			</param>
			<param name="paintjobid">
				The ID of the new paintjob
			</param>
			<summary>Called when a player previews a vehicle paintjob inside a mod shop. Watch out, this callback is not called when the player buys the paintjob.</summary>    <seealso name="ChangeVehiclePaintjob"/> <seealso name="ChangeVehicleColor"/> <seealso name="OnVehicleRespray"/> <seealso name="OnVehicleMod"/> <remarks>This callback is not called by <a href="#ChangeVehiclePaintjob">ChangeVehiclePaintjob</a>.</remarks> <returns> This callback does not handle returns. Returning <b><c>0</c></b> won't deny the paintjob change.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleRespray" syntax="OnVehicleRespray(playerid, vehicleid, color1, color2)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that is driving the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that was resprayed
			</param>
			<param name="color1">
				The color that the vehicle's primary color was changed to
			</param>
			<param name="color2">
				The color that the vehicle's secondary color was changed to
			</param>
			<summary>This callback is called when a player exits a mod shop, even if the colors weren't changed. Watch out, the name is ambiguous, Pay 'n' Spray shops don't call this callback.</summary>     <seealso name="ChangeVehicleColor"/> <seealso name="ChangeVehiclePaintjob"/> <seealso name="OnVehiclePaintjob"/> <seealso name="OnVehicleMod"/> <seealso name="OnEnterExitModShop"/> <remarks>Previewing a component inside a mod shop might call this callback.</remarks> <remarks>This callback is not called by <a href="#ChangeVehicleColor">ChangeVehicleColor</a>.</remarks> <returns> Returning <b><c>0</c></b> in this callback will deny the colour change. Returning <b><c>1</c></b> will allow it. This can be used to prevent hackers from changing vehicle colours using cheats.<p/> It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts from seeing it. </returns>
		</member>
		<member name="M:OnVehicleSirenStateChange" syntax="OnVehicleSirenStateChange(playerid, vehicleid, newstate)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that toggled the siren (driver)
			</param>
			<param name="vehicleid">
				The ID of the vehicle of which the siren was toggled for
			</param>
			<param name="newstate">
				<b><c>0</c></b> if siren was turned off, <b><c>1</c></b> if siren was turned on
			</param>
			<summary>This callback is called when a vehicle's siren is toggled.</summary>    <seealso name="GetVehicleParamsSirenState"/> <remarks>This callback was added in <b>SA-MP 0.3.7</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <remarks>This callback is only called when a vehicle's siren is toggled on or off, NOT when the alternate siren is in use (holding horn).</remarks> <returns> <b><c>1</c></b> - Will prevent gamemode from receiving this callback.<p/> <b><c>0</c></b> - Indicates that this callback will be passed to the gamemode.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleSpawn" syntax="OnVehicleSpawn(vehicleid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="KillTimer"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<dependency name="true"/>
			<param name="vehicleid">
				The ID of the vehicle that spawned
			</param>
			<summary>This callback is called when a vehicle <b>re</b>spawns.</summary>  <seealso name="OnVehicleDeath"/> <seealso name="OnPlayerSpawn"/> <seealso name="SetVehicleToRespawn"/> <seealso name="CreateVehicle"/> <returns> <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<p/> <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleStreamIn" syntax="OnVehicleStreamIn(vehicleid, forplayerid)">
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player who the vehicle streamed in for
			</param>
			<summary>Called when a vehicle is streamed to a player's client.</summary>   <seealso name="OnVehicleStreamOut"/> <seealso name="OnPlayerStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:OnVehicleStreamOut" syntax="OnVehicleStreamOut(vehicleid, forplayerid)">
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed out
			</param>
			<param name="forplayerid">
				The ID of the player who is no longer streaming the vehicle
			</param>
			<summary>This callback is called when a vehicle is streamed out for a player's client (it's so far away that they can't see it).</summary>   <seealso name="OnVehicleStreamIn"/> <seealso name="OnPlayerStreamIn"/> <seealso name="OnPlayerStreamOut"/> <remarks>This callback was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This callback can also be called by NPC.</remarks> <returns> This callback does not handle returns.<p/> It is always called first in filterscripts. </returns>
		</member>
		<member name="M:PC_Init" syntax="PC_Init()">
			<attribute name="native"/>
			<referrer name="Indirection_OnGameModeInit"/>
		</member>
		<member name="M:PTime" syntax="PTime(playerid)">
			<attribute name="public"/>
			<stacksize value="352"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="DTD"/>
			<dependency name="GUI"/>
			<dependency name="GUI"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerPing"/>
			<dependency name="GetPlayerSpecialAction"/>
			<dependency name="InDM"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="RespawningDM"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="TakeSpectateID"/>
			<dependency name="TogHud"/>
			<dependency name="WC_PlayerTextDrawHide"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="floatdiv"/>
			<dependency name="format"/>
			<dependency name="gettime"/>
			<dependency name="pFPS"/>
			<dependency name="pJailed"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="pSmrti"/>
			<dependency name="pUbistva"/>
			<dependency name="t_Kick"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:PawnCmd_OnGameModeInit" syntax="PawnCmd_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="18"/>
			<dependency name="ALL"/>
			<dependency name="CreateDynamic3DTextLabel"/>
			<dependency name="CreateDynamicActor"/>
			<dependency name="CreateGTextdraws"/>
			<dependency name="DisableInteriorEnterExits"/>
			<dependency name="EnableStuntBonusForAll"/>
			<dependency name="LoadModelSelectionMenu"/>
			<dependency name="OwnerActor"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SQL"/>
			<dependency name="SendRconCommand"/>
			<dependency name="SetDisableSyncBugs"/>
			<dependency name="SetDynamicActorInvulnerable"/>
			<dependency name="SetGameModeText"/>
			<dependency name="SetVehiclePassengerDamage"/>
			<dependency name="mysql_connect"/>
			<dependency name="mysql_errno"/>
			<dependency name="mysql_log"/>
			<dependency name="print"/>
			<dependency name="printf"/>
			<dependency name="skinList"/>
			<dependency name="true"/>
		</member>
		<member name="M:PlayerDeath" syntax="PlayerDeath(playerid, animlib[], animname[], anim_lock, respawn_time, freeze_sync, anim_freeze)">
			<stacksize value="13"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="InflictDamage"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="ClearAnimations"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerSpecialAction"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="KillTimer"/>
			<dependency name="OnPlayerPrepareDeath"/>
			<dependency name="PlayerTextDrawHide"/>
			<dependency name="SetPlayerSpecialAction"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="SetTimerEx"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="false"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_HealthBarForeground"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_RespawnTime"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="animlib">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="animname">
				<paraminfo> [32] </paraminfo>
			</param>
			<param name="anim_lock">
			</param>
			<param name="respawn_time">
			</param>
			<param name="freeze_sync">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="anim_freeze">
			</param>
		</member>
		<member name="M:PlayerPlaySound" syntax="PlayerPlaySound(playerid, soundid, x, y, z)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerDamageDone"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<referrer name="OnDuelTimer"/>
			<param name="playerid">
				The ID of the player for whom to play the sound
			</param>
			<param name="soundid">
				The sound to play
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				X coordinate for the sound to play at. (0 for no position)
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				Y coordinate for the sound to play at. (0 for no position)
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				Z coordinate for the sound to play at. (0 for no position)
			</param>
			<summary>Plays the specified sound for a player.</summary>      <seealso name="PlayCrimeReportForPlayer"/> <seealso name="PlayAudioStreamForPlayer"/> <seealso name="StopAudioStreamForPlayer"/> <remarks>Only use the coordinates if you want the sound to be played at a certain position. Set coordinates all to 0 to just play the sound.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:PlayerSpectatePlayer" syntax="PlayerSpectatePlayer(playerid, targetplayerid, mode)">
			<attribute name="native"/>
			<referrer name="WC_PlayerSpectatePlayer"/>
			<param name="playerid">
				The ID of the player that will spectate
			</param>
			<param name="targetplayerid">
				The ID of the player that should be spectated
			</param>
			<param name="mode">
				The mode to spectate with (optional=<b><c>SPECTATE_MODE_NORMAL</c></b>)
			</param>
			<summary>Makes a player spectate (watch) another player.</summary>    <seealso name="PlayerSpectateVehicle"/> <seealso name="TogglePlayerSpectating"/> <remarks>Order is CRITICAL! Ensure that you use <a href="#TogglePlayerSpectating">TogglePlayerSpectating</a> before <a href="#PlayerSpectatePlayer">PlayerSpectatePlayer</a>. </remarks> <remarks>playerid and targetplayerid's virtual world and interior must be the same for this function to work properly. </remarks> <remarks> <b>Spectate modes:</b><p/> <ul> <li><b><c>SPECTATE_MODE_NORMAL</c></b> - normal spectate mode (third person point of view). Camera can not be changed.</li> <li><b><c>SPECTATE_MODE_FIXED </c></b> - use SetPlayerCameraPos after this to position the player's camera, and it will track the player/vehicle set with PlayerSpectatePlayer/PlayerSpectateVehicle.</li> <li><b><c>SPECTATE_MODE_SIDE</c></b> - the camera will be attached to the side of the player/vehicle (like when you're in first-person camera on a bike and you do a wheelie).</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. One of the players specified does not exist. </returns>
		</member>
		<member name="M:PlayerTextDrawAlignment" syntax="PlayerTextDrawAlignment(playerid, text, alignment)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawAlignment"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the alignment of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the alignment of
			</param>
			<param name="alignment">
				<b><c>1</c></b>-left <b><c>2</c></b>-centered <b><c>3</c></b>-right
			</param>
			<summary>Set the text alignment of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>For alignment <b><c>2</c></b> (center) the x and y values of TextSize need to be swapped, see notes at <a href="#PlayerTextDrawTextSize">PlayerTextDrawTextSize</a>. </remarks>
		</member>
		<member name="M:PlayerTextDrawBackgroundColor" syntax="PlayerTextDrawBackgroundColor(playerid, text, color)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawBackgroundColo"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the background color of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the background color of
			</param>
			<param name="color">
				The color that the textdraw should be set to
			</param>
			<summary>Adjust the background color of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>If <a href="#PlayerTextDrawSetOutline">PlayerTextDrawSetOutline</a> is used with size &gt; 0, the outline color will match the color used in <a href="#PlayerTextDrawBackgroundColor">PlayerTextDrawBackgroundColor</a>. Changing the value of color seems to alter the color used in <a href="#PlayerTextDrawColor">PlayerTextDrawColor</a></remarks>
		</member>
		<member name="M:PlayerTextDrawBoxColor" syntax="PlayerTextDrawBoxColor(playerid, text, color)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawBoxColor"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
				The ID of the player whose textdraw to set the box color of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player textdraw to set the box color of
			</param>
			<param name="color">
				The color to set. Alpha (transparency) is supported
			</param>
			<summary>Sets the color of a textdraw's box (<a href="#PlayerTextDrawUseBox">PlayerTextDrawUseBox</a>).</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawColor" syntax="PlayerTextDrawColor(playerid, text, color)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawColor"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player who's textdraw to set the color of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The TextDraw to change
			</param>
			<param name="color">
				The color in hexadecimal format
			</param>
			<summary>Sets the text color of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>You can also use Gametext colors in textdraws.</remarks> <remarks>The textdraw must be re-shown to the player in order to update the color.</remarks>
		</member>
		<member name="M:PlayerTextDrawDestroy" syntax="PlayerTextDrawDestroy(playerid, text)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawDestroy"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player who's player-textdraw to destroy
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to destroy
			</param>
			<summary>Destroy a player-textdraw.</summary>   <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawFont" syntax="PlayerTextDrawFont(playerid, text, font)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawFont"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to change the font of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to change the font of
			</param>
			<param name="font">
				There are four font styles. A font value greater than <b><c>3</c></b> does not display, and anything greater than <b><c>16</c></b> crashes the client. See <a href="http://wiki.sa-mp.com/wiki/PlayerTextDrawFont">http://wiki.sa-mp.com/wiki/PlayerTextDrawFont</a>
			</param>
			<summary>Change the font of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawHide" syntax="PlayerTextDrawHide(playerid, text)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawHide"/>
			<referrer name="SetHealthBarVisible"/>
			<referrer name="PlayerDeath"/>
			<referrer name="DamageFeedUpdateText"/>
			<param name="playerid">
				The ID of the player to hide the textdraw for
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to hide
			</param>
			<summary>Hide a player-textdraw from the player it was created for.</summary>   <seealso name="PlayerTextDrawShow"/> <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawLetterSize" syntax="PlayerTextDrawLetterSize(playerid, text, x, y)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawLetterSize"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the letter size of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to change the letter size of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				Width of a char
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				Height of a char
			</param>
			<summary>Sets the width and height of the letters in a player-textdraw.</summary>     <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>When using this function purely for the benefit of affecting the textdraw box, multiply 'Y' by <b><c>0.135</c></b> to convert to <a href="#TextDrawTextSize">TextDrawTextSize</a>-like measurements</remarks> <remarks>Fonts appear to look the best with an X to Y ratio of <b><c>1</c></b> to <b><c>4</c></b> (e.g. if x is <b><c>0.5</c></b> then y should be <b><c>2</c></b>).</remarks>
		</member>
		<member name="M:PlayerTextDrawSetOutline" syntax="PlayerTextDrawSetOutline(playerid, text, size)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetOutline"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the outline of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the outline of
			</param>
			<param name="size">
				The thickness of the outline
			</param>
			<summary>Set the outline of a player-textdraw. The outline colour cannot be changed unless <a href="#PlayerTextDrawBackgroundColor">PlayerTextDrawBackgroundColor</a> is used.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawSetPosition" syntax="PlayerTextDrawSetPosition(playerid, text, x, y)">
			<attribute name="native"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:PlayerTextDrawSetPreviewModel" syntax="PlayerTextDrawSetPreviewModel(playerid, text, modelindex)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetPreviewMode"/>
			<param name="playerid">
				The PlayerTextDraw player ID
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The textdraw id that will display the 3D preview
			</param>
			<param name="modelindex">
				The GTA SA or SA:MP model ID to display
			</param>
			<summary>Sets a player textdraw 2D preview sprite of a specified model ID.</summary>    <seealso name="PlayerTextDrawSetPreviewRot"/> <seealso name="PlayerTextDrawSetPreviewVehCol"/> <seealso name="PlayerTextDrawFont"/> <seealso name="OnPlayerClickPlayerTextDraw"/> <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font type <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> in order for this function to have effect.</remarks> <returns> <b><c>1</c></b>: The function executed successfully. If an invalid model is passed 'success' is reported, but the model will appear as a yellow/black question mark.<p/> <b><c>0</c></b>: The function failed to execute. Player and/or textdraw do not exist. </returns>
		</member>
		<member name="M:PlayerTextDrawSetPreviewRot" syntax="PlayerTextDrawSetPreviewRot(playerid, text, fRotX, fRotY, fRotZ, fZoom)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetPreviewRot"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to change
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to change
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation value
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation value
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation value
			</param>
			<param name="fZoom">
				<paraminfo>Float </paraminfo>
				The zoom value, smaller values make the camera closer and larger values make the camera further away (optional=<b><c>1.0</c></b>)
			</param>
			<summary>Sets the rotation and zoom of a 3D model preview player-textdraw.</summary>       <seealso name="TextDrawSetPreviewRot"/> <seealso name="PlayerTextDrawSetPreviewModel"/> <seealso name="PlayerTextDrawSetPreviewVehCol"/> <seealso name="PlayerTextDrawFont"/> <seealso name="OnPlayerClickPlayerTextDraw"/> <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font type <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> and already have a model set in order for this function to have effect.</remarks>
		</member>
		<member name="M:PlayerTextDrawSetPreviewVehCol" syntax="PlayerTextDrawSetPreviewVehCol(playerid, text, color1, color2)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetPreviewVehC"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to change
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player's player-textdraw to change
			</param>
			<param name="color1">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Color_IDs">color</a> to set the vehicle's primary color to
			</param>
			<param name="color2">
				The <a href="http://wiki.sa-mp.com/wiki/Vehicle_Color_IDs">color</a> to set the vehicle's secondary color to
			</param>
			<summary>Set the color of a vehicle in a player-textdraw model preview (if a vehicle is shown).</summary>     <seealso name="PlayerTextDrawSetPreviewModel"/> <seealso name="PlayerTextDrawSetPreviewRot"/> <seealso name="PlayerTextDrawFont"/> <seealso name="OnPlayerClickPlayerTextDraw"/> <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> and be showing a vehicle in order for this function to have effect.</remarks>
		</member>
		<member name="M:PlayerTextDrawSetProportional" syntax="PlayerTextDrawSetProportional(playerid, text, set)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetProportiona"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the proportionality of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the proportionality of
			</param>
			<param name="set">
				<b><c>1</c></b> to enable proportionality, <b><c>0</c></b> to disable
			</param>
			<summary>Appears to scale text spacing to a proportional ratio. Useful when using <a href="#PlayerTextDrawLetterSize">PlayerTextDrawLetterSize</a> to ensure the text has even character spacing.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawSetSelectable" syntax="PlayerTextDrawSetSelectable(playerid, text, set)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetSelectable"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the selectability of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the selectability of
			</param>
			<param name="set">
				Set the player-textdraw selectable (<b><c>1</c></b>) or non-selectable (<b><c>0</c></b>). By default this is <b><c>0</c></b>
			</param>
			<summary>Toggles whether a player-textdraw can be selected or not.</summary>    <seealso name="SelectTextDraw"/> <seealso name="CancelSelectTextDraw"/> <seealso name="OnPlayerClickPlayerTextDraw"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks><a href="#PlayerTextDrawSetSelectable">PlayerTextDrawSetSelectable</a> MUST be used BEFORE the textdraw is shown to the player.</remarks> <remarks>Use <a href="#PlayerTextDrawTextSize">PlayerTextDrawTextSize</a> to define the clickable area.</remarks>
		</member>
		<member name="M:PlayerTextDrawSetShadow" syntax="PlayerTextDrawSetShadow(playerid, text, size)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetShadow"/>
			<referrer name="DamageFeedUpdate"/>
			<param name="playerid">
				The ID of the player to show the textdraw for
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to show
			</param>
			<param name="size">
				The size of the shadow. <b><c>0</c></b> will hide the shadow
			</param>
			<summary>Show a player-textdraw to the player it was created for.</summary>    <seealso name="PlayerTextDrawHide"/> <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawSetString" syntax="PlayerTextDrawSetString(playerid, text, string[])">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawSetString"/>
			<referrer name="DamageFeedUpdateText"/>
			<param name="playerid">
				The ID of the player who's textdraw string to set
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to change
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The new string for the TextDraw
			</param>
			<summary>Change the text of a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>There are limits to the length of textdraw strings! See <a href="http://wiki.sa-mp.com/wiki/Limits">Limits</a> for more info.</remarks> <remarks>You don't have to show the TextDraw again in order to apply the changes.</remarks>
		</member>
		<member name="M:PlayerTextDrawShow" syntax="PlayerTextDrawShow(playerid, text)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawShow"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdateText"/>
			<param name="playerid">
				The ID of the player to show the textdraw for
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to show
			</param>
			<summary>Show a player-textdraw to the player it was created for.</summary>   <seealso name="PlayerTextDrawHide"/> <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:PlayerTextDrawTextSize" syntax="PlayerTextDrawTextSize(playerid, text, x, y)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawTextSize"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the size of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the size of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The size on the X axis (left/right) following the same 640x480 grid as <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The size on the Y axis (up/down) following the same 640x480 grid as <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<summary>Change the size of a player-textdraw (box if <a href="#PlayerTextDrawUseBox">PlayerTextDrawUseBox</a> is enabled and/or clickable area for use with <a href="#PlayerTextDrawSetSelectable">PlayerTextDrawSetSelectable</a>).</summary>     <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawUseBox"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks> The x and y have different meanings with different PlayerTextDrawAlignment values:<p/> <ul> <li><b><c>1</c></b> (left): they are the right-most corner of the box, absolute coordinates.</li> <li><b><c>2</c></b> (center): they need to inverted (switch the two) and the x value is the overall width of the box.</li> <li><b><c>3</c></b> (right): the x and y are the coordinates of the left-most corner of the box </li> </ul> </remarks> <remarks> Using font type <b><c>4</c></b> (sprite) and <b><c>5</c></b> (model preview) converts X and Y of this function from corner coordinates to WIDTH and HEIGHT (offsets).<p/> The TextDraw box starts <b><c>10.0</c></b> units up and <b><c>5.0</c></b> to the left as the origin (<a href="#TextDrawCreate">TextDrawCreate</a> coordinate).<p/> This function defines the clickable area for use with <a href="#PlayerTextDrawSetSelectable">PlayerTextDrawSetSelectable</a>, whether a box is shown or not. </remarks>
		</member>
		<member name="M:PlayerTextDrawUseBox" syntax="PlayerTextDrawUseBox(playerid, text, use)">
			<attribute name="native"/>
			<referrer name="WC_PlayerTextDrawUseBox"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
				The ID of the player whose textdraw to toggle the box of
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to toggle the box of
			</param>
			<param name="use">
				<b><c>1</c></b> to use a box or <b><c>0</c></b> to not use a box
			</param>
			<summary>Toggle the box on a player-textdraw.</summary>    <seealso name="CreatePlayerTextDraw"/> <seealso name="PlayerTextDrawDestroy"/> <seealso name="PlayerTextDrawColor"/> <seealso name="PlayerTextDrawBoxColor"/> <seealso name="PlayerTextDrawBackgroundColor"/> <seealso name="PlayerTextDrawAlignment"/> <seealso name="PlayerTextDrawFont"/> <seealso name="PlayerTextDrawLetterSize"/> <seealso name="PlayerTextDrawTextSize"/> <seealso name="PlayerTextDrawSetOutline"/> <seealso name="PlayerTextDrawSetShadow"/> <seealso name="PlayerTextDrawSetProportional"/> <seealso name="PlayerTextDrawSetString"/> <seealso name="PlayerTextDrawShow"/> <seealso name="PlayerTextDrawHide"/> <remarks>This feature (player-textdraws) was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks>
		</member>
		<member name="M:Pop" syntax="Pop(&amp;arg)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="false"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<dependency name="true"/>
			<param name="arg">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:PosInFront" syntax="PosInFront(playerid, distance, &amp;x, &amp;y, &amp;z)">
			<stacksize value="7"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="distance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:Premiums" syntax="Premiums(playerid)">
			<attribute name="public"/>
			<stacksize value="2790"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="GetPlayerIdFromName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_num_rows"/>
			<dependency name="format"/>
			<dependency name="strcat"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:PrintAmxHeader" syntax="PrintAmxHeader()">
			<stacksize value="4"/>
			<dependency name="AMX_HDR_AMX_VERSION"/>
			<dependency name="AMX_HDR_CIP"/>
			<dependency name="AMX_HDR_COD"/>
			<dependency name="AMX_HDR_DAT"/>
			<dependency name="AMX_HDR_DEFSIZE"/>
			<dependency name="AMX_HDR_FILE_VERSION"/>
			<dependency name="AMX_HDR_FLAGS"/>
			<dependency name="AMX_HDR_HEA"/>
			<dependency name="AMX_HDR_LIBRARIES"/>
			<dependency name="AMX_HDR_MAGIC"/>
			<dependency name="AMX_HDR_NAMETABLE"/>
			<dependency name="AMX_HDR_NATIVES"/>
			<dependency name="AMX_HDR_PUBLICS"/>
			<dependency name="AMX_HDR_PUBVARS"/>
			<dependency name="AMX_HDR_SIZE"/>
			<dependency name="AMX_HDR_STP"/>
			<dependency name="AMX_HDR_TAGS"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="printf"/>
		</member>
		<member name="M:PrintArg" syntax="PrintArg(n)">
			<stacksize value="1"/>
			<dependency name="print"/>
			<param name="n">
				The numeric parameter position to print.
			</param>
			  <returns>  Prints a string passed as a vararg to the calling function.  </returns> 
		</member>
		<member name="M:ProcessDamage" syntax="ProcessDamage(&amp;playerid, &amp;issuerid, &amp;amount, &amp;weaponid, &amp;bodypart, &amp;bullets)">
			<stacksize value="13"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="AddRejectedHit"/>
			<dependency name="DAMAGE_TYPE_MULTIPLIER"/>
			<dependency name="DAMAGE_TYPE_RANGE"/>
			<dependency name="DAMAGE_TYPE_RANGE_MULTIPLIER"/>
			<dependency name="DAMAGE_TYPE_STATIC"/>
			<dependency name="GetPlayerDistanceFromPoint"/>
			<dependency name="GetPlayerFightingStyle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="HIT_TOO_FAR_FROM_ORIGIN"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="IsHighRateWeapon"/>
			<dependency name="IsMeleeWeapon"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="WC_INVALID_DAMAGE"/>
			<dependency name="WC_INVALID_DISTANCE"/>
			<dependency name="WC_NO_ERROR"/>
			<dependency name="WC_NO_ISSUER"/>
			<dependency name="e_Length"/>
			<dependency name="floatfract"/>
			<dependency name="s_DamageRangeRanges"/>
			<dependency name="s_DamageRangeSteps"/>
			<dependency name="s_DamageRangeValues"/>
			<dependency name="s_DamageType"/>
			<dependency name="s_LastExplosive"/>
			<dependency name="s_LastShot"/>
			<dependency name="s_WeaponDamage"/>
			<dependency name="true"/>
			<param name="playerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="issuerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="amount">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="weaponid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="bodypart">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="bullets">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:Push" syntax="Push(arg)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="PushString"/>
			<dependency name="false"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<dependency name="true"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:PushString" syntax="PushString(string[])">
			<tagname value="bool"/>
			<stacksize value="5"/>
			<dependency name="Push"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:PutPlayerInVehicle" syntax="PutPlayerInVehicle(playerid, vehicleid, seatid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_veh"/>
			<param name="playerid">
				The ID of the player to put in a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle to put the player in
			</param>
			<param name="seatid">
				The ID of the seat to put the player in
			</param>
			<summary>Puts a player in a vehicle.</summary>    <seealso name="RemovePlayerFromVehicle"/> <seealso name="GetPlayerVehicleID"/> <seealso name="GetPlayerVehicleSeat"/> <seealso name="OnPlayerEnterVehicle"/> <remarks>If this function is used on a player that is already in a vehicle, other players will still see them in their previous vehicle. To fix this, first remove the player from the vehicle.</remarks> <remarks>If the seat is invalid or is taken, will cause a crash when they EXIT the vehicle.</remarks> <remarks>You can use <a href="#GetPlayerVehicleSeat">GetPlayerVehicleSeat</a> in a loop to check if a seat is occupied by any players.</remarks> <remarks> <b>Seats:</b><p/> <ul> <li><b><c>0</c></b> - driver.</li> <li><b><c>1</c></b> - front passenger.</li> <li><b><c>2</c></b> - back-left passenger.</li> <li><b><c>3</c></b> - back-right passenger.</li> <li><b><c>4+</c></b> - passenger seats (coach etc.).</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player or vehicle don't exist. </returns>
		</member>
		<member name="M:R@" syntax="R@(buffer[])">
			<stacksize value="6"/>
			<dependency name="setproperty"/>
			<param name="buffer">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:Random" syntax="Random(min, max)">
			<stacksize value="3"/>
			<dependency name="cellmin"/>
			<dependency name="random"/>
			<param name="min">
			</param>
			<param name="max">
				Upper bound.
			</param>
			<param name="minmax">Lower bound, or upper bound when only parameter.</param>    <remarks>  Generate a random float between the given numbers (min &lt;= n &lt; max).  Default minimum is 0 (changes the parameter order).  </remarks> 
		</member>
		<member name="M:RandomFloat" syntax="RandomFloat(min, max, dp)">
			<tagname value="Float"/>
			<stacksize value="5"/>
			<dependency name="operator!=(Float:,Float:)"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="float"/>
			<dependency name="floatpower"/>
			<dependency name="floatround"/>
			<dependency name="random"/>
			<param name="min">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="max">
				<paraminfo>Float </paraminfo>
				Upper bound.
			</param>
			<param name="dp">
				How small to make the differences
			</param>
			<param name="minmax">Lower bound, or upper bound when only parameter.</param>      <remarks>  Generate a random float between the given numbers (min &lt;= n &lt; max).  Default  minimum is 0.0 (changes the parameter order).  </remarks> 
		</member>
		<member name="M:Range" syntax="Range(arr[], num)">
			<stacksize value="4"/>
			<dependency name="cellmax"/>
			<dependency name="cellmin"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array whose values need averaging.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <returns>  The mathematical range of the values of the array.  </returns> 
		</member>
		<member name="M:ReadAmxCell" syntax="ReadAmxCell(offset)">
			<stacksize value="5"/>
			<dependency name="GetAmxAddress"/>
			<dependency name="ReadPhysMemoryCell"/>
			<param name="offset">
			</param>
		</member>
		<member name="M:ReadAmxMemory" syntax="ReadAmxMemory(address)">
			<stacksize value="1"/>
			<referrer name="ReadAmxMemoryArray"/>
			<referrer name="GetRawAmxHeader"/>
			<referrer name="NtCompare"/>
			<referrer name="NtCopy"/>
			<referrer name="GetPublicIndexFromAddress"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="HookPublic"/>
			<referrer name="GetNativeIndexFromAddress"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="HookNative"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetPubVarIndexFromAddress"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagIndexFromName"/>
			<referrer name="GetTagIndexFromID"/>
			<referrer name="GetFrameFunction"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="DisasmGetOperand"/>
			<referrer name="DisasmGetNumOperands"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="DisasmWriteDataRowChar"/>
			<referrer name="DisasmWriteDataRowHex"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="CodeScanCheckJumpTarget"/>
			<referrer name="CodeScanAddSwitchTarget"/>
			<referrer name="CodeScanRunFastPrescan"/>
			<referrer name="YVA2_FoundCall"/>
			<param name="address">
			</param>
		</member>
		<member name="M:ReadAmxMemoryArray" syntax="ReadAmxMemoryArray(address, values[], size)">
			<stacksize value="5"/>
			<dependency name="ReadAmxMemory"/>
			<param name="address">
			</param>
			<param name="values">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:ReadOpcodeNearThis" syntax="ReadOpcodeNearThis(offset)">
			<tagname value="Opcode"/>
			<stacksize value="2"/>
			<referrer name="HaveToRelocateOpcodes"/>
			<referrer name="RelocateOpcodeNow"/>
			<dependency name="OP_NONE"/>
			<param name="offset">
			</param>
		</member>
		<member name="M:ReadPhysMemory" syntax="ReadPhysMemory(address, dest[], num)">
			<stacksize value="5"/>
			<dependency name="AbsToRel"/>
			<param name="address">
			</param>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:ReadPhysMemoryCell" syntax="ReadPhysMemoryCell(address)">
			<stacksize value="5"/>
			<referrer name="ReadAmxCell"/>
			<dependency name="AbsToRel"/>
			<param name="address">
			</param>
		</member>
		<member name="M:RelToAbs" syntax="RelToAbs(address)">
			<stacksize value="3"/>
			<referrer name="refabs"/>
			<dependency name="GetAmxBaseAddress"/>
			<dependency name="GetDat"/>
			<param name="address">
			</param>
		</member>
		<member name="M:RelocateOpcode" syntax="RelocateOpcode(opcode)">
			<tagname value="Opcode"/>
			<stacksize value="3"/>
			<referrer name="GetFrameFunction"/>
			<referrer name="SysreqC"/>
			<referrer name="SysreqD"/>
			<referrer name="SysreqCN"/>
			<referrer name="SysreqDN"/>
			<referrer name="CallNative"/>
			<referrer name="CallNativeByAddress"/>
			<referrer name="AsmEmitOpcode"/>
			<referrer name="AsmEmitPadding"/>
			<referrer name="CodeScanInit"/>
			<referrer name="YVA2_CodeGenShiftCode"/>
			<referrer name="CGen_SetupCodeSpace"/>
			<referrer name="VA_OnCodeInit"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="InitOpcodeTable"/>
			<dependency name="opcode_table"/>
			<dependency name="opcode_table_is_ready"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:RelocateOpcodeNow" syntax="RelocateOpcodeNow(opcode)">
			<tagname value="Opcode"/>
			<stacksize value="5"/>
			<referrer name="RelocateOpcodeNow"/>
			<referrer name="InitOpcodeTable"/>
			<dependency name="HaveToRelocateOpcodes"/>
			<dependency name="OP_ADD"/>
			<dependency name="OP_ADDR_ALT"/>
			<dependency name="OP_ADDR_PRI"/>
			<dependency name="OP_ADD_C"/>
			<dependency name="OP_ALIGN_ALT"/>
			<dependency name="OP_ALIGN_PRI"/>
			<dependency name="OP_AND"/>
			<dependency name="OP_BOUNDS"/>
			<dependency name="OP_BREAK"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CASETBL"/>
			<dependency name="OP_CMPS"/>
			<dependency name="OP_CONST_ALT"/>
			<dependency name="OP_CONST_PRI"/>
			<dependency name="OP_DEC"/>
			<dependency name="OP_DEC_ALT"/>
			<dependency name="OP_DEC_I"/>
			<dependency name="OP_DEC_PRI"/>
			<dependency name="OP_DEC_S"/>
			<dependency name="OP_EQ"/>
			<dependency name="OP_EQ_C_ALT"/>
			<dependency name="OP_EQ_C_PRI"/>
			<dependency name="OP_FILL"/>
			<dependency name="OP_GEQ"/>
			<dependency name="OP_GRTR"/>
			<dependency name="OP_HALT"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_IDXADDR"/>
			<dependency name="OP_IDXADDR_B"/>
			<dependency name="OP_INC"/>
			<dependency name="OP_INC_ALT"/>
			<dependency name="OP_INC_I"/>
			<dependency name="OP_INC_PRI"/>
			<dependency name="OP_INC_S"/>
			<dependency name="OP_INVERT"/>
			<dependency name="OP_JEQ"/>
			<dependency name="OP_JGEQ"/>
			<dependency name="OP_JGRTR"/>
			<dependency name="OP_JLEQ"/>
			<dependency name="OP_JLESS"/>
			<dependency name="OP_JNEQ"/>
			<dependency name="OP_JNZ"/>
			<dependency name="OP_JSGEQ"/>
			<dependency name="OP_JSGRTR"/>
			<dependency name="OP_JSLEQ"/>
			<dependency name="OP_JSLESS"/>
			<dependency name="OP_JUMP"/>
			<dependency name="OP_JZER"/>
			<dependency name="OP_LCTRL"/>
			<dependency name="OP_LEQ"/>
			<dependency name="OP_LESS"/>
			<dependency name="OP_LIDX"/>
			<dependency name="OP_LIDX_B"/>
			<dependency name="OP_LOAD_ALT"/>
			<dependency name="OP_LOAD_I"/>
			<dependency name="OP_LOAD_PRI"/>
			<dependency name="OP_LOAD_S_ALT"/>
			<dependency name="OP_LOAD_S_PRI"/>
			<dependency name="OP_LODB_I"/>
			<dependency name="OP_LREF_ALT"/>
			<dependency name="OP_LREF_PRI"/>
			<dependency name="OP_LREF_S_ALT"/>
			<dependency name="OP_LREF_S_PRI"/>
			<dependency name="OP_MOVE_ALT"/>
			<dependency name="OP_MOVE_PRI"/>
			<dependency name="OP_MOVS"/>
			<dependency name="OP_NEG"/>
			<dependency name="OP_NEQ"/>
			<dependency name="OP_NOP"/>
			<dependency name="OP_NOT"/>
			<dependency name="OP_OR"/>
			<dependency name="OP_POP_ALT"/>
			<dependency name="OP_POP_PRI"/>
			<dependency name="OP_PROC"/>
			<dependency name="OP_PUSH"/>
			<dependency name="OP_PUSH_ADR"/>
			<dependency name="OP_PUSH_ALT"/>
			<dependency name="OP_PUSH_C"/>
			<dependency name="OP_PUSH_PRI"/>
			<dependency name="OP_PUSH_S"/>
			<dependency name="OP_RET"/>
			<dependency name="OP_RETN"/>
			<dependency name="OP_SCTRL"/>
			<dependency name="OP_SDIV"/>
			<dependency name="OP_SDIV_ALT"/>
			<dependency name="OP_SGEQ"/>
			<dependency name="OP_SGRTR"/>
			<dependency name="OP_SHL"/>
			<dependency name="OP_SHL_C_ALT"/>
			<dependency name="OP_SHL_C_PRI"/>
			<dependency name="OP_SHR"/>
			<dependency name="OP_SHR_C_ALT"/>
			<dependency name="OP_SHR_C_PRI"/>
			<dependency name="OP_SIGN_ALT"/>
			<dependency name="OP_SIGN_PRI"/>
			<dependency name="OP_SLEQ"/>
			<dependency name="OP_SLESS"/>
			<dependency name="OP_SMUL"/>
			<dependency name="OP_SMUL_C"/>
			<dependency name="OP_SREF_ALT"/>
			<dependency name="OP_SREF_PRI"/>
			<dependency name="OP_SREF_S_ALT"/>
			<dependency name="OP_SREF_S_PRI"/>
			<dependency name="OP_SSHR"/>
			<dependency name="OP_STACK"/>
			<dependency name="OP_STOR_ALT"/>
			<dependency name="OP_STOR_I"/>
			<dependency name="OP_STOR_PRI"/>
			<dependency name="OP_STOR_S_ALT"/>
			<dependency name="OP_STOR_S_PRI"/>
			<dependency name="OP_STRB_I"/>
			<dependency name="OP_SUB"/>
			<dependency name="OP_SUB_ALT"/>
			<dependency name="OP_SWAP_ALT"/>
			<dependency name="OP_SWAP_PRI"/>
			<dependency name="OP_SWITCH"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="OP_UDIV"/>
			<dependency name="OP_UDIV_ALT"/>
			<dependency name="OP_UMUL"/>
			<dependency name="OP_XCHG"/>
			<dependency name="OP_XOR"/>
			<dependency name="OP_ZERO"/>
			<dependency name="OP_ZERO_ALT"/>
			<dependency name="OP_ZERO_PRI"/>
			<dependency name="OP_ZERO_S"/>
			<dependency name="ReadOpcodeNearThis"/>
			<dependency name="debug"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:RemoveBuildingForPlayer" syntax="RemoveBuildingForPlayer(playerid, modelid, fX, fY, fZ, fRadius)">
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="RemoveDefaultVendingMachines"/>
			<param name="playerid">
				The ID of the player to remove the objects for
			</param>
			<param name="modelid">
				The model to remove
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X coordinate around which the objects will be removed
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y coordinate around which the objects will be removed
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z coordinate around which the objects will be removed
			</param>
			<param name="fRadius">
				<paraminfo>Float </paraminfo>
				The radius around the specified point to remove objects with the specified model
			</param>
			<summary>Removes a standard San Andreas model for a single player within a specified range.</summary>       <seealso name="DestroyObject"/> <seealso name="DestroyPlayerObject"/> <remarks>This function was added in <b>SA-MP 0.3d</b> and will not work in earlier versions!</remarks> <remarks>There appears to be a limit of around <b><c>1000</c></b> lines/objects. There is no workaround. </remarks> <remarks>When removing the same object for a player, they will crash. Commonly, players crash when reconnecting to the server because the server removes buildings on <a href="#OnPlayerConnect">OnPlayerConnect</a>. </remarks> <remarks>In <b>SA-MP 0.3.7</b> you can use <b><c>-1</c></b> for the modelid to remove all objects within the specified radius.</remarks>
		</member>
		<member name="M:RemoveDefaultVendingMachines" syntax="RemoveDefaultVendingMachines(playerid)">
			<stacksize value="9"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="ScriptInit"/>
			<dependency name="RemoveBuildingForPlayer"/>
			<dependency name="e_Model"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="sc_VendingMachines"/>
			<dependency name="sc_VendingMachines"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:RemovePlayerFromVehicle" syntax="RemovePlayerFromVehicle(playerid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_duel"/>
			<param name="playerid">
				The ID of the player to remove from their vehicle
			</param>
			<summary>Removes/ejects a player from their vehicle.</summary>  <seealso name="PutPlayerInVehicle"/> <remarks> The exiting animation is not synced for other players.<p/> This function will not work when used in <a href="#OnPlayerEnterVehicle">OnPlayerEnterVehicle</a>, because the player isn't in the vehicle when the callback is called. Use <a href="#OnPlayerStateChange">OnPlayerStateChange</a> instead.<p/> The player isn't removed if he is in a RC Vehicle. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:ResetDeepArray_Entry" syntax="ResetDeepArray_Entry(...)">
			<stacksize value="8"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<param name="...">
			</param>
		</member>
		<member name="M:ResetPlayerWeapons" syntax="ResetPlayerWeapons(playerid)">
			<attribute name="native"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="OnPlayerDeathFinished"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="g_CheckWeapons"/>
			<param name="playerid">
				The ID of the player whose weapons to remove
			</param>
			<summary>Removes all weapons from a player.</summary>  <seealso name="GivePlayerWeapon"/> <seealso name="GetPlayerWeapon"/> <remarks>To remove individual weapons from a player, set their ammo to <b><c>0</c></b> using <a href="#SetPlayerAmmo">SetPlayerAmmo</a>.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:ResetStaticAmxHeader" syntax="ResetStaticAmxHeader()">
			<stacksize value="4"/>
			<referrer name="GetAmxHeader"/>
			<referrer name="GetAmxHeaderComponent"/>
			<referrer name="PrintAmxHeader"/>
			<referrer name="GetPublicIndexFromAddress"/>
			<referrer name="GetPublicInfo"/>
			<referrer name="GetPublicIndexFromName"/>
			<referrer name="HookPublic"/>
			<referrer name="GetNativeIndexFromAddress"/>
			<referrer name="GetNativeInfo"/>
			<referrer name="GetNativeIndexFromName"/>
			<referrer name="HookNative"/>
			<referrer name="GetPubVarInfo"/>
			<referrer name="GetPubVarIndexFromName"/>
			<referrer name="GetPubVarIndexFromAddress"/>
			<referrer name="GetTagInfo"/>
			<referrer name="GetTagIndexFromName"/>
			<referrer name="GetTagIndexFromID"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="_Hooks_RepairStub"/>
			<dependency name="GetAmxHeaderNow"/>
			<dependency name="gHdr"/>
			<dependency name="gInitialized"/>
			<dependency name="true"/>
		</member>
		<member name="M:ResolveJITAddress" syntax="ResolveJITAddress(addr)">
			<stacksize value="1"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:ResyncPlayer" syntax="ResyncPlayer(playerid)">
			<stacksize value="4"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="SaveSyncData"/>
			<dependency name="SpawnPlayerInPlace"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ReturnPlayerName" syntax="ReturnPlayerName(playerid)">
			<stacksize value="29"/>
			<dependency name="GetPlayerName"/>
			<dependency name="ReturnPlayerName"/>
			<param name="playerid">
				Player whose name you want to get.
			</param>
			<summary>  ReturnPlayerName  </summary>    <remarks>  Now uses a global array to avoid repeated function calls.  Actually doesn't  because that causes issues with multiple scripts.  </remarks> 
		</member>
		<member name="M:ReturnWeaponName" syntax="ReturnWeaponName(weaponid)">
			<stacksize value="26"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<dependency name="ReturnWeaponName"/>
			<dependency name="WC_GetWeaponName"/>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:RunShellcode" syntax="RunShellcode(code_ptr, align)">
			<stacksize value="5"/>
			<referrer name="GetAmxAddress"/>
			<dependency name="SysreqD"/>
			<param name="code_ptr">
			</param>
			<param name="align">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:S@" syntax="S@(v)">
			<stacksize value="6"/>
			<dependency name="Q@"/>
			<dependency name="getproperty"/>
			<dependency name="setproperty"/>
			<dependency name="strunpack"/>
			<param name="v">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:SPD" syntax="SPD(playerid, dialogid, style, caption[], info, button1[], button2[])">
			<attribute name="native"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<param name="playerid">
			</param>
			<param name="dialogid">
			</param>
			<param name="style">
			</param>
			<param name="caption">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="info">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
			<param name="button1">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="button2">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:SSCANF_Init" syntax="SSCANF_Init(players, invalid, len)">
			<attribute name="native"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<param name="players">
			</param>
			<param name="invalid">
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:SSCANF_IsConnected" syntax="SSCANF_IsConnected(playerid)">
			<attribute name="native"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SSCANF_Join" syntax="SSCANF_Join(playerid, name[], npc)">
			<attribute name="native"/>
			<referrer name="WC_OnFilterScriptInit"/>
			<referrer name="WC_OnGameModeInit"/>
			<referrer name="WC_OnPlayerConnect"/>
			<param name="playerid">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="npc">
			</param>
		</member>
		<member name="M:SSCANF_Leave" syntax="SSCANF_Leave(playerid)">
			<attribute name="native"/>
			<referrer name="WC_OnPlayerDisconnect"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SSCANF_OnFilterScriptInit" syntax="SSCANF_OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ScriptInit_CallOnCodeInit"/>
			<dependency name="ScriptInit_OnFilterScriptInit"/>
			<dependency name="ScriptInit_PostInitFuncs_"/>
			<dependency name="ScriptInit_PreInitFuncs_"/>
			<dependency name="YSI_FILTERSCRIPT"/>
			<dependency name="YSI_g_sCodeJITing"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<transition keep="true" target="_script_init_fix_state : true"/>  <transition keep="true" target="_ALS : _ALS_go"/>  <transition target="_ALS_go"/>

		</member>
		<member name="M:SSCANF_OnGameModeInit" syntax="SSCANF_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ScriptInit_CallOnCodeInit"/>
			<dependency name="ScriptInit_OnGameModeInit"/>
			<dependency name="ScriptInit_PostInitFuncs_"/>
			<dependency name="ScriptInit_PreInitFuncs_"/>
			<dependency name="YSI_FILTERSCRIPT"/>
			<dependency name="YSI_g_sCodeJITing"/>
			<dependency name="false"/>
			<transition keep="true" target="_script_init_fix_state : false"/>  <transition keep="true" target="_ALS : _ALS_go"/>  <transition target="_ALS_go"/>

		</member>
		<member name="M:SSCANF_OnPlayerConnect" syntax="SSCANF_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="21"/>
			<dependency name="GetPlayerIp"/>
			<dependency name="IPToInt"/>
			<dependency name="YSI_gPlayerIP"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SSCANF_OnPlayerDisconnect" syntax="SSCANF_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="YSI_gPlayerIP"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:SaveAccount" syntax="SaveAccount(playerid)">
			<stacksize value="425"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="OnPlayerModelSelection"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="format"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pACode"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pCash"/>
			<dependency name="pColor"/>
			<dependency name="pDeaths"/>
			<dependency name="pDutyTime"/>
			<dependency name="pHours"/>
			<dependency name="pInClan"/>
			<dependency name="pJailed"/>
			<dependency name="pJails"/>
			<dependency name="pKicks"/>
			<dependency name="pKills"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="pMutes"/>
			<dependency name="pPass"/>
			<dependency name="pPremium"/>
			<dependency name="pRank"/>
			<dependency name="pSQLID"/>
			<dependency name="pSkin"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SaveSyncData" syntax="SaveSyncData(playerid)">
			<stacksize value="7"/>
			<referrer name="ResyncPlayer"/>
			<referrer name="OnPlayerDeath"/>
			<dependency name="GetPlayerArmour"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerHealth"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSkin"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="GetPlayerWeapon"/>
			<dependency name="GetPlayerWeaponData"/>
			<dependency name="e_Armour"/>
			<dependency name="e_Health"/>
			<dependency name="e_PosA"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Team"/>
			<dependency name="e_Weapon"/>
			<dependency name="e_WeaponAmmo"/>
			<dependency name="e_WeaponId"/>
			<dependency name="s_SyncData"/>
			<dependency name="s_SyncData"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ScriptExit" syntax="ScriptExit()">
			<stacksize value="6"/>
			<referrer name="OnGameModeExit"/>
			<referrer name="OnFilterScriptExit"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="DestroyVendingMachines"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerState"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="KillTimer"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="SetFakeArmour"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetFakeHealth"/>
			<dependency name="SetHealthBarVisible"/>
			<dependency name="SetKnifeSync"/>
			<dependency name="SetPlayerArmour"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerTeam"/>
			<dependency name="TextDrawDestroy"/>
			<dependency name="false"/>
			<dependency name="s_DamageFeedGiven"/>
			<dependency name="s_DamageFeedTaken"/>
			<dependency name="s_HealthBarBackground"/>
			<dependency name="s_HealthBarBorder"/>
			<dependency name="s_HealthBarForeground"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalTextDraw"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_PlayerTeam"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
		</member>
		<member name="M:ScriptInit" syntax="ScriptInit()">
			<stacksize value="9"/>
			<referrer name="OnGameModeInit"/>
			<referrer name="OnFilterScriptInit"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="CreateVendingMachines"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="GetPlayerArmour"/>
			<dependency name="GetPlayerHealth"/>
			<dependency name="GetPlayerState"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="GetPlayerVirtualWorld"/>
			<dependency name="GetServerVarAsInt"/>
			<dependency name="GetTickCount"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="RemoveDefaultVendingMachines"/>
			<dependency name="SetHealthBarVisible"/>
			<dependency name="SetKnifeSync"/>
			<dependency name="SetPlayerTeam"/>
			<dependency name="SetPlayerVirtualWorld"/>
			<dependency name="TextDrawBoxColor"/>
			<dependency name="TextDrawCreate"/>
			<dependency name="TextDrawLetterSize"/>
			<dependency name="TextDrawTextSize"/>
			<dependency name="TextDrawUseBox"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="e_Skin"/>
			<dependency name="false"/>
			<dependency name="printf"/>
			<dependency name="s_AlreadyConnected"/>
			<dependency name="s_ClassSpawnInfo"/>
			<dependency name="s_ClassSpawnInfo"/>
			<dependency name="s_CustomVendingMachines"/>
			<dependency name="s_DamageFeedLastUpdate"/>
			<dependency name="s_DamageTakenSound"/>
			<dependency name="s_HealthBarBackground"/>
			<dependency name="s_HealthBarBorder"/>
			<dependency name="s_InClassSelection"/>
			<dependency name="s_InternalTextDraw"/>
			<dependency name="s_LagCompMode"/>
			<dependency name="s_LastStop"/>
			<dependency name="s_LastUpdate"/>
			<dependency name="s_LastVehicleEnterTime"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerFallbackSpawnInfo"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_PlayerTeam"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="s_World"/>
			<dependency name="true"/>
		</member>
		<member name="M:ScriptInit_CallOnCodeInit" syntax="ScriptInit_CallOnCodeInit(jit)">
			<stacksize value="1"/>
			<referrer name="OnJITCompile"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="jit">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:ScriptInit_OnCodeInit" syntax="ScriptInit_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="Debug_Print0"/>
			<dependency name="Debug_SetState"/>
			<dependency name="YSI_FILTERSCRIPT"/>
			<remarks>  Does some strange mangling of <c>YSI_FILTERSCRIPT</c> because at one point I  found a compiler bug where the first automata in the script could conflict  with the first variable in the script.  I don't know what triggered it, and  it has never shown up since I messed about with this file to try mangle some  things.  Never the less, if it ever happens again this code might detect it.  Actually, that's less likely now, since that variable is now very unlikely  to be the first in the script ever.  </remarks> 
		</member>
		<member name="M:ScriptInit_OnFilterScriptExit" syntax="ScriptInit_OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="WC_OnFilterScriptExit"/>
		</member>
		<member name="M:ScriptInit_OnFilterScriptInit" syntax="ScriptInit_OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<dependency name="Indirect_Init"/>
		</member>
		<member name="M:ScriptInit_OnGameModeExit" syntax="ScriptInit_OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="WC_OnGameModeExit"/>
		</member>
		<member name="M:ScriptInit_OnGameModeInit" syntax="ScriptInit_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<dependency name="Indirect_Init"/>
		</member>
		<member name="M:ScriptInit_OnJITCompile" syntax="ScriptInit_OnJITCompile()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<referrer name="OnJITCompile"/>
			<dependency name="Indirect_Init"/>
		</member>
		<member name="M:ScriptInit_OnRuntimeError" syntax="ScriptInit_OnRuntimeError(code, &amp;suppress)">
			<attribute name="public"/>
			<stacksize value="16"/>
			<automaton name="_ALS"/>
			<referrer name="OnRuntimeError"/>
			<dependency name="AMX_Read"/>
			<dependency name="Hooks_Ordinal"/>
			<dependency name="Hooks_Ordinal"/>
			<dependency name="YSI_g_sActiveHooks"/>
			<dependency name="printf"/>
			<param name="code">
			</param>
			<param name="suppress">
				<paraminfo>bool &amp; </paraminfo>
			</param>
		</member>
		<member name="M:ScriptInit_OnScriptExit" syntax="ScriptInit_OnScriptExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="WC_OnFilterScriptExit"/>
			<referrer name="WC_OnGameModeExit"/>
		</member>
		<member name="M:ScriptInit_OnScriptInit" syntax="ScriptInit_OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<dependency name="YSIPrint"/>
			<dependency name="YVers_OnScriptInit"/>
		</member>
		<member name="M:ScriptInit_PostExitFuncs_" syntax="ScriptInit_PostExitFuncs_()">
			<stacksize value="9"/>
			<referrer name="WC_OnFilterScriptExit"/>
			<referrer name="WC_OnGameModeExit"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
		</member>
		<member name="M:ScriptInit_PostInitFuncs_" syntax="ScriptInit_PostInitFuncs_()">
			<stacksize value="9"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
		</member>
		<member name="M:ScriptInit_PreExitFuncs_" syntax="ScriptInit_PreExitFuncs_()">
			<stacksize value="9"/>
			<referrer name="WC_OnFilterScriptExit"/>
			<referrer name="WC_OnGameModeExit"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
		</member>
		<member name="M:ScriptInit_PreInitFuncs_" syntax="ScriptInit_PreInitFuncs_()">
			<stacksize value="9"/>
			<referrer name="SSCANF_OnFilterScriptInit"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
		</member>
		<member name="M:SelectTextDraw" syntax="SelectTextDraw(playerid, hovercolor)">
			<attribute name="native"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<param name="playerid">
				The ID of the player that should be able to select a textdraw
			</param>
			<param name="hovercolor">
				The color of the textdraw when hovering over with mouse (<b>RGBA</b>)
			</param>
			<summary>Display the cursor and allow the player to select a textdraw.</summary>   <seealso name="CancelSelectTextDraw"/> <seealso name="TextDrawSetSelectable"/> <seealso name="PlayerTextDrawSetSelectable"/> <seealso name="OnPlayerClickTextDraw"/> <seealso name="OnPlayerClickPlayerTextDraw"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks><a href="#TextDrawSetSelectable">TextDrawSetSelectable</a> or <a href="#PlayerTextDrawSetSelectable">PlayerTextDrawSetSelectable</a> MUST be used first, to allow a textdraw to be selectable.</remarks> <remarks>It is the TEXT which will be highlighted when hovered over, NOT the box (if one is shown).</remarks>
		</member>
		<member name="M:SendClientMessage" syntax="SendClientMessage(playerid, color, message[])">
			<attribute name="native"/>
			<referrer name="va_SendClientMessage"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_admins"/>
			<referrer name="Admini"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_teleports"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_toggletp"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="fr_CheckValidWeapons"/>
			<referrer name="pc_cmd_premiums"/>
			<referrer name="Premiums"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="OnPlayerCommandPerformed"/>
			<referrer name="OnPlayerCommandReceived"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<referrer name="pc_cmd_altchat"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_banlist"/>
			<referrer name="banInfo"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="aliasCheck"/>
			<referrer name="ipCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_color"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="AMessage"/>
			<referrer name="ClearFPlayer"/>
			<referrer name="CheckLoggedIn"/>
			<referrer name="afkCheck"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="PTime"/>
			<referrer name="OnPlayerText"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckUnban"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to display the message to
			</param>
			<param name="color">
				The color of the message (<b>RGBA</b>)
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The text that will be displayed <b>(max 144 characters)</b>
			</param>
			<summary>This function sends a message to a specific player with a chosen color in the chat. The whole line in the chatbox will be in the set color unless color embedding is used (since <b><c>0.3c</c></b>).</summary>    <seealso name="SendClientMessageToAll"/> <seealso name="SendPlayerMessageToPlayer"/> <seealso name="SendPlayerMessageToAll"/> <remarks>If a message is longer than 144 characters, it will not be sent. Truncation can be used to prevent this. Displaying a message on multiple lines will also solve this issue. </remarks> <remarks>Avoid using the percent sign (or format specifiers) in the actual message text without properly escaping it (like <b><c>%%</c></b>). It will result in crashes otherwise. </remarks> <remarks>You can use color embedding for multiple colors in the message. </remarks> <returns> <b><c>1</c></b>: The function executed successfully. Success is reported when the string is over 144 characters, but the message won't be sent.<p/> <b><c>0</c></b>: The function failed to execute. The player is not connected. </returns>
		</member>
		<member name="M:SendClientMessageToAll" syntax="SendClientMessageToAll(color, message[])">
			<attribute name="native"/>
			<referrer name="va_SendClientMessageToAll"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
			<param name="color">
				The color of the message (<b>RGBA</b>)
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The message to show (<b>max 144 characters</b>)
			</param>
			<summary>Displays a message in chat to all players. This is a multi-player equivalent of <a href="#SendClientMessage">SendClientMessage</a>.</summary>   <seealso name="SendClientMessage"/> <seealso name="SendPlayerMessageToAll"/> <remarks>Avoid using format specifiers in your messages without formatting the string that is sent. It will result in crashes otherwise.</remarks> <returns>This function always returns <b><c>1</c></b>.</returns>
		</member>
		<member name="M:SendDeathMessage" syntax="SendDeathMessage(killer, killee, weapon)">
			<attribute name="native"/>
			<referrer name="WC_SendDeathMessage"/>
			<param name="killer">
				The ID of the killer (can be <b><c>INVALID_PLAYER_ID</c></b>)
			</param>
			<param name="killee">
				The ID of the player that died
			</param>
			<param name="weapon">
				The <a href="http://wiki.sa-mp.com/wiki/Weapons">reason</a> (not always a weapon) for the victim's death. Special icons can also be used (<b><c>ICON_CONNECT</c></b> and <b><c>ICON_DISCONNECT</c></b>)
			</param>
			<summary>Adds a death to the 'killfeed' on the right-hand side of the screen for all players.</summary>    <seealso name="SendDeathMessageToPlayer"/> <seealso name="OnPlayerDeath"/> <remarks>Death messages can be cleared by using a valid player ID for <paramref name="killee"/> that is not connected.</remarks> <remarks>To show a death message for just a single player, use <a href="#SendDeathMessageToPlayer">SendDeathMessageToPlayer</a>. </remarks> <remarks>You can use NPCs to create your own custom death reasons. </remarks> <returns>This function always returns <b><c>1</c></b>, even if the function fails to execute. The function fails to execute (no death message shown) if <paramref name="killee"/> is invalid. If <paramref name="reason"/> is invalid, a generic skull-and-crossbones icon is shown. <paramref name="killer"/> being invalid (<b><c>INVALID_PLAYER_ID</c></b>) is valid.</returns>
		</member>
		<member name="M:SendFormatMessage" syntax="SendFormatMessage(playerid, color, message)">
			<attribute name="native"/>
			<referrer name="pc_cmd_aduty"/>
			<param name="playerid">
			</param>
			<param name="color">
			</param>
			<param name="message">
				<paraminfo>ConstAmxString </paraminfo>
			</param>
		</member>
		<member name="M:SendLastSyncData" syntax="SendLastSyncData(playerid, toplayerid, animation)">
			<attribute name="native"/>
			<referrer name="OnPlayerStreamIn"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="UpdateSyncData"/>
			<referrer name="WC_SpawnForStreamedIn"/>
			<param name="playerid">
			</param>
			<param name="toplayerid">
			</param>
			<param name="animation">
			</param>
		</member>
		<member name="M:SendPlayerMessageToAll" syntax="SendPlayerMessageToAll(senderid, message[])">
			<attribute name="native"/>
			<referrer name="va_SendPlayerMessageToAll"/>
			<param name="senderid">
				The ID of the sender. If invalid, the message will not be sent
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The message that will be sent
			</param>
			<summary>Sends a message in the name of a player to all other players on the server. The line will start with the sender's name in their color, followed by the message in white.</summary>   <seealso name="SendPlayerMessageToPlayer"/> <seealso name="SendClientMessageToAll"/> <seealso name="OnPlayerText"/> <remarks>Avoid using format specifiers in your messages without formatting the string that is sent. It will result in crashes otherwise.</remarks>
		</member>
		<member name="M:SendPlayerMessageToPlayer" syntax="SendPlayerMessageToPlayer(playerid, senderid, message[])">
			<attribute name="native"/>
			<referrer name="va_SendPlayerMessageToPlayer"/>
			<param name="playerid">
				The ID of the player who will receive the message
			</param>
			<param name="senderid">
				The sender's ID. If invalid, the message will not be sent
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
				The message that will be sent
			</param>
			<summary>Sends a message in the name of a player to another player on the server. The message will appear in the chat box but can only be seen by the user specified with <paramref name="playerid"/>. The line will start with the sender's name in their color, followed by the message in white.</summary>    <seealso name="SendPlayerMessageToAll"/> <seealso name="SendClientMessage"/> <seealso name="SendClientMessageToAll"/> <seealso name="OnPlayerText"/> <remarks>Avoid using format specifiers in your messages without formatting the string that is sent. It will result in crashes otherwise.</remarks>
		</member>
		<member name="M:SendRconCommand" syntax="SendRconCommand(command[])">
			<attribute name="native"/>
			<referrer name="va_SendRconCommand"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="pc_cmd_hostname"/>
			<param name="command">
				<paraminfo> [] </paraminfo>
				The RCON command to be executed
			</param>
			<summary>Sends an RCON (Remote Console) command.</summary>  <seealso name="IsPlayerAdmin"/> <seealso name="OnRconCommand"/> <seealso name="OnRconLoginAttempt"/> <remarks>Does not support login, due to the lack of a 'playerid' parameter.</remarks> <remarks>'password 0' will remove the server's password if one is set.</remarks> <returns>This function always returns <b><c>1</c></b>.</returns> <remarks>This function will result in <a href="#OnRconCommand">OnRconCommand</a> being called.</remarks>
		</member>
		<member name="M:Server_CrashDetectExists" syntax="Server_CrashDetectExists()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="YSI_g_sCrashdetect"/>
		</member>
		<member name="M:Server_IsFilterscript" syntax="Server_IsFilterscript()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="YSI_FILTERSCRIPT"/>
		</member>
		<member name="M:Server_IsGameMode" syntax="Server_IsGameMode()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="YSI_FILTERSCRIPT"/>
		</member>
		<member name="M:Server_JITComplete" syntax="Server_JITComplete()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="YSI_g_sCodeJITed"/>
		</member>
		<member name="M:Server_JITExists" syntax="Server_JITExists()">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="Hooks_SortPublics"/>
			<referrer name="CGen_OnCodeInit"/>
			<dependency name="YSI_g_sCodeJITing"/>
		</member>
		<member name="M:SetAmxFrame" syntax="SetAmxFrame(ptr)">
			<stacksize value="1"/>
			<param name="ptr">
			</param>
		</member>
		<member name="M:SetAmxHeapTop" syntax="SetAmxHeapTop(ptr)">
			<stacksize value="1"/>
			<param name="ptr">
			</param>
		</member>
		<member name="M:SetAmxNextInstructionPointer" syntax="SetAmxNextInstructionPointer(ptr)">
			<stacksize value="1"/>
			<param name="ptr">
			</param>
		</member>
		<member name="M:SetAmxStackBottom" syntax="SetAmxStackBottom(ptr)">
			<stacksize value="1"/>
			<param name="ptr">
			</param>
		</member>
		<member name="M:SetCameraBehindPlayer" syntax="SetCameraBehindPlayer(playerid)">
			<attribute name="native"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<param name="playerid">
				The player you want to restore the camera for
			</param>
			<summary>Restore the camera to a place behind the player, after using a function like <a href="#SetPlayerCameraPos">SetPlayerCameraPos</a>.</summary>  <seealso name="SetPlayerCameraPos"/> <seealso name="SetPlayerCameraLookAt"/>
		</member>
		<member name="M:SetCbugAllowed" syntax="SetCbugAllowed(enabled, playerid)">
			<stacksize value="4"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_CbugAllowed"/>
			<dependency name="s_CbugGlobal"/>
			<param name="enabled">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SetCurrentFramePreviousFrame" syntax="SetCurrentFramePreviousFrame(addr)">
			<stacksize value="5"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="SetFramePreviousFrame"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:SetCurrentFrameReturn" syntax="SetCurrentFrameReturn(addr)">
			<stacksize value="5"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="SetFrameReturn"/>
			<param name="addr">
			</param>
		</member>
		<member name="M:SetCurrentParameterCount" syntax="SetCurrentParameterCount(count)">
			<stacksize value="5"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="SetFrameParameterCount"/>
			<param name="count">
			</param>
		</member>
		<member name="M:SetCurrentParameterSize" syntax="SetCurrentParameterSize(size)">
			<stacksize value="5"/>
			<dependency name="GetCallerFrame"/>
			<dependency name="SetFrameParameterSize"/>
			<param name="size">
			</param>
		</member>
		<member name="M:SetCustomArmourRules" syntax="SetCustomArmourRules(armour_rules, torso_rules)">
			<stacksize value="1"/>
			<dependency name="s_DamageArmourToggle"/>
			<param name="armour_rules">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="torso_rules">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetCustomFallDamage" syntax="SetCustomFallDamage(toggle, damage_multiplier, death_velocity)">
			<stacksize value="3"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="floatabs"/>
			<dependency name="s_CustomFallDamage"/>
			<dependency name="s_FallDeathVelocity"/>
			<dependency name="s_WeaponDamage"/>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="damage_multiplier">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="death_velocity">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetCustomVendingMachines" syntax="SetCustomVendingMachines(toggle)">
			<stacksize value="3"/>
			<dependency name="CreateVendingMachines"/>
			<dependency name="DestroyVendingMachines"/>
			<dependency name="s_CustomVendingMachines"/>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetDamageFeed" syntax="SetDamageFeed(toggle)">
			<stacksize value="5"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_DamageFeed"/>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetDamageFeedForPlayer" syntax="SetDamageFeedForPlayer(playerid, toggle)">
			<stacksize value="4"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_DamageFeedPlayer"/>
			<param name="playerid">
			</param>
			<param name="toggle">
			</param>
		</member>
		<member name="M:SetDamageSounds" syntax="SetDamageSounds(taken, given)">
			<stacksize value="1"/>
			<dependency name="s_DamageGivenSound"/>
			<dependency name="s_DamageTakenSound"/>
			<param name="taken">
			</param>
			<param name="given">
			</param>
		</member>
		<member name="M:SetDisableSyncBugs" syntax="SetDisableSyncBugs(toggle)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="toggle">
			</param>
		</member>
		<member name="M:SetDynamicActorInvulnerable" syntax="SetDynamicActorInvulnerable(actorid, invulnerable)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="topQuery"/>
			<param name="actorid">
			</param>
			<param name="invulnerable">
			</param>
		</member>
		<member name="M:SetFakeArmour" syntax="SetFakeArmour(playerid, armour)">
			<attribute name="native"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
			</param>
			<param name="armour">
			</param>
		</member>
		<member name="M:SetFakeFacingAngle" syntax="SetFakeFacingAngle(playerid, angle)">
			<attribute name="native"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="ScriptExit"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<param name="playerid">
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetFakeHealth" syntax="SetFakeHealth(playerid, health)">
			<attribute name="native"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
			</param>
			<param name="health">
			</param>
		</member>
		<member name="M:SetFrameLocal" syntax="SetFrameLocal(frm_addr, param, value)">
			<stacksize value="1"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:SetFrameParameter" syntax="SetFrameParameter(frm_addr, param, value, idx)">
			<stacksize value="1"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
			<param name="value">
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:SetFrameParameterCount" syntax="SetFrameParameterCount(frm_addr, count)">
			<stacksize value="5"/>
			<referrer name="SetCurrentParameterCount"/>
			<dependency name="SetFrameParameterSize"/>
			<param name="frm_addr">
			</param>
			<param name="count">
			</param>
		</member>
		<member name="M:SetFrameParameterSize" syntax="SetFrameParameterSize(frm_addr, size)">
			<stacksize value="1"/>
			<referrer name="SetFrameParameterCount"/>
			<referrer name="SetCurrentParameterSize"/>
			<param name="frm_addr">
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:SetFramePreviousFrame" syntax="SetFramePreviousFrame(frm_addr, addr)">
			<stacksize value="1"/>
			<referrer name="SetCurrentFramePreviousFrame"/>
			<param name="frm_addr">
			</param>
			<param name="addr">
			</param>
		</member>
		<member name="M:SetFrameReturn" syntax="SetFrameReturn(frm_addr, addr)">
			<stacksize value="1"/>
			<referrer name="SetCurrentFrameReturn"/>
			<param name="frm_addr">
			</param>
			<param name="addr">
			</param>
		</member>
		<member name="M:SetFrameVariable" syntax="SetFrameVariable(frm_addr, param, value, idx)">
			<stacksize value="1"/>
			<param name="frm_addr">
			</param>
			<param name="param">
			</param>
			<param name="value">
			</param>
			<param name="idx">
			</param>
		</member>
		<member name="M:SetGameModeText" syntax="SetGameModeText(string[])">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The gamemode name to display
			</param>
			<summary>Set the name of the game mode, which appears in the server browser.</summary> 
		</member>
		<member name="M:SetHealthBarVisible" syntax="SetHealthBarVisible(playerid, toggle)">
			<stacksize value="5"/>
			<referrer name="OnPlayerDisconnect"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<dependency name="PlayerTextDrawHide"/>
			<dependency name="TextDrawHideForPlayer"/>
			<dependency name="TextDrawShowForPlayer"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="s_HealthBarBackground"/>
			<dependency name="s_HealthBarBorder"/>
			<dependency name="s_HealthBarForeground"/>
			<dependency name="s_HealthBarVisible"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetKnifeSync" syntax="SetKnifeSync(toggle)">
			<attribute name="native"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<param name="toggle">
			</param>
		</member>
		<member name="M:SetObjectMaterial" syntax="SetObjectMaterial(objectid, materialindex, modelid, txdname[], texturename[], materialcolor)">
			<attribute name="native"/>
			<referrer name="@yH_OnGameModeInit@009"/>
			<param name="objectid">
				The ID of the object to change the texture of
			</param>
			<param name="materialindex">
				The material index on the object to change (<b><c>0</c></b> to <b><c>15</c></b>)
			</param>
			<param name="modelid">
				The modelid on which the replacement texture is located. Use <b><c>0</c></b> for alpha. Use <b><c>-1</c></b> to change the material color without altering the texture
			</param>
			<param name="txdname">
				<paraminfo> [] </paraminfo>
				The name of the txd file which contains the replacement texture (use <b><c>"none"</c></b> if not required)
			</param>
			<param name="texturename">
				<paraminfo> [] </paraminfo>
				The name of the texture to use as the replacement (use <b><c>"none"</c></b> if not required)
			</param>
			<param name="materialcolor">
				The object color to set, as an integer or hex in <b>ARGB</b> color format. Using <b><c>0</c></b> keeps the existing material color (optional=<b><c>0</c></b>)
			</param>
			<summary>Replace the texture of an object with the texture from another model in the game.</summary>       <seealso name="SetPlayerObjectMaterial"/> <seealso name="SetObjectMaterialText"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Vertex lightning of the object will disappear if material color is changed.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. </returns>
		</member>
		<member name="M:SetObjectMaterialText" syntax="SetObjectMaterialText(objectid, text[], materialindex, materialsize, fontface[], fontsize, bold, fontcolor, backcolor, textalignment)">
			<attribute name="native"/>
			<referrer name="@yH_OnGameModeInit@009"/>
			<param name="objectid">
				The ID of the object to replace the texture of with text
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text to show on the object. (MAX <b>2048</b> characters)
			</param>
			<param name="materialindex">
				The object's material index to replace with text (optional=<b><c>0</c></b>)
			</param>
			<param name="materialsize">
				The size of the material (optional=<b><c>OBJECT_MATERIAL_SIZE_256x128</c></b>)
			</param>
			<param name="fontface">
				<paraminfo> [] </paraminfo>
				The font to use (optional=<b><c>"Arial"</c></b>)
			</param>
			<param name="fontsize">
				The size of the text (MAX <b>255</b>) (optional=<b><c>24</c></b>)
			</param>
			<param name="bold">
				Bold text. Set to <b><c>1</c></b> for bold, <b><c>0</c></b> for not (optional=<b><c>1</c></b>)
			</param>
			<param name="fontcolor">
				The color of the text, in <b>ARGB</b> format (optional=<b><c>-1</c></b>)
			</param>
			<param name="backcolor">
				The background color, in <b>ARGB</b> format (optional=<b><c>0</c></b>)
			</param>
			<param name="textalignment">
				The alignment of the text (optional=<b><c>OBJECT_MATERIAL_TEXT_ALIGN_LEFT</c></b>)
			</param>
			<summary>Replace the texture of an object with text.</summary>           <seealso name="SetPlayerObjectMaterialText"/> <seealso name="SetObjectMaterial"/> <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks>Color embedding can be used for multiple colors in the text.</remarks> <remarks> <b>Alignment:</b><p/> <ul> <li><b><c>OBJECT_MATERIAL_TEXT_ALIGN_LEFT</c></b> 0</li> <li><b><c>OBJECT_MATERIAL_TEXT_ALIGN_CENTER</c></b> 1</li> <li><b><c>OBJECT_MATERIAL_TEXT_ALIGN_RIGHT</c></b> 2</li> </ul> </remarks> <remarks> <b>Sizes:</b><p/> <ul> <li><b><c>OBJECT_MATERIAL_SIZE_32x32</c></b> 10</li> <li><b><c>OBJECT_MATERIAL_SIZE_64x32</c></b> 20</li> <li><b><c>OBJECT_MATERIAL_SIZE_64x64</c></b> 30</li> <li><b><c>OBJECT_MATERIAL_SIZE_128x32</c></b> 40</li> <li><b><c>OBJECT_MATERIAL_SIZE_128x64</c></b> 50</li> <li><b><c>OBJECT_MATERIAL_SIZE_128x128</c></b> 60</li> <li><b><c>OBJECT_MATERIAL_SIZE_256x32</c></b> 70</li> <li><b><c>OBJECT_MATERIAL_SIZE_256x64</c></b> 80</li> <li><b><c>OBJECT_MATERIAL_SIZE_256x128</c></b> 90</li> <li><b><c>OBJECT_MATERIAL_SIZE_256x256</c></b> 100</li> <li><b><c>OBJECT_MATERIAL_SIZE_512x64</c></b> 110</li> <li><b><c>OBJECT_MATERIAL_SIZE_512x128</c></b> 120</li> <li><b><c>OBJECT_MATERIAL_SIZE_512x256</c></b> 130</li> <li><b><c>OBJECT_MATERIAL_SIZE_512x512</c></b> 140</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. </returns>
		</member>
		<member name="M:SetPVarFloat" syntax="SetPVarFloat(playerid, varname[], float_value)">
			<attribute name="native"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<param name="playerid">
				The ID of the player whose player variable will be set
			</param>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the player variable
			</param>
			<param name="float_value">
				<paraminfo>Float </paraminfo>
				The float you want to save in the player variable
			</param>
			<summary>Set a float player variable's value.</summary>    <seealso name="SetPVarInt"/> <seealso name="GetPVarInt"/> <seealso name="SetPVarString"/> <seealso name="GetPVarString"/> <seealso name="GetPVarFloat"/> <seealso name="DeletePVar"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. Either the player specified is not connected, or the variable name is null or over 40 characters. </returns>
		</member>
		<member name="M:SetPVarInt" syntax="SetPVarInt(playerid, varname[], int_value)">
			<attribute name="native"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="HideModelSelectionMenu"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<param name="playerid">
				The ID of the player whose player variable will be set
			</param>
			<param name="varname">
				<paraminfo> [] </paraminfo>
				The name of the player variable
			</param>
			<param name="int_value">
				The integer to be set
			</param>
			<summary>Set an integer player variable.</summary>    <seealso name="GetPVarInt"/> <seealso name="SetPVarString"/> <seealso name="GetPVarString"/> <seealso name="SetPVarFloat"/> <seealso name="GetPVarFloat"/> <seealso name="DeletePVar"/> <remarks>Variables aren't reset until after <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a> is called, so the values are still accessible in <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a>.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. Either the player specified is not connected, or the variable name is null or over 40 characters. </returns>
		</member>
		<member name="M:SetPlayerAmmo" syntax="SetPlayerAmmo(playerid, weaponslot, ammo)">
			<attribute name="native"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_Detector"/>
			<param name="playerid">
				The ID of the player to set the weapon ammo of
			</param>
			<param name="weaponslot">
				The ID of the <a href="http://wiki.sa-mp.com/wiki/Weapons">weapon slot</a> to set the ammo of.
			</param>
			<param name="ammo">
				The amount of ammo to set
			</param>
			<summary>Set the ammo of a player's weapon.</summary>    <seealso name="GetPlayerAmmo"/> <seealso name="GivePlayerWeapon"/> <seealso name="SetPlayerArmedWeapon"/> <remarks>Set the ammo to <b><c>0</c></b> to remove a weapon from a player's inventory. Note that the weapon will still show up in <a href="#GetPlayerWeaponData">GetPlayerWeaponData</a>, albeit with <b><c>0</c></b> ammo.</remarks> <returns> <b><c>1</c></b>: The function executed successfully. Success is also returned when the weapon slot specified is invalid (not 0-12).<p/> <b><c>0</c></b>: The function failed to execute. The player isn't connected.<p/> </returns>
		</member>
		<member name="M:SetPlayerArmedWeapon" syntax="SetPlayerArmedWeapon(playerid, weaponid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerGiveDamage"/>
			<param name="playerid">
				The ID of the player to arm with a weapon
			</param>
			<param name="weaponid">
				The ID of the weapon that the player should be armed with
			</param>
			<summary>Sets which weapon (that a player already has) the player is holding.</summary>   <seealso name="GivePlayerWeapon"/> <seealso name="GetPlayerWeapon"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>This function arms a player with a weapon they <b>already have</b>; it does not give them a new weapon. See <a href="#GivePlayerWeapon">GivePlayerWeapon</a>.</remarks> <returns> <b><c>1</c></b>: The function executed successfully. Success is returned even when the function fails to execute (the player doesn't have the weapon specified, or it is an invalid weapon).<p/> <b><c>0</c></b>: The function failed to execute. The player is not connected. </returns>
		</member>
		<member name="M:SetPlayerArmour" syntax="SetPlayerArmour(playerid, armour)">
			<attribute name="native"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
				The ID of the player to set the armour of
			</param>
			<param name="armour">
				<paraminfo>Float </paraminfo>
				The amount of armour to set, as a percentage (float). Values larger than <b><c>100</c></b> are valid, but won't be displayed in the HUD's armour bar
			</param>
			<summary>Set a player's armor level.</summary>   <seealso name="GetPlayerArmour"/> <seealso name="SetPlayerHealth"/> <seealso name="GetPlayerHealth"/> <remarks>Armour is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks> <remarks>The function's name is armour, not armor (Americanized). This is inconsistent with the rest of SA-MP, so remember that.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerChatBubble" syntax="SetPlayerChatBubble(playerid, text[], color, drawdistance, expiretime)">
			<attribute name="native"/>
			<referrer name="WC_OnPlayerDamage"/>
			<param name="playerid">
				The player which should have the chat bubble
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text to display
			</param>
			<param name="color">
				The text color
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
				The distance from where players are able to see the chat bubble
			</param>
			<param name="expiretime">
				The time in miliseconds the bubble should be displayed for
			</param>
			<summary>Creates a chat bubble above a player's name tag.</summary>      <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>You can't see your own chatbubbles. The same applies to attached 3D text labels.</remarks> <remarks>You can use color embedding for multiple colors in the message.</remarks>
		</member>
		<member name="M:SetPlayerColor" syntax="SetPlayerColor(playerid, color)">
			<attribute name="native"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<param name="playerid">
				The ID of the player whose color to set
			</param>
			<param name="color">
				The color to set. Supports alpha values (<b>RGBA</b>)
			</param>
			<summary>Set the colour of a player's nametag and marker (radar blip).</summary>   <seealso name="SetPlayerMarkerForPlayer"/> <seealso name="GetPlayerColor"/> <seealso name="ChangeVehicleColor"/> <remarks>This function will change player's color for everyone, even if player's color was changed with <a href="#SetPlayerMarkerForPlayer">SetPlayerMarkerForPlayer</a> for any other player. </remarks> <remarks>If used under <a href="#OnPlayerConnect">OnPlayerConnect</a>, the affecting player will not see the color in the TAB menu. </remarks>
		</member>
		<member name="M:SetPlayerDrunkLevel" syntax="SetPlayerDrunkLevel(playerid, level)">
			<attribute name="native"/>
			<referrer name="BustAim_OnPlayerUpdate"/>
			<param name="playerid">
				The ID of the player to set the drunkenness of
			</param>
			<param name="level">
				The level of drunkenness to set
			</param>
			<summary>Sets the drunk level of a player which makes the player's camera sway and vehicles hard to control.</summary>   <seealso name="GetPlayerDrunkLevel"/> <remarks> Players' drunk level will automatically decrease over time, based on their FPS (players with <b><c>50</c></b> FPS will lose <b><c>50</c></b> 'levels' per second. This is useful for determining a player's FPS!).<p/> In <b>0.3a</b> the drunk level will decrement and stop at <b><c>2000</c></b>. In <b>0.3b+</b> the drunk level decrements to <b><c>0</c></b>)<p/> Levels over <b><c>2000</c></b> make the player drunk (camera swaying and vehicles difficult to control).<p/> Max drunk level is <b><c>50000</c></b>.<p/> While the drunk level is above <b><c>5000</c></b>, the player's HUD (radar etc.) will be hidden. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerFacingAngle" syntax="SetPlayerFacingAngle(playerid, ang)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="MakePlayerFacePlayer"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="@yH_OnDialogResponse@005"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="afkCheck"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to set the facing angle of
			</param>
			<param name="ang">
				<paraminfo>Float </paraminfo>
				The angle the player should face
			</param>
			<summary>Set a player's facing angle (Z rotation).</summary>   <seealso name="GetPlayerFacingAngle"/> <seealso name="SetPlayerPos"/> <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA 90 degrees is in fact West. North and South are still 0/360 and 180. To convert this, simply do <b>360 - angle</b>.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerHealth" syntax="SetPlayerHealth(playerid, health)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ScriptExit"/>
			<referrer name="UpdateHealthBar"/>
			<param name="playerid">
				The ID of the player to set the health of
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
				The value to set the player's health to. Max health that can be displayed in the HUD is <b><c>100</c></b>, though higher values are valid
			</param>
			<summary>Set the health of a player.</summary>   <seealso name="GetPlayerHealth"/> <seealso name="GetPlayerArmour"/> <seealso name="SetPlayerArmour"/> <remarks>Health is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks> <remarks>If a player's health is set to <b><c>0</c></b> or a minus value, they will die instantly.</remarks> <remarks>If a player's health is below <b><c>10</c></b> or above <b><c>98303</c></b>, their health bar will flash. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerInterior" syntax="SetPlayerInterior(playerid, interiorid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to set the interior of
			</param>
			<param name="interiorid">
				The <a href="http://wiki.sa-mp.com/wiki/InteriorIDs">interior ID</a> to set the player in
			</param>
			<summary>Set a player's interior. A list of currently known interiors and their positions can be found <a href="http://wiki.sa-mp.com/wiki/InteriorIDs">here</a>.</summary>   <seealso name="GetPlayerInterior"/> <seealso name="LinkVehicleToInterior"/> <seealso name="OnPlayerInteriorChange"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerMaxArmour" syntax="SetPlayerMaxArmour(playerid, value)">
			<stacksize value="1"/>
			<dependency name="s_PlayerMaxArmour"/>
			<param name="playerid">
			</param>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetPlayerMaxHealth" syntax="SetPlayerMaxHealth(playerid, value)">
			<stacksize value="1"/>
			<dependency name="s_PlayerMaxHealth"/>
			<param name="playerid">
			</param>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetPlayerPos" syntax="SetPlayerPos(playerid, x, y, z)">
			<attribute name="native"/>
			<referrer name="WC_SetPlayerPos"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<param name="playerid">
				The ID of the player to set the position of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate to position the player at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y coordinate to position the player at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to position the player at
			</param>
			<summary>Set a player's position.</summary>     <seealso name="SetPlayerPosFindZ"/> <seealso name="SetPlayerFacingAngle"/> <seealso name="GetPlayerPos"/> <seealso name="SetVehiclePos"/> <seealso name="GetVehiclePos"/> <remarks>Using this function on a player in a vehicle will instantly remove them from the vehicle. Useful for quickly ejecting players.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerPosFindZ" syntax="SetPlayerPosFindZ(playerid, x, y, z)">
			<attribute name="native"/>
			<referrer name="WC_SetPlayerPosFindZ"/>
			<param name="playerid">
				The ID of the player to set the position of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X coordinate to position the player at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The X coordinate to position the player at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z coordinate to position the player at
			</param>
			<summary>This sets the players position then adjusts the players z-coordinate to the nearest solid ground under the position.</summary>     <seealso name="SetPlayerPos"/> <seealso name="OnPlayerClickMap"/> <remarks>This function does not work if the new coordinates are far away from where the player currently is. The Z height will be <b><c>0</c></b>, which will likely put them underground. It is highly recommended that the <a href="http://forum.sa-mp.com/showthread.php?t=275492">MapAndreas plugin</a> be used instead.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerScore" syntax="SetPlayerScore(playerid, score)">
			<attribute name="native"/>
			<referrer name="SpawnSetup"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to set the score of
			</param>
			<param name="score">
				The value to set the player's score to
			</param>
			<summary>Set a player's score. Players' scores are shown in the scoreboard (shown by holding the TAB key).</summary>   <seealso name="GetPlayerScore"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist. </returns>
		</member>
		<member name="M:SetPlayerSkin" syntax="SetPlayerSkin(playerid, skinid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerModelSelection"/>
			<referrer name="SetPlayerSkinn"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<param name="playerid">
				The ID of the player to set the skin of
			</param>
			<param name="skinid">
				The <a href="http://wiki.sa-mp.com/wiki/Skins">skin</a> the player should use
			</param>
			<summary>Set the skin of a player. A player's skin is their character model.</summary>   <seealso name="GetPlayerSkin"/> <seealso name="SetSpawnInfo"/> <remarks>If a player's skin is set when they are crouching, in a vehicle, or performing certain animations, they will become frozen or otherwise glitched. This can be fixed by using <a href="#TogglePlayerControllable">TogglePlayerControllable</a>. Players can be detected as being crouched through <a href="#GetPlayerSpecialAction">GetPlayerSpecialAction</a> (<b><c>SPECIAL_ACTION_DUCK</c></b>).</remarks> <remarks>Setting a player's skin when he is dead may crash players around him.</remarks> <remarks>Note that 'success' is reported even when skin ID is invalid (not <b><c>0</c></b>-<b><c>311</c></b>, or <b><c>74</c></b>), but the skin will be set to ID <b><c>0</c></b> (CJ).</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player specified does not exist.<p/> </returns>
		</member>
		<member name="M:SetPlayerSkinn" syntax="SetPlayerSkinn(playerid, skin)">
			<stacksize value="6"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<dependency name="GUI"/>
			<dependency name="GUI"/>
			<dependency name="SetPlayerSkin"/>
			<dependency name="WC_PlayerTextDrawSetPreviewMode"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<param name="playerid">
			</param>
			<param name="skin">
			</param>
		</member>
		<member name="M:SetPlayerSpawnAfterDuel" syntax="SetPlayerSpawnAfterDuel(playerid)">
			<stacksize value="7"/>
			<referrer name="forfeitPlayerDuel"/>
			<dependency name="E_PLAYER"/>
			<dependency name="IsPlayerDueling"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WC_SpawnPlayer"/>
			<dependency name="false"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="p_playerDueling"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SetPlayerSpecialAction" syntax="SetPlayerSpecialAction(playerid, actionid)">
			<attribute name="native"/>
			<referrer name="WC_SetPlayerSpecialAction"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="PlayerDeath"/>
			<param name="playerid">
				The player that should perform the action
			</param>
			<param name="actionid">
				The action that should be performed
			</param>
			<summary>This function allows to set players special action.</summary>   <seealso name="GetPlayerSpecialAction"/> <seealso name="ApplyAnimation"/> <remarks>Removing jetpacks from players by setting their special action to <b><c>0</c></b> causes the sound to stay until death.</remarks> <remarks> <b>Special actions: (marked with * cannot be set)</b><p/> <ul> <li><b><c>0 - SPECIAL_ACTION_NONE</c></b></li> <li><b><c>2 - SPECIAL_ACTION_USEJETPACK</c></b></li> <li><b><c>5 - SPECIAL_ACTION_DANCE1</c></b></li> <li><b><c>6 - SPECIAL_ACTION_DANCE2</c></b></li> <li><b><c>7 - SPECIAL_ACTION_DANCE3</c></b></li> <li><b><c>8 - SPECIAL_ACTION_DANCE4</c></b></li> <li><b><c>10 - SPECIAL_ACTION_HANDSUP</c></b></li> <li><b><c>11 - SPECIAL_ACTION_USECELLPHONE</c></b></li> <li><b><c>12 - SPECIAL_ACTION_SITTING *</c></b></li> <li><b><c>13 - SPECIAL_ACTION_STOPUSECELLPHONE</c></b></li> </ul> <b>added in SA-MP 0.3:</b><p/> <ul> <li><b><c>1 - SPECIAL_ACTION_DUCK *</c></b> - Detect if the player is crouching.</li> <li><b><c>3 - SPECIAL_ACTION_ENTER_VEHICLE *</c></b> - Detect if the player is entering a vehicle via an animation.</li> <li><b><c>4 - SPECIAL_ACTION_EXIT_VEHICLE *</c></b> - Detect if the player is exiting a vehicle via an animation.</li> <li><b><c>20 - SPECIAL_ACTION_DRINK_BEER</c></b> - Will increase the player's drunk level when used</li> <li><b><c>21 - SPECIAL_ACTION_SMOKE_CIGGY</c></b> - Will give the player a cigar</li> <li><b><c>22 - SPECIAL_ACTION_DRINK_WINE</c></b> - Will give the player a wine bottle to get drunk from</li> <li><b><c>23 - SPECIAL_ACTION_DRINK_SPRUNK</c></b> - Will give the player a sprunk bottle to drink from</li> <li><b><c>68 - SPECIAL_ACTION_PISSING</c></b> - Will make make the player perform the pissing animation with visible pee.</li> </ul> <b>added in SA-MP 0.3e:</b><p/> <ul> <li><b><c>24 - SPECIAL_ACTION_CUFFED</c></b> - Will force the player in to cuffs (hands are behind their back) (<b>does not work on CJ skin</b>)</li> </ul> <b>added in SA-MP 0.3x:</b><p/> <ul> <li><b><c>25 - SPECIAL_ACTION_CARRY</c></b>         - Will apply a 'carrying' animation to the player and make them unable to sprint, jump or punch (<b>does not work on CJ skin</b>)</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerTeam" syntax="SetPlayerTeam(playerid, teamid)">
			<attribute name="native"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="ScriptExit"/>
			<param name="playerid">
				The ID of the player you want to set the team of
			</param>
			<param name="teamid">
				The team to put the player in. Use <b><c>NO_TEAM</c></b> to remove the player from any team
			</param>
			<summary>Set the team of a player.</summary>   <seealso name="GetPlayerTeam"/> <seealso name="SetTeamCount"/> <seealso name="EnableVehicleFriendlyFire"/> <remarks>Players can not damage/kill players on the same team unless they use a knife to slit their throat. As of <b>SA-MP 0.3x</b>, players are also unable to damage vehicles driven by a player from the same team. This can be enabled with <a href="#EnableVehicleFriendlyFire">EnableVehicleFriendlyFire</a>.</remarks> <remarks><b><c>255</c></b> (or <b><c>NO_TEAM</c></b>) is the default team to be able to shoot other players, not <b><c>0</c></b>.</remarks>
		</member>
		<member name="M:SetPlayerVelocity" syntax="SetPlayerVelocity(playerid, X, Y, Z)">
			<attribute name="native"/>
			<referrer name="WC_SetPlayerVelocity"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="PlayerDeath"/>
			<param name="playerid">
				The player to apply the speed to
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the X axis
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the Y axis
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the Z axis
			</param>
			<summary>Set a player's velocity on the X, Y and Z axes.</summary>     <seealso name="GetPlayerVelocity"/> <seealso name="SetVehicleVelocity"/> <seealso name="GetVehicleVelocity"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetPlayerVirtualWorld" syntax="SetPlayerVirtualWorld(playerid, worldid)">
			<attribute name="native"/>
			<referrer name="wc_SetPlayerVirtualWorld"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ScriptInit"/>
			<referrer name="UpdatePlayerVirtualWorld"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<param name="playerid">
				The ID of the player you want to set the virtual world of
			</param>
			<param name="worldid">
				The virtual world ID to put the player in
			</param>
			<summary>Set the virtual world of a player. They can only see other players or vehicles that are in that same world.</summary>   <seealso name="GetPlayerVirtualWorld"/> <seealso name="SetVehicleVirtualWorld"/> <remarks>The default virtual world is <b><c>0</c></b></remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SetRespawnTime" syntax="SetRespawnTime(ms)">
			<stacksize value="4"/>
			<dependency name="max"/>
			<dependency name="s_RespawnTime"/>
			<param name="ms">
			</param>
		</member>
		<member name="M:SetSpawnInfo" syntax="SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<attribute name="native"/>
			<referrer name="WC_SetSpawnInfo"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerUpdate"/>
			<referrer name="SpawnPlayerInPlace"/>
			<param name="playerid">
				The PlayerID of who you want to set the spawn information
			</param>
			<param name="team">
				The Team-ID of the chosen player
			</param>
			<param name="skin">
				The skin which the player will spawn with
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X-coordinate of the player's spawn position
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y-coordinate of the player's spawn position
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The Z-coordinate of the player's spawn position
			</param>
			<param name="rotation">
				<paraminfo>Float </paraminfo>
				The direction in which the player needs to be facing after spawning
			</param>
			<param name="weapon1">
				The first spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon1_ammo">
				The amount of ammunition for the primary spawnweapon
			</param>
			<param name="weapon2">
				The second spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon2_ammo">
				The amount of ammunition for the second spawnweapon
			</param>
			<param name="weapon3">
				The third spawn-<a href="http://wiki.sa-mp.com/wiki/Weapons">weapon</a> for the player
			</param>
			<param name="weapon3_ammo">
				The amount of ammunition for the third spawnweapon
			</param>
			<summary>This function can be used to change the spawn information of a specific player. It allows you to automatically set someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn systems. This function is more crash-safe then using <a href="#SetPlayerSkin">SetPlayerSkin</a> in <a href="#OnPlayerSpawn">OnPlayerSpawn</a> and/or <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>, even though this has been fixed in 0.2.</summary>              <seealso name="SetPlayerSkin"/> <seealso name="SetPlayerTeam"/> <seealso name="SpawnPlayer"/>
		</member>
		<member name="M:SetTimer" syntax="SetTimer(funcname[], interval, repeating)">
			<attribute name="native"/>
			<referrer name="@yH_OnGameModeInit@010"/>
			<param name="funcname">
				<paraminfo> [] </paraminfo>
				Name of the function to call as a string. This must be a public function (forwarded). A null string here will crash the server
			</param>
			<param name="interval">
				Interval in milliseconds
			</param>
			<param name="repeating">
				Whether the timer should repeat or not
			</param>
			<summary>Sets a 'timer' to call a function after some time. Can be set to repeat.</summary>    <seealso name="SetTimerEx"/> <seealso name="KillTimer"/> <remarks>Timer intervals are not accurate (roughly 25% off). There's a fix available <a href="http://forum.sa-mp.com/showthread.php?t=289675">here</a>. </remarks> <remarks>Timer IDs are never used twice. You can use <a href="#KillTimer">KillTimer</a> on a timer ID and it won't matter if it's running or not. </remarks> <remarks>The function that should be called must be public. </remarks> <remarks>The use of many timers will result in increased memory/cpu usage. </remarks> <returns>The ID of the timer that was started. Timer IDs start at <b><c>1</c></b>.</returns>
		</member>
		<member name="M:SetTimerEx" syntax="SetTimerEx(funcname[], interval, repeating, format[], ...)">
			<attribute name="native"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="OnPlayerGiveDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="WC_KillVehicle"/>
			<referrer name="PlayerDeath"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="@yH_OnPlayerDisconnect@001"/>
			<referrer name="MP_OPC"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="rAgc_ResetPlayerWeapons"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="@yH_OnPlayerConnect@011"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<param name="funcname">
				<paraminfo> [] </paraminfo>
				The name of a public function to call when the timer expires
			</param>
			<param name="interval">
				Interval in milliseconds
			</param>
			<param name="repeating">
				Whether the timer should be called repeatedly (can only be stopped with <a href="#KillTimer">KillTimer</a>) or only once
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				Special format indicating the types of values the timer will pass
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				Indefinite number of arguments to pass (must follow format specified in previous parameter)
			</param>
			<summary>Sets a timer to call a function after the specified interval. This variant ('Ex') can pass parameters (such as a player ID) to the function.</summary>      <seealso name="SetTimer"/> <seealso name="KillTimer"/> <seealso name="CallLocalFunction"/> <seealso name="CallRemoteFunction"/> <remarks>Timer intervals are not accurate (roughly 25% off). There's a fix available <a href="http://forum.sa-mp.com/showthread.php?t=289675">here</a>. </remarks> <remarks>Timer IDs are never used twice. You can use KillTimer() on a timer ID and it won't matter if it's running or not. </remarks> <remarks>The function that should be called must be public. </remarks> <remarks>The use of many timers will result in increased memory/cpu usage. </remarks> <remarks> <b>Format syntax:</b><p/> <ul> <li><b><c>i</c></b> - integer</li> <li><b><c>d</c></b> - integer</li> <li><b><c>a</c></b> - array The next parameter must be an integer (<b><c>"i"</c></b>) with the array's size <b>[CURRENTLY UNUSABLE]</b></li> <li><b><c>s</c></b> - string <b>[CURRENTLY UNUSABLE]</b></li> <li><b><c>f</c></b> - float</li> <li><b><c>b</c></b> - boolean</li> </ul> </remarks> <returns>The ID of the timer that was started. Timer IDs start at <b><c>1</c></b> and are never reused. There are no internal checks to verify that the parameters passed are valid (e.g. duration not a minus value).</returns>
		</member>
		<member name="M:SetVehicleHealth" syntax="SetVehicleHealth(vehicleid, health)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to set the health of
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
				The health, given as a float value
			</param>
			<summary>Set a vehicle's health. When a vehicle's health decreases the engine will produce smoke, and finally fire when it decreases to less than 250 (25%).</summary>   <seealso name="GetVehicleHealth"/> <seealso name="RepairVehicle"/> <seealso name="SetPlayerHealth"/> <seealso name="OnVehicleDeath"/> <remarks>Full vehicle health is <b><c>1000</c></b>, however higher values are possible and increase the health of the vehicle.</remarks> <remarks> <b>Health:</b><p/> <ul> <li>&gt; 650 - undamaged</li> <li>650-550 - white Smoke</li> <li>550-390 - grey Smoke</li> <li>390-250 - black Smoke</li> <li>&lt; 250 - on fire (will explode seconds later)</li> </ul> </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the vehicle does not exist. </returns>
		</member>
		<member name="M:SetVehiclePassengerDamage" syntax="SetVehiclePassengerDamage(toggle)">
			<stacksize value="1"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<dependency name="s_VehiclePassengerDamage"/>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetVehicleToRespawn" syntax="SetVehicleToRespawn(vehicleid)">
			<attribute name="native"/>
			<referrer name="WC_OnDeadVehicleSpawn"/>
			<param name="vehicleid">
				The ID of the vehicle to respawn
			</param>
			<summary>Sets a vehicle back to the position at where it was created.</summary>  <seealso name="CreateVehicle"/> <seealso name="DestroyVehicle"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The vehicle does not exist. </returns>
		</member>
		<member name="M:SetVehicleUnoccupiedDamage" syntax="SetVehicleUnoccupiedDamage(toggle)">
			<stacksize value="1"/>
			<dependency name="s_VehicleUnoccupiedDamage"/>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetWeaponArmourRule" syntax="SetWeaponArmourRule(weaponid, affects_armour, torso_only)">
			<stacksize value="1"/>
			<dependency name="s_DamageArmour"/>
			<dependency name="s_DamageArmour"/>
			<param name="weaponid">
			</param>
			<param name="affects_armour">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="torso_only">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SetWeaponDamage" syntax="SetWeaponDamage(weaponid, damage_type, amount, ...)">
			<stacksize value="7"/>
			<dependency name="DAMAGE_TYPE_MULTIPLIER"/>
			<dependency name="DAMAGE_TYPE_RANGE"/>
			<dependency name="DAMAGE_TYPE_RANGE_MULTIPLIER"/>
			<dependency name="DAMAGE_TYPE_STATIC"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<dependency name="s_DamageRangeRanges"/>
			<dependency name="s_DamageRangeRanges"/>
			<dependency name="s_DamageRangeSteps"/>
			<dependency name="s_DamageRangeValues"/>
			<dependency name="s_DamageRangeValues"/>
			<dependency name="s_DamageType"/>
			<dependency name="s_WeaponDamage"/>
			<param name="weaponid">
			</param>
			<param name="damage_type">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="...">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetWeaponMaxRange" syntax="SetWeaponMaxRange(weaponid, range)">
			<stacksize value="4"/>
			<dependency name="IsBulletWeapon"/>
			<dependency name="s_WeaponRange"/>
			<param name="weaponid">
			</param>
			<param name="range">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:SetWeaponName" syntax="SetWeaponName(weaponid, name[])">
			<stacksize value="5"/>
			<dependency name="g_WeaponName"/>
			<dependency name="g_WeaponName"/>
			<dependency name="strunpack"/>
			<param name="weaponid">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:SetWeaponShootRate" syntax="SetWeaponShootRate(weaponid, max_rate)">
			<stacksize value="1"/>
			<dependency name="s_MaxWeaponShootRate"/>
			<param name="weaponid">
			</param>
			<param name="max_rate">
			</param>
		</member>
		<member name="M:ShowEmailDialog" syntax="ShowEmailDialog(playerid)">
			<stacksize value="160"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="format"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ShowFreeroamTextDraws" syntax="ShowFreeroamTextDraws(playerid, status)">
			<stacksize value="9"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<dependency name="CancelSelectTextDraw"/>
			<dependency name="FreeroamTDs"/>
			<dependency name="FreeroamTDs"/>
			<dependency name="SelectTextDraw"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawAlignment"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawHide"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetPreviewMode"/>
			<dependency name="WC_PlayerTextDrawSetPreviewRot"/>
			<dependency name="WC_PlayerTextDrawSetProportiona"/>
			<dependency name="WC_PlayerTextDrawSetSelectable"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawTextSize"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="status">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:ShowLanguageDialog" syntax="ShowLanguageDialog(playerid)">
			<stacksize value="9"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="ShowPlayerDialog"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ShowLoginTextDraws" syntax="ShowLoginTextDraws(playerid, status)">
			<stacksize value="7"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="LoginTD"/>
			<dependency name="LoginTD"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawAlignment"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawHide"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetProportiona"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<param name="playerid">
			</param>
			<param name="status">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:ShowModelSelectionMenu" syntax="ShowModelSelectionMenu(playerid, ListID, header_text[], dialogBGcolor, previewBGcolor, tdSelectionColor)">
			<stacksize value="9"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="GetTickCount"/>
			<dependency name="SelectTextDraw"/>
			<dependency name="SetPVarInt"/>
			<dependency name="gBackgroundTextDrawId"/>
			<dependency name="gCancelButtonTextDrawId"/>
			<dependency name="gCurrentPageTextDrawId"/>
			<dependency name="gHeaderTextDrawId"/>
			<dependency name="gLists"/>
			<dependency name="gNextButtonTextDrawId"/>
			<dependency name="gPrevButtonTextDrawId"/>
			<dependency name="mS_CreateCurrentPageTextDraw"/>
			<dependency name="mS_CreatePlayerBGTextDraw"/>
			<dependency name="mS_CreatePlayerDialogButton"/>
			<dependency name="mS_CreatePlayerHeaderTextDraw"/>
			<dependency name="mS_DestroySelectionMenu"/>
			<dependency name="mS_ShowPlayerMPs"/>
			<dependency name="mS_UpdatePageTextDraw"/>
			<param name="playerid">
			</param>
			<param name="ListID">
			</param>
			<param name="header_text">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="dialogBGcolor">
			</param>
			<param name="previewBGcolor">
			</param>
			<param name="tdSelectionColor">
			</param>
		</member>
		<member name="M:ShowModelSelectionMenuEx" syntax="ShowModelSelectionMenuEx(playerid, items_array[], item_amount, header_text[], extraid, Xrot, Yrot, Zrot, mZoom, dialogBGcolor, previewBGcolor, tdSelectionColor)">
			<stacksize value="9"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="GetTickCount"/>
			<dependency name="SelectTextDraw"/>
			<dependency name="SetPVarFloat"/>
			<dependency name="SetPVarInt"/>
			<dependency name="gBackgroundTextDrawId"/>
			<dependency name="gCancelButtonTextDrawId"/>
			<dependency name="gCurrentPageTextDrawId"/>
			<dependency name="gCustomList"/>
			<dependency name="gCustomList"/>
			<dependency name="gHeaderTextDrawId"/>
			<dependency name="gNextButtonTextDrawId"/>
			<dependency name="gPrevButtonTextDrawId"/>
			<dependency name="mS_CreateCurrentPageTextDraw"/>
			<dependency name="mS_CreatePlayerBGTextDraw"/>
			<dependency name="mS_CreatePlayerDialogButton"/>
			<dependency name="mS_CreatePlayerHeaderTextDraw"/>
			<dependency name="mS_DestroySelectionMenu"/>
			<dependency name="mS_ShowPlayerMPs"/>
			<dependency name="mS_UpdatePageTextDraw"/>
			<dependency name="print"/>
			<param name="playerid">
			</param>
			<param name="items_array">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="item_amount">
			</param>
			<param name="header_text">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="extraid">
			</param>
			<param name="Xrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Yrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Zrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mZoom">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="dialogBGcolor">
			</param>
			<param name="previewBGcolor">
			</param>
			<param name="tdSelectionColor">
			</param>
		</member>
		<member name="M:ShowPlayerDialog" syntax="ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])">
			<attribute name="native"/>
			<referrer name="Admini"/>
			<referrer name="pc_cmd_teleports"/>
			<referrer name="Premiums"/>
			<referrer name="pc_cmd_help"/>
			<referrer name="banInfo"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_color"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="pc_cmd_lang"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="ShowRegisterDialog"/>
			<referrer name="ShowEmailDialog"/>
			<referrer name="ShowLanguageDialog"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player to show the dialog to
			</param>
			<param name="dialogid">
				An ID to assign this dialog to, so responses can be processed. Max dialogid is <b><c>32767</c></b>. Using negative values will close any open dialog
			</param>
			<param name="style">
				The style of the dialog
			</param>
			<param name="caption">
				<paraminfo> [] </paraminfo>
				The title at the top of the dialog. The length of the caption can not exceed more than 64 characters before it starts to cut off
			</param>
			<param name="info">
				<paraminfo> [] </paraminfo>
				The text to display in the main dialog. Use <b><c>\n</c></b> to start a new line and <b><c>\t</c></b> to tabulate
			</param>
			<param name="button1">
				<paraminfo> [] </paraminfo>
				The text on the left button
			</param>
			<param name="button2">
				<paraminfo> [] </paraminfo>
				The text on the right button. Leave it blank ( "" ) to hide it
			</param>
			<summary>Shows the player a synchronous (only one at a time) dialog box.</summary>        <seealso name="TextDrawShowForPlayer"/> <seealso name="OnDialogResponse"/> <remarks>This function was added in <b>SA-MP 0.3a</b> and will not work in earlier versions!</remarks> <remarks>Use color embedding for multiple colors in the text. </remarks> <remarks>Using <b><c>-1</c></b> as dialogid closes all dialogs currently shown on the client's screen. </remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected.<p/> </returns>
		</member>
		<member name="M:ShowPlayerDuelMenu" syntax="ShowPlayerDuelMenu(playerid)">
			<stacksize value="78"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<dependency name="E_ARMOUR"/>
			<dependency name="E_HEALTH"/>
			<dependency name="E_LOCATION_ID"/>
			<dependency name="E_NAME"/>
			<dependency name="E_PLAYER"/>
			<dependency name="E_WEAPON"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="ReturnWeaponName"/>
			<dependency name="ReturnWeaponName"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="format"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="szBigString"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ShowRegisterDialog" syntax="ShowRegisterDialog(playerid)">
			<stacksize value="532"/>
			<referrer name="check_account_registered"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="DIALOG_REGISTER"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="format"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ShuffleDeepArray_Entry" syntax="ShuffleDeepArray_Entry(...)">
			<stacksize value="7"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<dependency name="random"/>
			<param name="...">
			</param>
		</member>
		<member name="M:SkipWhitespace" syntax="SkipWhitespace(str[], pos)">
			<stacksize value="1"/>
			<dependency name="cellmin"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				The string to skip over part of.
			</param>
			<param name="pos">
				The start of the whitespace.
			</param>
			    <returns>  The end of the whitespace.  </returns>  <remarks>  Doesn't skip over NULL terminators.  </remarks> 
		</member>
		<member name="M:SortArrayUsingCompInto_Entry" syntax="SortArrayUsingCompInto_Entry(results[], size, ...)">
			<stacksize value="11"/>
			<dependency name="GetFunctionAddress"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="SORT_IS_PLAYERS"/>
			<dependency name="SortArrayUsingCompInto_QS"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<dependency name="print"/>
			<param name="results">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="...">
			</param>
		</member>
		<member name="M:SortArrayUsingCompInto_QS" syntax="SortArrayUsingCompInto_QS(array, results[], func, left, right)">
			<stacksize value="6"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<dependency name="g_sort_stack"/>
			<param name="array">
			</param>
			<param name="results">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="func">
			</param>
			<param name="left">
			</param>
			<param name="right">
			</param>
		</member>
		<member name="M:SortArrayUsingComparator_Entry" syntax="SortArrayUsingComparator_Entry(size, ...)">
			<stacksize value="9"/>
			<dependency name="GetFunctionAddress"/>
			<dependency name="SortArrayUsingComparator_QS"/>
			<dependency name="print"/>
			<param name="size">
			</param>
			<param name="...">
			</param>
		</member>
		<member name="M:SortArrayUsingComparator_QS" syntax="SortArrayUsingComparator_QS(array, func, left, right)">
			<stacksize value="6"/>
			<referrer name="SortArrayUsingComparator_Entry"/>
			<dependency name="ExchangeArraySlots"/>
			<dependency name="g_sort_stack"/>
			<param name="array">
			</param>
			<param name="func">
			</param>
			<param name="left">
			</param>
			<param name="right">
			</param>
		</member>
		<member name="M:SortDeepArray_Entry" syntax="SortDeepArray_Entry(&amp;cmp1, &amp;cmp2, size, cmp_tag, cmp_string, ignorecase, order, array[][], ...)">
			<stacksize value="6"/>
			<dependency name="_SortDeepArray"/>
			<dependency name="g_sort_cmp_offset"/>
			<dependency name="g_sort_cmp_type"/>
			<dependency name="g_sort_ignorecase"/>
			<dependency name="g_sort_order"/>
			<param name="cmp1">
				<paraminfo> {Float,String,string,_} &amp; </paraminfo>
			</param>
			<param name="cmp2">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="cmp_tag">
			</param>
			<param name="cmp_string">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="ignorecase">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="order">
				<paraminfo>E_SORT_ORDER </paraminfo>
			</param>
			<param name="array">
				<paraminfo> [][] </paraminfo>
			</param>
			<param name="...">
			</param>
		</member>
		<member name="M:SpawnPlayer" syntax="SpawnPlayer(playerid)">
			<attribute name="native"/>
			<referrer name="WC_SpawnPlayer"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="SpawnPlayerInPlace"/>
			<param name="playerid">
				The ID of the player to spawn
			</param>
			<summary>(Re)Spawns a player.</summary>  <seealso name="SetSpawnInfo"/> <seealso name="AddPlayerClass"/> <seealso name="OnPlayerSpawn"/> <remarks>Kills the player if they are in a vehicle and then they spawn with a bottle in their hand.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the player is not connected. </returns>
		</member>
		<member name="M:SpawnPlayerForWorld" syntax="SpawnPlayerForWorld(playerid)">
			<attribute name="native"/>
			<referrer name="WC_SpawnForStreamedIn"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SpawnPlayerInPlace" syntax="SpawnPlayerInPlace(playerid)">
			<stacksize value="19"/>
			<referrer name="ResyncPlayer"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="WC_SpawnPlayerInPlace"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSkin"/>
			<dependency name="SetSpawnInfo"/>
			<dependency name="SpawnPlayer"/>
			<dependency name="s_SpawnInfoModified"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SpawnSetup" syntax="SpawnSetup(playerid)">
			<stacksize value="7"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="afkCheck"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="Killed"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SetCameraBehindPlayer"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="false"/>
			<dependency name="pKills"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:StopSpectate" syntax="StopSpectate(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:StrToLower" syntax="StrToLower(str[], len)">
			<stacksize value="5"/>
			<dependency name="tolower"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to convert.
			</param>
			<param name="len">
				How much of the string to convert.
			</param>
			   
		</member>
		<member name="M:StrToUpper" syntax="StrToUpper(str[], len)">
			<stacksize value="5"/>
			<dependency name="toupper"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to convert.
			</param>
			<param name="len">
				How much of the string to convert.
			</param>
			   
		</member>
		<member name="M:Streamer_OnItemStreamIn" syntax="Streamer_OnItemStreamIn(type, id)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
		</member>
		<member name="M:Streamer_OnItemStreamOut" syntax="Streamer_OnItemStreamOut(type, id)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
		</member>
		<member name="M:Streamer_OnPluginError" syntax="Streamer_OnPluginError(error[])">
			<stacksize value="1"/>
			<param name="error">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:Strip" syntax="Strip(str[])">
			<stacksize value="9"/>
			<dependency name="memcpy"/>
			<dependency name="strlen"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				The string to remove whitespace from the start and end of.
			</param>
			 
		</member>
		<member name="M:StripL" syntax="StripL(str[])">
			<stacksize value="9"/>
			<dependency name="memcpy"/>
			<dependency name="strlen"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				The string to remove whitespace from the start of.
			</param>
			 
		</member>
		<member name="M:StripNL" syntax="StripNL(str[])">
			<stacksize value="4"/>
			<dependency name="strlen"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				The string to remove whitespace from the end of.
			</param>
			  <remarks>  Updated from old versions, should be more efficient  </remarks> 
		</member>
		<member name="M:Sum" syntax="Sum(arr[], num)">
			<stacksize value="2"/>
			<referrer name="Mean"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array whose values need summing.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <returns>  All the values in the array added together.  </returns> 
		</member>
		<member name="M:SysreqC" syntax="SysreqC(index, auto_pop)">
			<stacksize value="9"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="index">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SysreqCN" syntax="SysreqCN(index, args_to_push, auto_pop)">
			<stacksize value="10"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="index">
			</param>
			<param name="args_to_push">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SysreqD" syntax="SysreqD(address, auto_pop)">
			<stacksize value="9"/>
			<referrer name="RunShellcode"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="address">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:SysreqDN" syntax="SysreqDN(address, args_to_push, auto_pop)">
			<stacksize value="10"/>
			<dependency name="GetJITGeneratorVersion"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="cellmin"/>
			<dependency name="g_args"/>
			<dependency name="g_nargs"/>
			<param name="address">
			</param>
			<param name="args_to_push">
			</param>
			<param name="auto_pop">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:T@" syntax="T@(ret[], ...)">
			<stacksize value="8"/>
			<dependency name="YSI_g_sPropEmpty"/>
			<dependency name="YSI_g_sPropVarArg"/>
			<dependency name="getarg"/>
			<dependency name="numargs"/>
			<dependency name="setproperty"/>
			<param name="ret">
				<paraminfo> [144] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:TextDrawAlignment" syntax="TextDrawAlignment(text, alignment)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawAlignment"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to set the alignment of
			</param>
			<param name="alignment">
				<b><c>1</c></b>-left <b><c>2</c></b>-centered <b><c>3</c></b>-right
			</param>
			<summary>Set the alignment of text in a text draw.</summary>   <remarks>For alignment <b><c>2</c></b> (center) the x and y values of <a href="#TextSize">TextSize</a> need to be swapped, see notes at <a href="#TextDrawTextSize">TextDrawTextSize</a>, also position coordinate become position of center of textdraw and not left/top edges. </remarks>
		</member>
		<member name="M:TextDrawBackgroundColor" syntax="TextDrawBackgroundColor(text, color)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawBackgroundColor"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to set the background color of
			</param>
			<param name="color">
				The color that the textdraw should be set to
			</param>
			<summary>Adjusts the text draw area background color (the outline/shadow - NOT the box. For box color, see <a href="#TextDrawBoxColor">TextDrawBoxColor</a>).</summary>   <remarks>If <a href="#TextDrawSetOutline">TextDrawSetOutline</a> is used with size &gt; <b><c>0</c></b>, the outline color will match the color used in <a href="#TextDrawBackgroundColor">TextDrawBackgroundColor</a>. Changing the value of color seems to alter the color used in <a href="#TextDrawColor">TextDrawColor</a></remarks> <remarks>If you want to change the background colour of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks>
		</member>
		<member name="M:TextDrawBoxColor" syntax="TextDrawBoxColor(text, color)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawBoxColor"/>
			<referrer name="ScriptInit"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The TextDraw to change
			</param>
			<param name="color">
				The colour (<b>RGBA</b>)
			</param>
			<summary>Adjusts the text box colour (only used if <a href="#TextDrawUseBox">TextDrawUseBox</a> 'use' parameter is <b><c>1</c></b>).</summary>   <remarks>If you want to change the boxcolour of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks>
		</member>
		<member name="M:TextDrawColor" syntax="TextDrawColor(text, color)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawColor"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to change the color of.
			</param>
			<param name="color">
				The color to set the textdraw to
			</param>
			<summary>Sets the text color of a textdraw.</summary>   <remarks>You can also use GameText Colors in TextDraws.</remarks> <remarks>If the TextDraw is already shown, it must be re-shown (<a href="#TextDrawShowForAll">TextDrawShowForAll</a>/<a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>) for the changes of this function to take effect.</remarks>
		</member>
		<member name="M:TextDrawCreate" syntax="TextDrawCreate(x, y, text[])">
			<tagname value="Text"/>
			<attribute name="native"/>
			<referrer name="WC_TextDrawCreate"/>
			<referrer name="ScriptInit"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The X (left/right) coordinate to create the textdraw at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The Y (up/down) coordinate to create the textdraw at
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text that will appear in the textdraw
			</param>
			<summary>Creates a textdraw. Textdraws are, as the name implies, text (mainly - there can be boxes, sprites and model previews (skins/vehicles/weapons/objects too) that is drawn on a player's screens.</summary>    <remarks> If you choose values for y that are less than 1, the first text row will be invisible and only the shadow is visible.<p/> text[] must not be empty or the server will crash! If you need a textdraw that shows nothing, use a space underscore. <b>Now it's fixed</b>.<p/> If the last character in the text is a space, the text will all be blank.<p/> If part of the text is off-screen, the color of the text will not show, only the shadow (if enabled) will. </remarks> <remarks> <em>This applies ONLY to sa-mp versions before 0.3z:</em><p/> Maximum length of textdraw is <b>800</b> characters. Longer text will crash the client in older versions.<p/> If you use color codes (such as <b><c>~R~ ~G~</c></b>) beyond 255th character the client will crash trying to display the textdraw. </remarks> <remarks> The x,y coordinate is the top left coordinate for the text draw area based on a 640x480 "canvas" (irrespective of screen resolution). If you plan on using <a href="#TextDrawAlignment">TextDrawAlignment</a> with alignment <b><c>3</c></b> (right), the x,y coordinate is the top right coordinate for the text draw.<p/> This function merely CREATES the textdraw, you must use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a> or <a href="#TextDrawShowForAll">TextDrawShowForAll</a> to show it.<p/> It is recommended to use WHOLE numbers instead of decimal positions when creating textdraws to ensure resolution friendly design. </remarks> <remarks>Keyboard key mapping codes (such as <b><c>~k~~VEHICLE_ENTER_EXIT~</c></b> don't work beyond 255th character. </remarks> <returns>The ID of the created textdraw. Textdraw IDs start at <b><c>0</c></b>.</returns>
		</member>
		<member name="M:TextDrawDestroy" syntax="TextDrawDestroy(text)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawDestroy"/>
			<referrer name="ScriptExit"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to destroy. Returned by <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<summary>Destroys a previously-created textdraw.</summary> 
		</member>
		<member name="M:TextDrawFont" syntax="TextDrawFont(text, font)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawFont"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The TextDraw to change
			</param>
			<param name="font">
				There are four font styles, see <a href="http://wiki.sa-mp.com/wiki/PlayerTextDrawFont">http://wiki.sa-mp.com/wiki/PlayerTextDrawFont</a>. Font value <b><c>4</c></b> specifies that this is a txd sprite; <b><c>5</c></b> specifies that this textdraw can display preview models. A font value greater than 5 does not display, and anything greater than 16 crashes the client
			</param>
			<summary>Changes the text font.</summary>   <remarks>If you want to change the font of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks>
		</member>
		<member name="M:TextDrawHideForAll" syntax="TextDrawHideForAll(text)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawHideForAll"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to hide (returned by <a href="#TextDrawCreate">TextDrawCreate</a>)
			</param>
			<summary>Hides a text draw for all players.</summary>  <seealso name="TextDrawShowForPlayer"/> <seealso name="TextDrawHideForPlayer"/> <seealso name="TextDrawShowForAll"/>
		</member>
		<member name="M:TextDrawHideForPlayer" syntax="TextDrawHideForPlayer(playerid, text)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawHideForPlayer"/>
			<referrer name="SetHealthBarVisible"/>
			<param name="playerid">
				The ID of the player that the textdraw should be hidden for
			</param>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to hide
			</param>
			<summary>Hides a textdraw for a specific player.</summary>   <seealso name="TextDrawHideForAll"/> <seealso name="TextDrawShowForPlayer"/> <seealso name="TextDrawShowForAll"/>
		</member>
		<member name="M:TextDrawLetterSize" syntax="TextDrawLetterSize(text, x, y)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawLetterSize"/>
			<referrer name="ScriptInit"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The TextDraw to change
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				Width of a char
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				Height of a char
			</param>
			<summary>Sets the width and height of the letters.</summary>    <remarks>When using this function purely for the benefit of affecting the TextDraw box, multiply 'Y' by <b><c>0.135</c></b> to convert to <a href="#TextDrawTextSize">TextDrawTextSize</a>-like measurements. <b>Hint</b>: it is easier and extremely precise to use <b><c>LD_SPAC:white</c></b> sprite for box-only textdraws, <a href="#TextDrawTextSize">TextDrawTextSize</a> will have regular offsets.</remarks> <remarks>If you want to change the letter size of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible. </remarks> <remarks>Fonts appear to look the best with an X to Y ratio of <b><c>1</c></b> to <b><c>4</c></b> (e.g. if x is <b><c>0.5</c></b> then y should be <b><c>2</c></b>). </remarks>
		</member>
		<member name="M:TextDrawSetOutline" syntax="TextDrawSetOutline(text, size)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetOutline"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the text draw to set the outline thickness of
			</param>
			<param name="size">
				The thickness of the outline, as an integer. <b><c>0</c></b> for no outline
			</param>
			<summary>Sets the thickness of a textdraw's text's outline. <a href="#TextDrawBackgroundColor">TextDrawBackgroundColor</a> can be used to change the color.</summary>   <remarks>If you want to change the outline of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks>
		</member>
		<member name="M:TextDrawSetPreviewModel" syntax="TextDrawSetPreviewModel(text, modelindex)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetPreviewModel"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The textdraw id that will display the 3D preview
			</param>
			<param name="modelindex">
				The GTA SA or SA:MP model ID to display
			</param>
			<summary>Set the model for a textdraw model preview. Click <a href="http://www.sa-mp.com/stuff/03xShots/pmenu.png">here</a> to see this function's effect.</summary>   <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font type <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> in order for this function to have effect.</remarks> <remarks>Use <a href="#TextDrawBackgroundColor">TextDrawBackgroundColor</a> to set the background color behind the model.</remarks>
		</member>
		<member name="M:TextDrawSetPreviewRot" syntax="TextDrawSetPreviewRot(text, fRotX, fRotY, fRotZ, fZoom)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetPreviewRot"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
				The X rotation value
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
				The Y rotation value
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
				The Z rotation value
			</param>
			<param name="fZoom">
				<paraminfo>Float </paraminfo>
				The zoom value, smaller values make the camera closer and larger values make the camera further away (optional=<b><c>1.0</c></b>)
			</param>
			<summary>Sets the rotation and zoom of a 3D model preview textdraw.</summary>     <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font type <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> in order for this function to have effect.</remarks>
		</member>
		<member name="M:TextDrawSetPreviewVehCol" syntax="TextDrawSetPreviewVehCol(text, color1, color2)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetPreviewVehCol"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The textdraw id that is set to display a 3D vehicle model preview
			</param>
			<param name="color1">
				The primary Color ID to set the vehicle to
			</param>
			<param name="color2">
				The secondary Color ID to set the vehicle to
			</param>
			<summary>If a vehicle model is used in a 3D preview textdraw, this sets the two colour values for that vehicle.</summary>    <remarks>This function was added in <b>SA-MP 0.3x</b> and will not work in earlier versions!</remarks> <remarks>The textdraw MUST use the font type <b><c>TEXT_DRAW_FONT_MODEL_PREVIEW</c></b> in order for this function to have effect.</remarks>
		</member>
		<member name="M:TextDrawSetProportional" syntax="TextDrawSetProportional(text, set)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetProportional"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to set the proportionality of
			</param>
			<param name="set">
				<b><c>1</c></b> to enable proportionality, <b><c>0</c></b> to disable
			</param>
			<summary>Appears to scale text spacing to a proportional ratio. Useful when using <a href="#TextDrawLetterSize">TextDrawLetterSize</a> to ensure the text has even character spacing.</summary>   <remarks>Proportionality is set to <b><c>1</c></b> by default, you might skip this function if you don't want to disable it. </remarks> <remarks>If you want to change the proportionality of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible. </remarks>
		</member>
		<member name="M:TextDrawSetSelectable" syntax="TextDrawSetSelectable(text, set)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetSelectable"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to make selectable
			</param>
			<param name="set">
				<b><c>1</c></b> to make it selectable, or <b><c>0</c></b> to make it not selectable
			</param>
			<summary>Sets whether a textdraw can be selected (clicked on) or not.</summary>   <remarks>This function was added in <b>SA-MP 0.3e</b> and will not work in earlier versions!</remarks> <remarks><a href="#TextDrawSetSelectable">TextDrawSetSelectable</a> must be used BEFORE the textdraw is shown to players for it to be selectable.</remarks> <remarks>Use <a href="#TextDrawTextSize">TextDrawTextSize</a> to define the clickable area.</remarks>
		</member>
		<member name="M:TextDrawSetShadow" syntax="TextDrawSetShadow(text, size)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetShadow"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to set the shadow size of
			</param>
			<param name="size">
				The size of the shadow. <b><c>1</c></b> is generally used for a normal shadow size. <b><c>0</c></b> disables the shadow completely
			</param>
			<summary>Sets the size of a textdraw's text's shadow.</summary>   <remarks>The shadow can be cut by the box area if the size is set too big for the area.</remarks> <remarks>If you want to change the shadow of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The textdraw does not exist. </returns>
		</member>
		<member name="M:TextDrawSetString" syntax="TextDrawSetString(text, string[])">
			<attribute name="native"/>
			<referrer name="WC_TextDrawSetString"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The TextDraw to change
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The new string for the TextDraw
			</param>
			<summary>Changes the text on a textdraw.</summary>   <remarks>There are limits to the length of textdraw strings - see <a href="http://wiki.sa-mp.com/wiki/Limits">here</a> for more info.</remarks>
		</member>
		<member name="M:TextDrawShowForAll" syntax="TextDrawShowForAll(text)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawShowForAll"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to show. Returned by <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<summary>Shows a textdraw for all players.</summary>  <seealso name="TextDrawShowForPlayer"/> <seealso name="TextDrawHideForPlayer"/> <seealso name="TextDrawHideForAll"/> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the textdraw specified does not exist. </returns>
		</member>
		<member name="M:TextDrawShowForPlayer" syntax="TextDrawShowForPlayer(playerid, text)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawShowForPlayer"/>
			<referrer name="SetHealthBarVisible"/>
			<param name="playerid">
				The ID of the player to show the textdraw for
			</param>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the textdraw to show. Returned by <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<summary>Shows a textdraw for a specific player.</summary>   <remarks>If only a single player will see a textdraw, it might be wise to use player-textdraws instead. This is also useful for textdraws that need to show information specific for an individual player.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means either the player and/or textdraw specified does not exist. </returns>
		</member>
		<member name="M:TextDrawTextSize" syntax="TextDrawTextSize(text, x, y)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawTextSize"/>
			<referrer name="ScriptInit"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The TextDraw to set the size of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The size on the X axis (left/right) following the same 640x480 grid as <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The size on the Y axis (up/down) following the same 640x480 grid as <a href="#TextDrawCreate">TextDrawCreate</a>
			</param>
			<summary>Change the size of a textdraw (box if <a href="#TextDrawUseBox">TextDrawUseBox</a> is enabled and/or clickable area for use with <a href="#TextDrawSetSelectable">TextDrawSetSelectable</a>).</summary>    <remarks> The x and y have different meanings with different TextDrawAlignment values:<p/> <ul> <li><b><c>1</c></b> (left): they are the right-most corner of the box, absolute coordinates.</li> <li><b><c>2</c></b> (center): they need to inverted (switch the two) and the x value is the overall width of the box.</li> <li><b><c>3</c></b> (right): the x and y are the coordinates of the left-most corner of the box </li> </ul> </remarks> <remarks> Using font type <b><c>4</c></b> (sprite) and <b><c>5</c></b> (model preview) converts X and Y of this function from corner coordinates to WIDTH and HEIGHT (offsets).<p/> The TextDraw box starts <b><c>10.0</c></b> units up and <b><c>5.0</c></b> to the left as the origin (<a href="#TextDrawCreate">TextDrawCreate</a> coordinate).<p/> This function defines the clickable area for use with <a href="#TextDrawSetSelectable">TextDrawSetSelectable</a>, whether a box is shown or not. </remarks> <remarks>If you want to change the text size of a textdraw that is already shown, you don't have to recreate it. Simply use <a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>/<a href="#TextDrawShowForAll">TextDrawShowForAll</a> after modifying the textdraw and the change will be visible.</remarks>
		</member>
		<member name="M:TextDrawUseBox" syntax="TextDrawUseBox(text, use)">
			<attribute name="native"/>
			<referrer name="WC_TextDrawUseBox"/>
			<referrer name="ScriptInit"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
				The ID of the text textdraw to toggle the box of
			</param>
			<param name="use">
				<b><c>1</c></b> to show a box or <b><c>0</c></b> to not show a box
			</param>
			<summary>Toggle whether a textdraw uses a box or not.</summary>   <remarks>If the textdraw is already shown, it must be re-shown (<a href="#TextDrawShowForAll">TextDrawShowForAll</a>/<a href="#TextDrawShowForPlayer">TextDrawShowForPlayer</a>) to show the changes of this function.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. This means the textdraw specified does not exist. </returns>
		</member>
		<member name="M:TextdrawSetup" syntax="TextdrawSetup(playerid)">
			<stacksize value="62"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="GUI"/>
			<dependency name="GUI"/>
			<dependency name="GetPlayerPing"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="floatdiv"/>
			<dependency name="format"/>
			<dependency name="getdate"/>
			<dependency name="pFPS"/>
			<dependency name="pSmrti"/>
			<dependency name="pUbistva"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:ThirdParty_OnCodeInit" syntax="ThirdParty_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="__YSI_g_sHeapStart"/>
			<dependency name="__YSI_g_sUnusedStart"/>
			<dependency name="cellbits"/>
		</member>
		<member name="M:Timer_GetSingleSlot" syntax="Timer_GetSingleSlot(len)">
			<tagname value="Alloc"/>
			<stacksize value="6"/>
			<referrer name="_Timer_S"/>
			<referrer name="_Timer_A"/>
			<referrer name="_Timer_C"/>
			<dependency name="Malloc_Allocate"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="YSI_g_sFirstSlot"/>
			<dependency name="YSI_g_sLastSlot"/>
			<param name="len">
			</param>
		</member>
		<member name="M:ToHexStr" syntax="ToHexStr(x)">
			<stacksize value="15"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="DisasmWriteDataRowHex"/>
			<referrer name="DisasmWriteData"/>
			<dependency name="ToHexStr"/>
			<param name="x">
			</param>
		</member>
		<member name="M:ToPrintableAscii" syntax="ToPrintableAscii(c)">
			<stacksize value="4"/>
			<referrer name="DisasmWriteDataRowChar"/>
			<dependency name="IsPrintableAscii"/>
			<param name="c">
			</param>
		</member>
		<member name="M:TogglePlayerControllable" syntax="TogglePlayerControllable(playerid, toggle)">
			<attribute name="native"/>
			<referrer name="WC_TogglePlayerControllable"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerStateChange"/>
			<referrer name="WC_DeathSkipEnd"/>
			<referrer name="InflictDamage"/>
			<param name="playerid">
				The ID of the player to toggle the controllability of
			</param>
			<param name="toggle">
				<b><c>0</c></b> to make them uncontrollable, <b><c>1</c></b> to make them controllable
			</param>
			<summary>Toggles whether a player can control their character or not. The player will also be unable to move their camera.</summary>   <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player specified does not exist. </returns>
		</member>
		<member name="M:TogglePlayerSpectating" syntax="TogglePlayerSpectating(playerid, toggle)">
			<attribute name="native"/>
			<referrer name="WC_TogglePlayerSpectating"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<param name="playerid">
				The ID of the player who should spectate
			</param>
			<param name="toggle">
				<b><c>1</c></b> to enable spectating and <b><c>0</c></b> to disable
			</param>
			<summary>Toggle whether a player is in spectator mode or not. While in spectator mode a player can spectate (watch) other players and vehicles. After using this function, either <a href="#PlayerSpectatePlayer">PlayerSpectatePlayer</a> or <a href="#PlayerSpectateVehicle">PlayerSpectateVehicle</a> needs to be used.</summary>   <seealso name="PlayerSpectatePlayer"/> <seealso name="PlayerSpectateVehicle"/> <remarks>If the player is not loaded in before setting the spectate status to false, the connection can be closed unexpectedly.</remarks> <remarks>When spectator mode is disabled, <a href="#OnPlayerSpawn">OnPlayerSpawn</a> will automatically be called, if you wish to restore player to state before spectating, you will have to handle that in <a href="#OnPlayerSpawn">OnPlayerSpawn</a>. Note also, that player can also go to class selection before if they used F4 during spectate, a player also CAN die in spectate mode due to various glitches.</remarks> <remarks>When a player is in spectate mode their HUD is hidden, making it useful for setting a player's camera without the HUD. Also, objects near the player's camera will be streamed in, making this useful for interpolating cameras.</remarks> <returns> <b><c>1</c></b>: The function executed successfully.<p/> <b><c>0</c></b>: The function failed to execute. The player does not exist. </returns>
		</member>
		<member name="M:Trim" syntax="Trim(str[], &amp;start, &amp;end)">
			<stacksize value="1"/>
			<dependency name="cellmin"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				The string to trim.
			</param>
			<param name="start">
				<paraminfo> &amp; </paraminfo>
				Start of the substring.
			</param>
			<param name="end">
				<paraminfo> &amp; </paraminfo>
				End of the substring.
			</param>
			      <remarks>  Modifies "start" and "end" to be tight on text in "str".  </remarks> 
		</member>
		<member name="M:UCMP" syntax="UCMP(value, upper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="value">
				The unsigned number to compare.
			</param>
			<param name="upper">
				The upper limit.
			</param>
			    <returns>  An unsigned comparison between the two values.  </returns> 
		</member>
		<member name="M:UnFreezePlayer" syntax="UnFreezePlayer(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:UnrelocateOpcode" syntax="UnrelocateOpcode(opcode)">
			<tagname value="Opcode"/>
			<stacksize value="3"/>
			<referrer name="GetFrameFunction"/>
			<referrer name="DisasmDecodeInsn"/>
			<referrer name="CodeScanRunFastPrescan"/>
			<dependency name="InitOpcodeTable"/>
			<dependency name="NUM_OPCODES"/>
			<dependency name="OP_NONE"/>
			<dependency name="opcode_table"/>
			<dependency name="opcode_table_is_ready"/>
			<param name="opcode">
				<paraminfo>Opcode </paraminfo>
			</param>
		</member>
		<member name="M:UpdateAdminHours" syntax="UpdateAdminHours(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="pDutyTime"/>
			<dependency name="pHours"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:UpdateHealthBar" syntax="UpdateHealthBar(playerid, force)">
			<stacksize value="8"/>
			<referrer name="WC_SetPlayerHealth"/>
			<referrer name="WC_SetPlayerArmour"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="ScriptInit"/>
			<referrer name="SetHealthBarVisible"/>
			<referrer name="InflictDamage"/>
			<referrer name="PlayerDeath"/>
			<referrer name="WC_PlayerDeathRespawn"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="PlayerTextDrawBoxColor"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="PlayerTextDrawLetterSize"/>
			<dependency name="PlayerTextDrawSetPosition"/>
			<dependency name="PlayerTextDrawShow"/>
			<dependency name="PlayerTextDrawTextSize"/>
			<dependency name="PlayerTextDrawUseBox"/>
			<dependency name="SetFakeArmour"/>
			<dependency name="SetFakeHealth"/>
			<dependency name="SetPlayerArmour"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="UpdateSyncData"/>
			<dependency name="false"/>
			<dependency name="float"/>
			<dependency name="floatround"/>
			<dependency name="floatround_ceil"/>
			<dependency name="printf"/>
			<dependency name="s_BeingResynced"/>
			<dependency name="s_ForceClassSelection"/>
			<dependency name="s_HealthBarForeground"/>
			<dependency name="s_HealthBarVisible"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastSentArmour"/>
			<dependency name="s_LastSentHealth"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxArmour"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="force">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:UpdateLoginTime" syntax="UpdateLoginTime(playerid)">
			<attribute name="public"/>
			<stacksize value="35"/>
			<dependency name="LoginTD"/>
			<dependency name="LoginTD"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="format"/>
			<dependency name="gettime"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:UpdatePlayerVirtualWorld" syntax="UpdatePlayerVirtualWorld(playerid)">
			<stacksize value="5"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerRequestClass"/>
			<dependency name="GetPlayerVirtualWorld"/>
			<dependency name="SetPlayerVirtualWorld"/>
			<dependency name="s_World"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:UpdateSyncData" syntax="UpdateSyncData(playerid)">
			<stacksize value="6"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="MakePlayerFacePlayer"/>
			<dependency name="GetPlayerState"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerStreamedIn"/>
			<dependency name="SendLastSyncData"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:Utils_PreSort" syntax="Utils_PreSort(arr[], num)">
			<stacksize value="4"/>
			<referrer name="Mode"/>
			<referrer name="Median"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				The array to sort.
			</param>
			<param name="num">
				The size of the array.
			</param>
			    <remarks>  Sorts the array in place.  Uses bubble sort because it is easy and fast for  pre-sorted arrays (which the callers are likely to be).  </remarks> 
		</member>
		<member name="M:VALID_PLAYERID" syntax="VALID_PLAYERID(playerid)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="playerid">
				The player to check.
			</param>
			  <returns>  Is this a valid playerid (NOT, is the player connected).  </returns> 
		</member>
		<member name="M:VA_OnCodeInit" syntax="VA_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AMX_Write"/>
			<dependency name="CGen_SetupCodeSpace"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmInit"/>
			<dependency name="DisasmNextInsn"/>
			<dependency name="OP_NONE"/>
			<dependency name="OP_NOP"/>
			<dependency name="RelocateOpcode"/>
			<dependency name="YSI_g_sCodeSpace"/>
		</member>
		<member name="M:VectorSize" syntax="VectorSize(x, y, z)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the X axis
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the Y axis
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the Z axis
			</param>
			<summary>Returns the norm (length) of the provided vector.</summary>    <seealso name="GetPlayerDistanceFromPoint"/> <seealso name="GetVehicleDistanceFromPoint"/> <seealso name="floatsqroot"/> <remarks>This function was added in <b>SA-MP 0.3z</b> and will not work in earlier versions!</remarks> <returns>The norm (length) of the provided vector as a float.</returns>
		</member>
		<member name="M:WC_AddPlayerClass" syntax="WC_AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<stacksize value="14"/>
			<dependency name="AddPlayerClass"/>
			<dependency name="e_Ammo1"/>
			<dependency name="e_Ammo2"/>
			<dependency name="e_Ammo3"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_Rot"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Team"/>
			<dependency name="e_Weapon1"/>
			<dependency name="e_Weapon2"/>
			<dependency name="e_Weapon3"/>
			<dependency name="s_ClassSpawnInfo"/>
			<dependency name="s_ClassSpawnInfo"/>
			<param name="modelid">
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon1">
			</param>
			<param name="weapon1_ammo">
			</param>
			<param name="weapon2">
			</param>
			<param name="weapon2_ammo">
			</param>
			<param name="weapon3">
			</param>
			<param name="weapon3_ammo">
			</param>
		</member>
		<member name="M:WC_AddPlayerClassEx" syntax="WC_AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<stacksize value="15"/>
			<dependency name="AddPlayerClassEx"/>
			<dependency name="e_Ammo1"/>
			<dependency name="e_Ammo2"/>
			<dependency name="e_Ammo3"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_Rot"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Team"/>
			<dependency name="e_Weapon1"/>
			<dependency name="e_Weapon2"/>
			<dependency name="e_Weapon3"/>
			<dependency name="s_ClassSpawnInfo"/>
			<dependency name="s_ClassSpawnInfo"/>
			<param name="teamid">
			</param>
			<param name="modelid">
			</param>
			<param name="spawn_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="spawn_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z_angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon1">
			</param>
			<param name="weapon1_ammo">
			</param>
			<param name="weapon2">
			</param>
			<param name="weapon2_ammo">
			</param>
			<param name="weapon3">
			</param>
			<param name="weapon3_ammo">
			</param>
		</member>
		<member name="M:WC_AddStaticVehicle" syntax="WC_AddStaticVehicle(modelid, x, y, z, angle, color1, color2)">
			<stacksize value="10"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<dependency name="AddStaticVehicle"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
		</member>
		<member name="M:WC_AddStaticVehicleEx" syntax="WC_AddStaticVehicleEx(modelid, x, y, z, angle, color1, color2, respawn_delay, addsiren)">
			<stacksize value="12"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<dependency name="AddStaticVehicleEx"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
			<param name="respawn_delay">
			</param>
			<param name="addsiren">
			</param>
		</member>
		<member name="M:WC_ApplyAnimation" syntax="WC_ApplyAnimation(playerid, animlib[], animname[], fDelta, loop, lockx, locky, freeze, time, forcesync)">
			<stacksize value="12"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="s_IsDying"/>
			<param name="playerid">
			</param>
			<param name="animlib">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="animname">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="fDelta">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="loop">
			</param>
			<param name="lockx">
			</param>
			<param name="locky">
			</param>
			<param name="freeze">
			</param>
			<param name="time">
			</param>
			<param name="forcesync">
			</param>
		</member>
		<member name="M:WC_CbugPunishment" syntax="WC_CbugPunishment(playerid, weapon)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="ClearAnimations"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="false"/>
			<param name="playerid">
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:WC_ClearAnimations" syntax="WC_ClearAnimations(playerid, forcesync)">
			<stacksize value="4"/>
			<dependency name="ClearAnimations"/>
			<dependency name="GetTickCount"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<param name="playerid">
			</param>
			<param name="forcesync">
			</param>
		</member>
		<member name="M:WC_CreatePlayerTextDraw" syntax="WC_CreatePlayerTextDraw(playerid, x, y, text[])">
			<tagname value="PlayerText"/>
			<stacksize value="7"/>
			<referrer name="va_CreatePlayerTextDraw"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="false"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:WC_CreateVehicle" syntax="WC_CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay, addsiren)">
			<stacksize value="12"/>
			<referrer name="Iter_CreateVehicle"/>
			<dependency name="CreateVehicle"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
			<param name="respawn_delay">
			</param>
			<param name="addsiren">
			</param>
		</member>
		<member name="M:WC_DamageFeedUpdate" syntax="WC_DamageFeedUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="DamageFeedUpdate"/>
			<dependency name="IsDamageFeedActive"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_DamageFeedTimer"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_DeathSkipEnd" syntax="WC_DeathSkipEnd(playerid)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<referrer name="OnPlayerUpdate"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SetPlayerSpecialAction"/>
			<dependency name="TogglePlayerControllable"/>
			<dependency name="e_Weapon"/>
			<dependency name="e_WeaponAmmo"/>
			<dependency name="e_WeaponId"/>
			<dependency name="s_SyncData"/>
			<dependency name="s_SyncData"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_DelayedDeath" syntax="WC_DelayedDeath(playerid, issuerid, reason)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="s_DelayedDeathTimer"/>
			<param name="playerid">
			</param>
			<param name="issuerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:WC_DestroyVehicle" syntax="WC_DestroyVehicle(vehicleid)">
			<stacksize value="3"/>
			<referrer name="Iter_DestroyVehicle"/>
			<dependency name="DestroyVehicle"/>
			<dependency name="KillTimer"/>
			<dependency name="false"/>
			<dependency name="s_LastVehicleShooter"/>
			<dependency name="s_VehicleAlive"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:WC_GetPlayerArmour" syntax="WC_GetPlayerArmour(playerid, &amp;armour)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="s_PlayerArmour"/>
			<param name="playerid">
			</param>
			<param name="armour">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:WC_GetPlayerHealth" syntax="WC_GetPlayerHealth(playerid, &amp;health)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_lobby"/>
			<dependency name="s_PlayerHealth"/>
			<param name="playerid">
			</param>
			<param name="health">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:WC_GetPlayerState" syntax="WC_GetPlayerState(playerid)">
			<stacksize value="3"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<dependency name="GetPlayerState"/>
			<dependency name="s_IsDying"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_GetPlayerTeam" syntax="WC_GetPlayerTeam(playerid)">
			<stacksize value="3"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="s_PlayerTeam"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_GetPlayerVirtualWorld" syntax="WC_GetPlayerVirtualWorld(playerid)">
			<stacksize value="4"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="GetDistanceBetweenPlayers"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="GetPlayerVirtualWorld"/>
			<dependency name="s_World"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_GetWeaponName" syntax="WC_GetWeaponName(weaponid, weapon[], len)">
			<stacksize value="6"/>
			<referrer name="ReturnWeaponName"/>
			<referrer name="GetRejectedHit"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<dependency name="format"/>
			<dependency name="g_WeaponName"/>
			<dependency name="g_WeaponName"/>
			<dependency name="strunpack"/>
			<param name="weaponid">
			</param>
			<param name="weapon">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:WC_IsPlayerInCheckpoint" syntax="WC_IsPlayerInCheckpoint(playerid)">
			<stacksize value="4"/>
			<dependency name="IsPlayerInCheckpoint"/>
			<dependency name="IsPlayerSpawned"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_IsValidVehicle" syntax="WC_IsValidVehicle(vehicleid)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:WC_KillVehicle" syntax="WC_KillVehicle(vehicleid, killerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="OnVehicleDeath"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<param name="vehicleid">
			</param>
			<param name="killerid">
			</param>
		</member>
		<member name="M:WC_OnDeadVehicleSpawn" syntax="WC_OnDeadVehicleSpawn(vehicleid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SetVehicleToRespawn"/>
			<dependency name="s_VehicleRespawnTimer"/>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:WC_OnFilterScriptExit" syntax="WC_OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptInit_OnFilterScriptExit"/>
			<dependency name="ScriptInit_OnScriptExit"/>
			<dependency name="ScriptInit_PostExitFuncs_"/>
			<dependency name="ScriptInit_PreExitFuncs_"/>
			<dependency name="YSI_FILTERSCRIPT"/>
		</member>
		<member name="M:WC_OnFilterScriptInit" syntax="WC_OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="31"/>
			<dependency name="GetMaxPlayers"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Init"/>
			<dependency name="SSCANF_IsConnected"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_gInit"/>
			<dependency name="true"/>
		</member>
		<member name="M:WC_OnGameModeExit" syntax="WC_OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="ScriptInit_OnGameModeExit"/>
			<dependency name="ScriptInit_OnScriptExit"/>
			<dependency name="ScriptInit_PostExitFuncs_"/>
			<dependency name="ScriptInit_PreExitFuncs_"/>
			<dependency name="YSI_FILTERSCRIPT"/>
		</member>
		<member name="M:WC_OnGameModeInit" syntax="WC_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="31"/>
			<dependency name="GetMaxPlayers"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Init"/>
			<dependency name="SSCANF_IsConnected"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_gInit"/>
			<dependency name="true"/>
		</member>
		<member name="M:WC_OnPlayerConnect" syntax="WC_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="30"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Join"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_OnPlayerDamage" syntax="WC_OnPlayerDamage(&amp;playerid, &amp;amount, &amp;issuerid, &amp;weapon, &amp;bodypart)">
			<attribute name="public"/>
			<stacksize value="58"/>
			<dependency name="GetName"/>
			<dependency name="HitMark"/>
			<dependency name="InDM"/>
			<dependency name="IsPlayerDueling"/>
			<dependency name="SetPlayerChatBubble"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_TextDrawShowForPlayer"/>
			<dependency name="false"/>
			<dependency name="format"/>
			<dependency name="true"/>
			<param name="playerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="amount">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="issuerid">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="weapon">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="bodypart">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:WC_OnPlayerDeath" syntax="WC_OnPlayerDeath(playerid, killerid, reason)">
			<attribute name="public"/>
			<stacksize value="157"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="DTD"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerInterior"/>
			<dependency name="GetPlayerName"/>
			<dependency name="GiveMoney"/>
			<dependency name="InDM"/>
			<dependency name="Killed"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="RespawningDM"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="TakeSpectateID"/>
			<dependency name="WC_GetPlayerArmour"/>
			<dependency name="WC_GetPlayerVirtualWorld"/>
			<dependency name="WC_PlayerSpectatePlayer"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_SendDeathMessage"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="cellmin"/>
			<dependency name="forfeitPlayerDuel"/>
			<dependency name="format"/>
			<dependency name="pDeaths"/>
			<dependency name="pKills"/>
			<dependency name="pLang"/>
			<dependency name="pRank"/>
			<dependency name="pSmrti"/>
			<dependency name="pUbistva"/>
			<dependency name="sql_user_update_integer"/>
			<dependency name="strins"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="killerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:WC_OnPlayerDisconnect" syntax="WC_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_Leave"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:WC_OnPlayerKeyStateChange" syntax="WC_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="newkeys">
			</param>
			<param name="oldkeys">
			</param>
		</member>
		<member name="M:WC_OnPlayerRequestClass" syntax="WC_OnPlayerRequestClass(playerid, classid)">
			<attribute name="public"/>
			<stacksize value="16"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="GunSpawn"/>
			<dependency name="Killed"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SetCameraBehindPlayer"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="SetTimerEx"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetSpawnInfo"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="pKills"/>
			<dependency name="pLang"/>
			<dependency name="pSkin"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="classid">
			</param>
		</member>
		<member name="M:WC_OnPlayerSpawn" syntax="WC_OnPlayerSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="rAgcNewAmmo"/>
			<dependency name="rAgcOldAmmo"/>
			<dependency name="rAgc_ResetPlayerWeapons"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="rAgc_Weapons"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_OnPlayerUpdate" syntax="WC_OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="GetTickCount"/>
			<dependency name="rAgcUpdateTicks"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_OnPlayerWeaponShot" syntax="WC_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="GetPlayerAmmo"/>
			<dependency name="GetPlayerWeapon"/>
			<dependency name="GetTickCount"/>
			<dependency name="KillTimer"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_GetPlayerState"/>
			<dependency name="false"/>
			<dependency name="rAgcAntibugTicks"/>
			<dependency name="rAgcConstWep"/>
			<dependency name="rAgcFirstShot"/>
			<dependency name="rAgcFirstTick"/>
			<dependency name="rAgcRepeater"/>
			<dependency name="rAgcSecondShot"/>
			<dependency name="rAgcSecondTick"/>
			<dependency name="rAgc_IsPlayerPaused"/>
			<dependency name="rAgc_IsWeaponAmmoable"/>
			<dependency name="rAgc_IsWepRapid"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="hittype">
			</param>
			<param name="hitid">
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerDeathRespawn" syntax="WC_PlayerDeathRespawn(playerid)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="FreezeSyncData"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="OnPlayerDeathFinished"/>
			<dependency name="SetFakeFacingAngle"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="SetPlayerVirtualWorld"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="false"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_TrueDeath"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_PlayerSpectatePlayer" syntax="WC_PlayerSpectatePlayer(playerid, targetplayerid, mode)">
			<stacksize value="5"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="PlayerSpectatePlayer"/>
			<dependency name="s_Spectating"/>
			<param name="playerid">
			</param>
			<param name="targetplayerid">
			</param>
			<param name="mode">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawAlignment" syntax="WC_PlayerTextDrawAlignment(playerid, text, alignment)">
			<stacksize value="5"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawAlignment"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="alignment">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawBackgroundColo" syntax="WC_PlayerTextDrawBackgroundColo(playerid, text, color)">
			<stacksize value="5"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawBackgroundColor"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawBoxColor" syntax="WC_PlayerTextDrawBoxColor(playerid, text, color)">
			<stacksize value="5"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<dependency name="PlayerTextDrawBoxColor"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawColor" syntax="WC_PlayerTextDrawColor(playerid, text, color)">
			<stacksize value="5"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawColor"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawDestroy" syntax="WC_PlayerTextDrawDestroy(playerid, text)">
			<stacksize value="4"/>
			<referrer name="mS_DestroyPlayerMPs"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawFont" syntax="WC_PlayerTextDrawFont(playerid, text, font)">
			<stacksize value="5"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawFont"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="font">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawHide" syntax="WC_PlayerTextDrawHide(playerid, text)">
			<stacksize value="4"/>
			<referrer name="toggleAltChat"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<referrer name="PTime"/>
			<dependency name="PlayerTextDrawHide"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawLetterSize" syntax="WC_PlayerTextDrawLetterSize(playerid, text, x, y)">
			<stacksize value="6"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawLetterSize"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetOutline" syntax="WC_PlayerTextDrawSetOutline(playerid, text, size)">
			<stacksize value="5"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetOutline"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetPreviewMode" syntax="WC_PlayerTextDrawSetPreviewMode(playerid, text, modelindex)">
			<stacksize value="5"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="SetPlayerSkinn"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetPreviewModel"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="modelindex">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetPreviewRot" syntax="WC_PlayerTextDrawSetPreviewRot(playerid, text, fRotX, fRotY, fRotZ, fZoom)">
			<stacksize value="8"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetPreviewRot"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fZoom">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetPreviewVehC" syntax="WC_PlayerTextDrawSetPreviewVehC(playerid, text, color1, color2)">
			<stacksize value="6"/>
			<referrer name="CreatePTextdraws"/>
			<dependency name="PlayerTextDrawSetPreviewVehCol"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetProportiona" syntax="WC_PlayerTextDrawSetProportiona(playerid, text, set)">
			<stacksize value="5"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetProportional"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="set">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetSelectable" syntax="WC_PlayerTextDrawSetSelectable(playerid, text, set)">
			<stacksize value="5"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetSelectable"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="set">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetShadow" syntax="WC_PlayerTextDrawSetShadow(playerid, text, size)">
			<stacksize value="5"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawSetShadow"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawSetString" syntax="WC_PlayerTextDrawSetString(playerid, text, string[])">
			<stacksize value="5"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="resetAltChat"/>
			<referrer name="sendAltChatMessage"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="UpdateLoginTime"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="PlayerTextDrawSetString"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawShow" syntax="WC_PlayerTextDrawShow(playerid, text)">
			<stacksize value="4"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="toggleAltChat"/>
			<referrer name="pc_cmd_toghud"/>
			<referrer name="SetPlayerSkinn"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="ShowLoginTextDraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="PlayerTextDrawShow"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawTextSize" syntax="WC_PlayerTextDrawTextSize(playerid, text, x, y)">
			<stacksize value="6"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="mS_CreateMPTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<referrer name="ShowFreeroamTextDraws"/>
			<dependency name="PlayerTextDrawTextSize"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_PlayerTextDrawUseBox" syntax="WC_PlayerTextDrawUseBox(playerid, text, use)">
			<stacksize value="5"/>
			<referrer name="mS_CreateCurrentPageTextDraw"/>
			<referrer name="mS_CreatePlayerDialogButton"/>
			<referrer name="mS_CreatePlayerHeaderTextDraw"/>
			<referrer name="mS_CreatePlayerBGTextDraw"/>
			<referrer name="CreatePTextdraws"/>
			<dependency name="PlayerTextDrawUseBox"/>
			<dependency name="s_InternalPlayerTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>PlayerText </paraminfo>
			</param>
			<param name="use">
			</param>
		</member>
		<member name="M:WC_SecondKnifeAnim" syntax="WC_SecondKnifeAnim(playerid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="ApplyAnimation"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_SendDeathMessage" syntax="WC_SendDeathMessage(killer, killee, weapon)">
			<stacksize value="5"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="SendDeathMessage"/>
			<param name="killer">
			</param>
			<param name="killee">
			</param>
			<param name="weapon">
			</param>
		</member>
		<member name="M:WC_SetPlayerArmour" syntax="WC_SetPlayerArmour(playerid, armour)">
			<stacksize value="5"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="SpawnSetup"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerMaxArmour"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="armour">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_SetPlayerHealth" syntax="WC_SetPlayerHealth(playerid, health, armour)">
			<stacksize value="5"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="WC_VendingMachineUsed"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="PTime"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<dependency name="operator!=(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="InflictDamage"/>
			<dependency name="UpdateHealthBar"/>
			<dependency name="s_PlayerArmour"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxArmour"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="armour">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_SetPlayerPos" syntax="WC_SetPlayerPos(playerid, x, y, z)">
			<stacksize value="6"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="@yH_OnDialogResponse@005"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="afkCheck"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<dependency name="GetTickCount"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<param name="playerid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_SetPlayerPosFindZ" syntax="WC_SetPlayerPosFindZ(playerid, x, y, z)">
			<stacksize value="6"/>
			<dependency name="GetTickCount"/>
			<dependency name="SetPlayerPosFindZ"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<param name="playerid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_SetPlayerSpecialAction" syntax="WC_SetPlayerSpecialAction(playerid, actionid)">
			<stacksize value="4"/>
			<dependency name="IsPlayerSpawned"/>
			<dependency name="SetPlayerSpecialAction"/>
			<param name="playerid">
			</param>
			<param name="actionid">
			</param>
		</member>
		<member name="M:WC_SetPlayerTeam" syntax="WC_SetPlayerTeam(playerid, team)">
			<stacksize value="1"/>
			<dependency name="s_PlayerTeam"/>
			<param name="playerid">
			</param>
			<param name="team">
			</param>
		</member>
		<member name="M:WC_SetPlayerVelocity" syntax="WC_SetPlayerVelocity(playerid, X, Y, Z)">
			<stacksize value="6"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="GetTickCount"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<param name="playerid">
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_SetSpawnForStreamedIn" syntax="WC_SetSpawnForStreamedIn(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="s_SpawnForStreamedIn"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_SetSpawnInfo" syntax="WC_SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)">
			<stacksize value="15"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="SetSpawnInfo"/>
			<dependency name="e_Ammo1"/>
			<dependency name="e_Ammo2"/>
			<dependency name="e_Ammo3"/>
			<dependency name="e_PosX"/>
			<dependency name="e_PosY"/>
			<dependency name="e_PosZ"/>
			<dependency name="e_Rot"/>
			<dependency name="e_Skin"/>
			<dependency name="e_Team"/>
			<dependency name="e_Weapon1"/>
			<dependency name="e_Weapon2"/>
			<dependency name="e_Weapon3"/>
			<dependency name="false"/>
			<dependency name="s_PlayerClass"/>
			<dependency name="s_PlayerSpawnInfo"/>
			<dependency name="s_PlayerSpawnInfo"/>
			<dependency name="s_SpawnInfoModified"/>
			<param name="playerid">
			</param>
			<param name="team">
			</param>
			<param name="skin">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rotation">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weapon1">
			</param>
			<param name="weapon1_ammo">
			</param>
			<param name="weapon2">
			</param>
			<param name="weapon2_ammo">
			</param>
			<param name="weapon3">
			</param>
			<param name="weapon3_ammo">
			</param>
		</member>
		<member name="M:WC_SpawnForStreamedIn" syntax="WC_SpawnForStreamedIn(playerid)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<referrer name="OnPlayerUpdate"/>
			<dependency name="ClearAnimationsForPlayer"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerStreamedIn"/>
			<dependency name="SendLastSyncData"/>
			<dependency name="SpawnPlayerForWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_SpawnPlayer" syntax="WC_SpawnPlayer(playerid)">
			<stacksize value="3"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="SpawnPlayer"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_SpawnPlayerInPlace" syntax="WC_SpawnPlayerInPlace(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="SpawnPlayerInPlace"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:WC_TextDrawAlignment" syntax="WC_TextDrawAlignment(text, alignment)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawAlignment"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="alignment">
			</param>
		</member>
		<member name="M:WC_TextDrawBackgroundColor" syntax="WC_TextDrawBackgroundColor(text, color)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawBackgroundColor"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_TextDrawBoxColor" syntax="WC_TextDrawBoxColor(text, color)">
			<stacksize value="4"/>
			<dependency name="TextDrawBoxColor"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_TextDrawColor" syntax="WC_TextDrawColor(text, color)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawColor"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="color">
			</param>
		</member>
		<member name="M:WC_TextDrawCreate" syntax="WC_TextDrawCreate(x, y, text[])">
			<tagname value="Text"/>
			<stacksize value="6"/>
			<referrer name="va_TextDrawCreate"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawCreate"/>
			<dependency name="false"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawDestroy" syntax="WC_TextDrawDestroy(text)">
			<stacksize value="3"/>
			<dependency name="TextDrawDestroy"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawFont" syntax="WC_TextDrawFont(text, font)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawFont"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="font">
			</param>
		</member>
		<member name="M:WC_TextDrawHideForAll" syntax="WC_TextDrawHideForAll(text)">
			<stacksize value="3"/>
			<dependency name="TextDrawHideForAll"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawHideForPlayer" syntax="WC_TextDrawHideForPlayer(playerid, text)">
			<stacksize value="4"/>
			<referrer name="HitRemove"/>
			<dependency name="TextDrawHideForPlayer"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawLetterSize" syntax="WC_TextDrawLetterSize(text, x, y)">
			<stacksize value="5"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawLetterSize"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawSetOutline" syntax="WC_TextDrawSetOutline(text, size)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawSetOutline"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:WC_TextDrawSetPreviewModel" syntax="WC_TextDrawSetPreviewModel(text, modelindex)">
			<stacksize value="4"/>
			<dependency name="TextDrawSetPreviewModel"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="modelindex">
			</param>
		</member>
		<member name="M:WC_TextDrawSetPreviewRot" syntax="WC_TextDrawSetPreviewRot(text, fRotX, fRotY, fRotZ, fZoom)">
			<stacksize value="7"/>
			<dependency name="TextDrawSetPreviewRot"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fZoom">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawSetPreviewVehCol" syntax="WC_TextDrawSetPreviewVehCol(text, color1, color2)">
			<stacksize value="5"/>
			<dependency name="TextDrawSetPreviewVehCol"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="color1">
			</param>
			<param name="color2">
			</param>
		</member>
		<member name="M:WC_TextDrawSetProportional" syntax="WC_TextDrawSetProportional(text, set)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawSetProportional"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="set">
			</param>
		</member>
		<member name="M:WC_TextDrawSetSelectable" syntax="WC_TextDrawSetSelectable(text, set)">
			<stacksize value="4"/>
			<dependency name="TextDrawSetSelectable"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="set">
			</param>
		</member>
		<member name="M:WC_TextDrawSetShadow" syntax="WC_TextDrawSetShadow(text, size)">
			<stacksize value="4"/>
			<referrer name="CreateGTextdraws"/>
			<dependency name="TextDrawSetShadow"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:WC_TextDrawSetString" syntax="WC_TextDrawSetString(text, string[])">
			<stacksize value="4"/>
			<dependency name="TextDrawSetString"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawShowForAll" syntax="WC_TextDrawShowForAll(text)">
			<stacksize value="3"/>
			<dependency name="TextDrawShowForAll"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawShowForPlayer" syntax="WC_TextDrawShowForPlayer(playerid, text)">
			<stacksize value="4"/>
			<referrer name="WC_OnPlayerDamage"/>
			<dependency name="TextDrawShowForPlayer"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="playerid">
			</param>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawTextSize" syntax="WC_TextDrawTextSize(text, x, y)">
			<stacksize value="5"/>
			<dependency name="TextDrawTextSize"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WC_TextDrawUseBox" syntax="WC_TextDrawUseBox(text, use)">
			<stacksize value="4"/>
			<dependency name="TextDrawUseBox"/>
			<dependency name="s_InternalTextDraw"/>
			<param name="text">
				<paraminfo>Text </paraminfo>
			</param>
			<param name="use">
			</param>
		</member>
		<member name="M:WC_TogglePlayerControllable" syntax="WC_TogglePlayerControllable(playerid, toggle)">
			<stacksize value="4"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="OnDuelTimer"/>
			<referrer name="Free"/>
			<referrer name="UnFreezePlayer"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<dependency name="GetTickCount"/>
			<dependency name="TogglePlayerControllable"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_LastStop"/>
			<param name="playerid">
			</param>
			<param name="toggle">
			</param>
		</member>
		<member name="M:WC_TogglePlayerSpectating" syntax="WC_TogglePlayerSpectating(playerid, toggle)">
			<stacksize value="4"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="PTime"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="KillTimer"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="false"/>
			<dependency name="s_DeathTimer"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_VendingUseTimer"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="toggle">
			</param>
		</member>
		<member name="M:WC_VendingMachineUsed" syntax="WC_VendingMachineUsed(playerid, health_given)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="GetPlayerState"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_PlayerHealth"/>
			<dependency name="s_PlayerMaxHealth"/>
			<dependency name="s_VendingUseTimer"/>
			<param name="playerid">
			</param>
			<param name="health_given">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:WasPlayerInVehicle" syntax="WasPlayerInVehicle(playerid, time)">
			<stacksize value="2"/>
			<referrer name="OnPlayerDeath"/>
			<dependency name="GetTickCount"/>
			<dependency name="s_LastVehicleTick"/>
			<param name="playerid">
			</param>
			<param name="time">
			</param>
		</member>
		<member name="M:WriteAmxCell" syntax="WriteAmxCell(offset, value)">
			<stacksize value="6"/>
			<dependency name="GetAmxAddress"/>
			<dependency name="WritePhysMemoryCell"/>
			<param name="offset">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:WriteAmxMemory" syntax="WriteAmxMemory(address, value)">
			<stacksize value="1"/>
			<referrer name="WriteAmxMemoryArray"/>
			<referrer name="HookPublic"/>
			<referrer name="HookNative"/>
			<referrer name="AsmEmitCell"/>
			<referrer name="AsmEmitLabelStringize"/>
			<referrer name="AsmEmitPadding"/>
			<param name="address">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:WriteAmxMemoryArray" syntax="WriteAmxMemoryArray(address, values[], size)">
			<stacksize value="6"/>
			<dependency name="WriteAmxMemory"/>
			<param name="address">
			</param>
			<param name="values">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:WritePhysMemory" syntax="WritePhysMemory(address, src[], num)">
			<stacksize value="5"/>
			<dependency name="AbsToRel"/>
			<param name="address">
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="num">
			</param>
		</member>
		<member name="M:WritePhysMemoryCell" syntax="WritePhysMemoryCell(address, what)">
			<stacksize value="5"/>
			<referrer name="WriteAmxCell"/>
			<dependency name="AbsToRel"/>
			<param name="address">
			</param>
			<param name="what">
			</param>
		</member>
		<member name="M:X@" syntax="X@(n)">
			<stacksize value="6"/>
			<dependency name="setproperty"/>
			<param name="n">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:YHNPS_Find" syntax="YHNPS_Find(heap, end, value)">
			<stacksize value="7"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="AMX_Read"/>
			<dependency name="cellmin"/>
			<param name="heap">
			</param>
			<param name="end">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:YHNPS_Insert" syntax="YHNPS_Insert(heap, count, value, ptr)">
			<stacksize value="10"/>
			<referrer name="YHNPS_Push"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="cellmax"/>
			<dependency name="rawMemcpy_"/>
			<param name="heap">
			</param>
			<param name="count">
			</param>
			<param name="value">
			</param>
			<param name="ptr">
			</param>
		</member>
		<member name="M:YHNPS_OnCodeInit" syntax="YHNPS_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="YSI_g_sStack"/>
			<dependency name="YSI_g_sStackPtr"/>
			<remarks>  </remarks> 
		</member>
		<member name="M:YHNPS_Push" syntax="YHNPS_Push(heap, &amp;allocated, &amp;nativeCount, &amp;stockCount, base, find, replace)">
			<stacksize value="7"/>
			<referrer name="Hooks_OnCodeInit"/>
			<dependency name="GetNativeAddressFromIndex"/>
			<dependency name="HeapAllocCells"/>
			<dependency name="YHNPS_Insert"/>
			<dependency name="cellmax"/>
			<dependency name="max"/>
			<dependency name="rawMemcpy_"/>
			<param name="heap">
			</param>
			<param name="allocated">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="nativeCount">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="stockCount">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="base">
			</param>
			<param name="find">
			</param>
			<param name="replace">
			</param>
		</member>
		<member name="M:YSIPrint" syntax="YSIPrint(string[])">
			<attribute name="native"/>
			<referrer name="ScriptInit_OnScriptInit"/>
			<referrer name="YVers_Callback"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:YSIPrintF" syntax="YSIPrintF(format[], ...)">
			<attribute name="native"/>
			<referrer name="YVers_Callback"/>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:YVA2_CodeGenDeepCleanup" syntax="YVA2_CodeGenDeepCleanup(ctx[], depth, returningString)">
			<stacksize value="5"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="AsmEmitPopPri"/>
			<dependency name="AsmEmitStack"/>
			<dependency name="cellbits"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="depth">
			</param>
			<param name="returningString">
			</param>
		</member>
		<member name="M:YVA2_CodeGenMainCleanup" syntax="YVA2_CodeGenMainCleanup(ctx[])">
			<stacksize value="5"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="AsmEmitAdd"/>
			<dependency name="AsmEmitLctrl"/>
			<dependency name="AsmEmitLoadPri"/>
			<dependency name="AsmEmitPopAlt"/>
			<dependency name="AsmEmitSctrl"/>
			<dependency name="AsmEmitStorPri"/>
			<dependency name="ref"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
		</member>
		<member name="M:YVA2_CodeGenPushSite" syntax="YVA2_CodeGenPushSite(ctx[], pushedBytes, skippedBytes, offset)">
			<stacksize value="7"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="AsmEmitAddrPri"/>
			<dependency name="AsmEmitCallAbs"/>
			<dependency name="AsmEmitHeap"/>
			<dependency name="AsmEmitPushC"/>
			<dependency name="AsmEmitPushPri"/>
			<dependency name="O@A_"/>
			<dependency name="O@V_"/>
			<dependency name="YVA2_DoPush"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="pushedBytes">
			</param>
			<param name="skippedBytes">
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:YVA2_CodeGenPushVariable" syntax="YVA2_CodeGenPushVariable(ctx[], stack)">
			<stacksize value="5"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="AsmEmitPushS"/>
			<param name="ctx">
				<paraminfo> [21] </paraminfo>
			</param>
			<param name="stack">
			</param>
		</member>
		<member name="M:YVA2_CodeGenShiftCode" syntax="YVA2_CodeGenShiftCode(dest, src, end)">
			<stacksize value="4"/>
			<referrer name="YVA2_FoundCall"/>
			<dependency name="OP_NOP"/>
			<dependency name="RelocateOpcode"/>
			<param name="dest">
			</param>
			<param name="src">
			</param>
			<param name="end">
			</param>
		</member>
		<member name="M:YVA2_DoPush" syntax="YVA2_DoPush(skippedBytes, pushedBytes, pushRequirements)">
			<stacksize value="1"/>
			<referrer name="YVA2_DummyPush"/>
			<referrer name="YVA2_CodeGenPushSite"/>
			<dependency name="memcpy"/>
			<param name="skippedBytes">
			</param>
			<param name="pushedBytes">
			</param>
			<param name="pushRequirements">
			</param>
		</member>
		<member name="M:YVA2_DummyPush" syntax="YVA2_DummyPush(skippedBytes, pushedBytes, pushRequirements, dummy0, dummy1, dummy2, dummy3, dummy4, dummy5)">
			<stacksize value="6"/>
			<referrer name="YVA2_Initalise"/>
			<referrer name="va_CreatePlayerTextDraw"/>
			<referrer name="va_TextDrawCreate"/>
			<referrer name="va_SendClientMessage"/>
			<referrer name="va_SendClientMessageToAll"/>
			<referrer name="va_SendPlayerMessageToPlayer"/>
			<referrer name="va_SendPlayerMessageToAll"/>
			<referrer name="va_GameTextForPlayer"/>
			<referrer name="va_GameTextForAll"/>
			<referrer name="va_print"/>
			<referrer name="va_fprintf"/>
			<referrer name="va_SendRconCommand"/>
			<referrer name="Iter_RandomAdd_InternalC"/>
			<referrer name="Iter_RandomAdd_InternalD"/>
			<referrer name="Iter_RandomRemove_InternalC"/>
			<referrer name="Iter_RandomRemove_InternalD"/>
			<referrer name="Iter_RandomFree_InternalD"/>
			<dependency name="Debug_Print0"/>
			<dependency name="TRUE"/>
			<dependency name="YSI_g_sInitialised"/>
			<dependency name="YVA2_DoPush"/>
			<dependency name="YVA2_Initalise"/>
			<param name="skippedBytes">
			</param>
			<param name="pushedBytes">
			</param>
			<param name="pushRequirements">
			</param>
			<param name="dummy0">
			</param>
			<param name="dummy1">
			</param>
			<param name="dummy2">
			</param>
			<param name="dummy3">
			</param>
			<param name="dummy4">
			</param>
			<param name="dummy5">
			</param>
		</member>
		<member name="M:YVA2_FoundCall" syntax="YVA2_FoundCall(m[])">
			<stacksize value="17"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="AsmContext_buffer"/>
			<dependency name="AsmContext_buffer_offset"/>
			<dependency name="AsmEmitHeap"/>
			<dependency name="AsmEmitPushAlt"/>
			<dependency name="AsmEmitStack"/>
			<dependency name="CodeScanGetMatchAddressData"/>
			<dependency name="CodeScanGetMatchDisasm"/>
			<dependency name="CodeScanGetMatchHole"/>
			<dependency name="CodeScanGetMatchLength"/>
			<dependency name="CodeScanGetMatchStack"/>
			<dependency name="Debug_Print0"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmNextInsn"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_POP_PRI"/>
			<dependency name="ReadAmxMemory"/>
			<dependency name="YSI_g_sContexts"/>
			<dependency name="YSI_g_sContexts"/>
			<dependency name="YSI_g_sLength"/>
			<dependency name="YSI_g_sMaxNesting"/>
			<dependency name="YSI_g_sPassthroughNestings"/>
			<dependency name="YSI_g_sSkips"/>
			<dependency name="YSI_g_sStacks"/>
			<dependency name="YVA2_CodeGenDeepCleanup"/>
			<dependency name="YVA2_CodeGenMainCleanup"/>
			<dependency name="YVA2_CodeGenPushSite"/>
			<dependency name="YVA2_CodeGenPushVariable"/>
			<dependency name="YVA2_CodeGenShiftCode"/>
			<dependency name="cellbits"/>
			<dependency name="cellmax"/>
			<dependency name="cellmin"/>
			<param name="m">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:YVA2_FoundPush" syntax="YVA2_FoundPush(m[])">
			<stacksize value="12"/>
			<referrer name="YVA2_Initalise"/>
			<dependency name="CodeScanGetMatchAddress"/>
			<dependency name="CodeScanGetMatchAsm"/>
			<dependency name="CodeScanGetMatchDisasm"/>
			<dependency name="CodeScanGetMatchHole"/>
			<dependency name="CodeScanGetMatchLength"/>
			<dependency name="CodeScanGetMatchStack"/>
			<dependency name="Debug_Print0"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmNextInsn"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_PUSH_ALT"/>
			<dependency name="YSI_g_sContexts"/>
			<dependency name="YSI_g_sContexts"/>
			<dependency name="YSI_g_sInitialised"/>
			<dependency name="YSI_g_sLength"/>
			<dependency name="YSI_g_sMaxNesting"/>
			<dependency name="YSI_g_sPassthroughNestings"/>
			<dependency name="YSI_g_sSkips"/>
			<dependency name="YSI_g_sStacks"/>
			<dependency name="cellbits"/>
			<dependency name="cellmin"/>
			<dependency name="max"/>
			<param name="m">
				<paraminfo> [164] </paraminfo>
			</param>
		</member>
		<member name="M:YVA2_Initalise" syntax="YVA2_Initalise()">
			<stacksize value="1139"/>
			<referrer name="YVA2_DummyPush"/>
			<referrer name="Malloc_OnCodeInit"/>
			<dependency name="CodeScanAddMatcher"/>
			<dependency name="CodeScanInit"/>
			<dependency name="CodeScanMatcher"/>
			<dependency name="CodeScanMatcherInit_"/>
			<dependency name="CodeScanMatcherPattern_"/>
			<dependency name="CodeScanRunFast"/>
			<dependency name="CodeScanner"/>
			<dependency name="O@A_"/>
			<dependency name="O@V_"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_CONST_PRI"/>
			<dependency name="OP_HEAP"/>
			<dependency name="OP_MOVE_PRI"/>
			<dependency name="OP_PUSH_ALT"/>
			<dependency name="OP_PUSH_C"/>
			<dependency name="OP_PUSH_PRI"/>
			<dependency name="OP_STACK"/>
			<dependency name="OP_STOR_I"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="OP_ZERO_PRI"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="YVA2_FoundCall"/>
			<dependency name="YVA2_FoundPush"/>
			<dependency name="gCodeScanCallback_match"/>
		</member>
		<member name="M:YVers_Callback" syntax="YVers_Callback(index, code, data[])">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="YSIPrint"/>
			<dependency name="YSIPrintF"/>
			<dependency name="false"/>
			<dependency name="strcmp"/>
			<dependency name="strfind"/>
			<param name="index">
			</param>
			<param name="code">
			</param>
			<param name="data">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:YVers_OnScriptInit" syntax="YVers_OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="ScriptInit_OnScriptInit"/>
		</member>
		<member name="M:Yield_OnCodeInit" syntax="Yield_OnCodeInit()">
			<attribute name="public"/>
			<stacksize value="51"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_GetEntryPrefix"/>
			<dependency name="AMX_GetPointerPrefix"/>
			<dependency name="AMX_ReadString"/>
			<dependency name="AMX_TABLE_PUBLICS"/>
			<dependency name="O@"/>
		</member>
		<member name="M:Z@" syntax="Z@(v)">
			<stacksize value="7"/>
			<dependency name="getproperty"/>
			<dependency name="setproperty"/>
			<param name="v">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:_@Iter_ActorDo" syntax="_@Iter_ActorDo(add, actorid)">
			<stacksize value="7"/>
			<referrer name="Iter_CreateActor"/>
			<referrer name="Iter_DestroyActor"/>
			<dependency name="D@"/>
			<dependency name="F@"/>
			<dependency name="I@"/>
			<dependency name="J@"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="actorid">
			</param>
		</member>
		<member name="M:_@Iter_VehicleDo" syntax="_@Iter_VehicleDo(add, vehicleid)">
			<stacksize value="7"/>
			<referrer name="Iter_CreateVehicle"/>
			<referrer name="Iter_AddStaticVehicle"/>
			<referrer name="Iter_AddStaticVehicleEx"/>
			<referrer name="Iter_DestroyVehicle"/>
			<dependency name="D@"/>
			<dependency name="F@"/>
			<dependency name="I@"/>
			<dependency name="J@"/>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="vehicleid">
			</param>
		</member>
		<member name="M:_@_y_cgen_@_0" syntax="_@_y_cgen_@_0()">
			<attribute name="public"/>
			<stacksize value="55"/>
			<dependency name="CGEN"/>
		</member>
		<member name="M:_@_y_cgen_@_1" syntax="_@_y_cgen_@_1()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:_@yH" syntax="_@yH(&amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f)">
			<stacksize value="1"/>
			<referrer name="Hooks_GenerateContinue"/>
			<param name="a">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="b">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="c">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="d">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="e">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="f">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:_Hooks_AddReplacement" syntax="_Hooks_AddReplacement(longName[], shortName[])">
			<stacksize value="5"/>
			<referrer name="@_yHCheckpoint"/>
			<referrer name="@_yHContainer"/>
			<referrer name="@_yHInventory"/>
			<referrer name="@_yHDynamic"/>
			<referrer name="@_yHTextDraw"/>
			<referrer name="@_yHUpdate"/>
			<referrer name="@_yHObject"/>
			<referrer name="@_yHCommand"/>
			<referrer name="@_yHDynamicCP"/>
			<dependency name="Debug_Print0"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_LONG"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MAX"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_MIN"/>
			<dependency name="E_HOOK_NAME_REPLACEMENT_SHORT"/>
			<dependency name="YSI_g_sReplacePtr"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacements"/>
			<dependency name="YSI_g_sReplacementsLongOrder"/>
			<dependency name="YSI_g_sReplacementsShortOrder"/>
			<dependency name="strcat"/>
			<dependency name="strlen"/>
			<param name="longName">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="shortName">
				<paraminfo> [] </paraminfo>
			</param>
			<remarks>  Call the main hook run code, then advance the ALS chain.  </remarks> 
		</member>
		<member name="M:_Hooks_RepairStub" syntax="_Hooks_RepairStub()">
			<stacksize value="5"/>
			<referrer name="_Hooks_RepairStubFS"/>
			<referrer name="_Hooks_RepairStubGM"/>
			<dependency name="AMX_BASE_ADDRESS"/>
			<dependency name="AMX_HEADER_PUBLICS"/>
			<dependency name="AMX_Read"/>
			<dependency name="AMX_Write"/>
			<dependency name="ResetStaticAmxHeader"/>
			<dependency name="YSI_g_sInitFSIdx"/>
			<dependency name="YSI_g_sInitFSRep"/>
			<dependency name="YSI_g_sInitGMIdx"/>
			<dependency name="YSI_g_sInitGMRep"/>
			<dependency name="YSI_g_sInitPublicDiff"/>
			<dependency name="YSI_g_sSortedOnce"/>
			<dependency name="true"/>
		</member>
		<member name="M:_Hooks_RepairStubFS" syntax="_Hooks_RepairStubFS()">
			<stacksize value="3"/>
			<referrer name="Hooks_RepairJITInit"/>
			<dependency name="YSI_g_sInitFSPtr"/>
			<dependency name="_Hooks_RepairStub"/>
		</member>
		<member name="M:_Hooks_RepairStubGM" syntax="_Hooks_RepairStubGM()">
			<stacksize value="3"/>
			<referrer name="Hooks_RepairJITInit"/>
			<dependency name="YSI_g_sInitGMPtr"/>
			<dependency name="_Hooks_RepairStub"/>
		</member>
		<member name="M:_PreHook_IncludeStates" syntax="_PreHook_IncludeStates()">
			<stacksize value="1"/>
			<automaton name="_ALS"/>
		</member>
		<member name="M:_ScriptInit_FixState" syntax="_ScriptInit_FixState()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_script_init_fix_state"/>
		</member>
		<member name="M:_SortDeepArray" syntax="_SortDeepArray(array[][], left, right)">
			<stacksize value="11"/>
			<referrer name="SortDeepArray_Entry"/>
			<dependency name="operator!=(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="ExchangeArraySlots"/>
			<dependency name="SORT_ASC"/>
			<dependency name="g_sort_cmp_offset"/>
			<dependency name="g_sort_cmp_type"/>
			<dependency name="g_sort_ignorecase"/>
			<dependency name="g_sort_order"/>
			<dependency name="g_sort_stack"/>
			<dependency name="strcmp"/>
			<param name="array">
				<paraminfo> [][] </paraminfo>
			</param>
			<param name="left">
			</param>
			<param name="right">
			</param>
		</member>
		<member name="M:_Timer_A" syntax="_Timer_A(str[], len)">
			<stacksize value="8"/>
			<dependency name="Malloc_SetA"/>
			<dependency name="Timer_GetSingleSlot"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:_Timer_C" syntax="_Timer_C(tt, g)">
			<stacksize value="5"/>
			<referrer name="t_Kick_yT@"/>
			<dependency name="I@"/>
			<dependency name="Timer_GetSingleSlot"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="YSI_g_sFirstSlot"/>
			<dependency name="YSI_g_sLastSlot"/>
			<param name="tt">
			</param>
			<param name="g">
			</param>
		</member>
		<member name="M:_Timer_D" syntax="_Timer_D(func[], interval, action, who, results[], a[])">
			<stacksize value="7"/>
			<referrer name="@yT_UpdateAdminHours"/>
			<referrer name="@yT_UpdateLoginTime"/>
			<referrer name="@yT_PTime"/>
			<referrer name="@yT_CheckPlayerWeapons"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="Iterator@Player"/>
			<dependency name="KillTimer"/>
			<dependency name="O@"/>
			<dependency name="YSI_g_sPlayerTimers"/>
			<dependency name="true"/>
			<param name="func">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="interval">
			</param>
			<param name="action">
			</param>
			<param name="who">
			</param>
			<param name="results">
				<paraminfo> [1000] </paraminfo>
			</param>
			<param name="a">
				<paraminfo> [2] </paraminfo>
			</param>
		</member>
		<member name="M:_Timer_F" syntax="_Timer_F(slot)">
			<stacksize value="5"/>
			<referrer name="_Timer_H"/>
			<dependency name="KillTimer"/>
			<dependency name="Malloc_Free"/>
			<dependency name="YSI_gMallocMemory"/>
			<param name="slot">
			</param>
		</member>
		<member name="M:_Timer_H" syntax="_Timer_H(slot)">
			<stacksize value="4"/>
			<dependency name="_Timer_F"/>
			<param name="slot">
			</param>
		</member>
		<member name="M:_Timer_I" syntax="_Timer_I(func[], interval, action, &amp;result)">
			<stacksize value="6"/>
			<dependency name="KillTimer"/>
			<dependency name="O@"/>
			<param name="func">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="interval">
			</param>
			<param name="action">
			</param>
			<param name="result">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:_Timer_S" syntax="_Timer_S(str[])">
			<stacksize value="9"/>
			<dependency name="Malloc_SetS"/>
			<dependency name="Timer_GetSingleSlot"/>
			<dependency name="strlen"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:_YSI_ConstMod" syntax="_YSI_ConstMod(&amp;var, val)">
			<stacksize value="1"/>
			<param name="var">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="val">
			</param>
		</member>
		<member name="M:__CompilerSecondPass" syntax="__CompilerSecondPass()">
			<stacksize value="1"/>
		</member>
		<member name="M:__TU" syntax="__TU(t, iters)">
			<stacksize value="27"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="__TU"/>
			<dependency name="float"/>
			<dependency name="format"/>
			<param name="t">
				The time in ms.
			</param>
			<param name="iters">
				The number of iterations completed in this time.
			</param>
			    <remarks>  Formats and returns a string representing the time taken for one iteration,  given the time required for many iterations.  This attempts to format the  number using a reasonable fraction of a second.  </remarks> 
		</member>
		<member name="M:_yH@" syntax="_yH@(compressedFormat)">
			<stacksize value="34"/>
			<dependency name="AMX_HEADER_COD"/>
			<dependency name="AsmContext"/>
			<dependency name="AsmEmitCallAbs"/>
			<dependency name="AsmEmitHeap"/>
			<dependency name="AsmEmitLctrl"/>
			<dependency name="AsmEmitLoadPri"/>
			<dependency name="AsmEmitMovs"/>
			<dependency name="AsmEmitPadding"/>
			<dependency name="AsmEmitPopAlt"/>
			<dependency name="AsmEmitPopPri"/>
			<dependency name="AsmEmitProc"/>
			<dependency name="AsmEmitPush"/>
			<dependency name="AsmEmitPushAlt"/>
			<dependency name="AsmEmitPushC"/>
			<dependency name="AsmEmitPushPri"/>
			<dependency name="AsmEmitRetn"/>
			<dependency name="AsmEmitStack"/>
			<dependency name="AsmEmitStorAlt"/>
			<dependency name="AsmEmitSysreqC"/>
			<dependency name="AsmInitPtr"/>
			<dependency name="DisasmContext"/>
			<dependency name="DisasmGetOpcode"/>
			<dependency name="DisasmGetOperand"/>
			<dependency name="DisasmGetOperandReloc"/>
			<dependency name="DisasmInit"/>
			<dependency name="DisasmNext"/>
			<dependency name="GetCurrentFrameReturn"/>
			<dependency name="OP_CALL"/>
			<dependency name="OP_SYSREQ_C"/>
			<dependency name="OP_SYSREQ_D"/>
			<dependency name="YSI_g_sNPSBaseCall"/>
			<dependency name="YSI_g_sNPSReplace"/>
			<dependency name="YSI_g_sNPSStack"/>
			<dependency name="YSI_g_sNPSTrampoline"/>
			<dependency name="YSI_g_sTempRet"/>
			<dependency name="cellbits"/>
			<dependency name="cellmin"/>
			<dependency name="ref"/>
			<param name="compressedFormat">
			</param>
		</member>
		<member name="M:_y_utils_OnPlayerConnect" syntax="_y_utils_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="gBackgroundTextDrawId"/>
			<dependency name="gCancelButtonTextDrawId"/>
			<dependency name="gCurrentPageTextDrawId"/>
			<dependency name="gHeaderTextDrawId"/>
			<dependency name="gItemAt"/>
			<dependency name="gNextButtonTextDrawId"/>
			<dependency name="gPrevButtonTextDrawId"/>
			<dependency name="gSelectionItems"/>
			<dependency name="gSelectionItems"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:_y_utils_OnPlayerDisconnect" syntax="_y_utils_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="KillTimer"/>
			<dependency name="false"/>
			<dependency name="rAgcASWarns"/>
			<dependency name="rAgcAmmoImmu"/>
			<dependency name="rAgcAntibugTicks"/>
			<dependency name="rAgcCheckTimer"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:afkCheck" syntax="afkCheck(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="ArenaTime"/>
			<dependency name="GetTickCount"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SpawnSetup"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="pLang"/>
			<dependency name="s_LastUpdate"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:aliasCheck" syntax="aliasCheck(extraID)">
			<attribute name="public"/>
			<stacksize value="181"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cache_get_row_count"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="strcmp"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="extraID">
			</param>
		</member>
		<member name="M:amx_yield" syntax="amx_yield(val)">
			<stacksize value="1"/>
			<param name="val">
			</param>
		</member>
		<member name="M:argderef" syntax="argderef(n)">
			<stacksize value="1"/>
			<dependency name="argderef"/>
			<param name="n">
			</param>
		</member>
		<member name="M:argref" syntax="argref(n)">
			<stacksize value="1"/>
			<param name="n">
			</param>
		</member>
		<member name="M:atan" syntax="atan(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="internal_BS_GPATP"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The tangent for which to find the angle for
			</param>
			<summary>Get the inversed value of a tangent in degrees.</summary>  <seealso name="atan2"/> <seealso name="floattan"/> <returns>The angle in degrees.</returns>
		</member>
		<member name="M:atan2" syntax="atan2(y, x)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="AngleBetweenPoints"/>
			<param name="y">
				<paraminfo>Float </paraminfo>
				y size
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				x size
			</param>
			<summary>Get the multi-valued inversed value of a tangent in degrees.</summary>   <seealso name="atan"/> <seealso name="floattan"/> <returns>The angle in degrees.</returns>
		</member>
		<member name="M:banInfo" syntax="banInfo(playerid)">
			<attribute name="public"/>
			<stacksize value="2356"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_num_rows"/>
			<dependency name="format"/>
			<dependency name="strcat"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:banned_account" syntax="banned_account(playerid)">
			<attribute name="public"/>
			<stacksize value="233"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="SQL"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_num_rows"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="t_Kick"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:bernstein" syntax="bernstein(string[])">
			<stacksize value="4"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				the string to hash.
			</param>
			  <returns>  the bernstein hash of the input string  </returns>  <remarks>  This is a 32bit hash system so is not very secure, however we're only  using this as a string enumerator to uniquely identify strings easilly  and allow for a binary search of strings based on the hash of their name.  crc32, then jenkins were originally used however this is far faster, if a  little collision prone, but we're checking the strings manually anyway.  This doesn't matter as it would be done regardless of hash method, so this  doesn't need to be accounted for.  Speed is all that matters with at   least a bit of non collision (the number of strings we're dealing with,  this should have none-few collisions).  I modified it slightly from the original code pasted by aru, to code  closer to the code <a href="http://www.burtleburtle.net/bob/hash/doobs.html" />  and to work with PAWN (and shaved 0.2�s off the time for one call :D).  Uber reduced version (just for fun):  b(s[]){new h=-1,i,j;while((j=s[i++]))h=h*33+j;return h;}  Update: Contrary to what I said above this is also used to identify colour  strings for the updated text system involving file based styling and this  is not checked for collisions as it's unimportant.  But this doesn't affect  the function at all, I just mentioned it here for "interest".  </remarks> 
		</member>
		<member name="M:binstr" syntax="binstr(string[])">
			<stacksize value="3"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				String to try convert to a boolean.
			</param>
			  <returns>  bool: passed boolean.  </returns>  <remarks>  This takes a value in 0110101 (boolean) format and returns it as a  regular value.  </remarks> 
		</member>
		<member name="M:boolstr" syntax="boolstr(string[])">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<dependency name="strcmp"/>
			<dependency name="true"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				String to try convert to a boolean.
			</param>
			  <returns>  bool: passed boolean.  </returns>  <remarks>  This can take a number of ways of representing booleans - 0, false and  nothing there.  Anything not one of those things (false is not case  sensitive) is assumed true.  </remarks> 
		</member>
		<member name="M:cache_get_field_count" syntax="cache_get_field_count(&amp;destination)">
			<attribute name="native"/>
			<referrer name="cache_num_fields"/>
			<param name="destination">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_result_count" syntax="cache_get_result_count(&amp;destination)">
			<attribute name="native"/>
			<referrer name="cache_num_results"/>
			<param name="destination">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_row_count" syntax="cache_get_row_count(&amp;destination)">
			<attribute name="native"/>
			<referrer name="cache_num_rows"/>
			<referrer name="aliasCheck"/>
			<referrer name="ipCheck"/>
			<referrer name="topQuery"/>
			<param name="destination">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_value_index_bool" syntax="cache_get_value_index_bool(row_idx, column_idx, &amp;destination)">
			<stacksize value="5"/>
			<dependency name="cache_get_value_index_int"/>
			<param name="row_idx">
			</param>
			<param name="column_idx">
			</param>
			<param name="destination">
				<paraminfo>bool &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_value_index_int" syntax="cache_get_value_index_int(row_idx, column_idx, &amp;destination)">
			<attribute name="native"/>
			<referrer name="cache_get_value_index_bool"/>
			<param name="row_idx">
			</param>
			<param name="column_idx">
			</param>
			<param name="destination">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_value_name" syntax="cache_get_value_name(row_idx, column_name[], destination[], max_len)">
			<attribute name="native"/>
			<referrer name="Admini"/>
			<referrer name="Premiums"/>
			<referrer name="banInfo"/>
			<referrer name="aliasCheck"/>
			<referrer name="ipCheck"/>
			<referrer name="topQuery"/>
			<referrer name="checkIPUnban"/>
			<referrer name="sql_LoadPlayerData"/>
			<param name="row_idx">
			</param>
			<param name="column_name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="destination">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="max_len">
			</param>
		</member>
		<member name="M:cache_get_value_name_bool" syntax="cache_get_value_name_bool(row_idx, column_name[], &amp;destination)">
			<stacksize value="5"/>
			<dependency name="cache_get_value_name_int"/>
			<param name="row_idx">
			</param>
			<param name="column_name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="destination">
				<paraminfo>bool &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_value_name_float" syntax="cache_get_value_name_float(row_idx, column_name[], &amp;destination)">
			<attribute name="native"/>
			<referrer name="Admini"/>
			<referrer name="sql_LoadPlayerData"/>
			<param name="row_idx">
			</param>
			<param name="column_name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="destination">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_get_value_name_int" syntax="cache_get_value_name_int(row_idx, column_name[], &amp;destination)">
			<attribute name="native"/>
			<referrer name="cache_get_value_name_bool"/>
			<referrer name="Admini"/>
			<referrer name="topQuery"/>
			<referrer name="sql_LoadPlayerData"/>
			<param name="row_idx">
			</param>
			<param name="column_name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="destination">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:cache_insert_id" syntax="cache_insert_id()">
			<attribute name="native"/>
			<referrer name="sql_OnAccountCreate"/>
		</member>
		<member name="M:cache_num_fields" syntax="cache_num_fields()">
			<stacksize value="4"/>
			<dependency name="cache_get_field_count"/>
		</member>
		<member name="M:cache_num_results" syntax="cache_num_results()">
			<stacksize value="4"/>
			<dependency name="cache_get_result_count"/>
		</member>
		<member name="M:cache_num_rows" syntax="cache_num_rows()">
			<stacksize value="4"/>
			<referrer name="Admini"/>
			<referrer name="Premiums"/>
			<referrer name="banInfo"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckUnban"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="check_account_registered"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<dependency name="cache_get_row_count"/>
		</member>
		<member name="M:calloc" syntax="calloc(size)">
			<tagname value="Alloc"/>
			<stacksize value="6"/>
			<dependency name="Malloc_Allocate"/>
			<dependency name="true"/>
			<param name="size">
				Size of memory to allocate.
			</param>
			  <returns>  0 on fail or a data handle on sucess.  </returns>  <remarks>  Displays errors in secure mode.  Blanks allocated mmeory.  </remarks> 
		</member>
		<member name="M:ceildiv" syntax="ceildiv(numerator, denominator)">
			<stacksize value="1"/>
			<param name="numerator">
				The top of the division.
			</param>
			<param name="denominator">
				The bottom of the division.
			</param>
			    <returns>  (numerator / denominator) rounded up.  </returns>  <remarks>  Normal integer division ALWAYS rounds down - this always rounds up.  </remarks> 
		</member>
		<member name="M:checkIPUnban" syntax="checkIPUnban(playerid, checkIP[])">
			<attribute name="public"/>
			<stacksize value="201"/>
			<dependency name="AMessage"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_num_rows"/>
			<dependency name="cellmin"/>
			<dependency name="format"/>
			<dependency name="pLang"/>
			<dependency name="unbanIP"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="checkIP">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:check_account_registered" syntax="check_account_registered(playerid)">
			<attribute name="public"/>
			<stacksize value="233"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="SQL"/>
			<dependency name="ShowRegisterDialog"/>
			<dependency name="cache_num_rows"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:check_banned_account" syntax="check_banned_account(playerid)">
			<attribute name="public"/>
			<stacksize value="113"/>
			<dependency name="ClearFPlayer"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="SQL"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cache_num_rows"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="t_Kick"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:chrfind" syntax="chrfind(needle, haystack[], start)">
			<stacksize value="3"/>
			<dependency name="strlen"/>
			<param name="needle">
				The character to find.
			</param>
			<param name="haystack">
				<paraminfo> [] </paraminfo>
				The string to find it in.
			</param>
			<param name="start">
				The offset to start from.
			</param>
			      <returns>  Fail - -1, Success - pos  </returns> 
		</member>
		<member name="M:chrfindp" syntax="chrfindp(needle, haystack[], start)">
			<stacksize value="1"/>
			<param name="needle">
				The character to find.
			</param>
			<param name="haystack">
				<paraminfo> [] </paraminfo>
				The string to find it in.
			</param>
			<param name="start">
				The offset to start from.
			</param>
			      <returns>  Fail - -1, Success - pos  </returns>  <remarks>  Like <symbolref name="chrfind" />, but with no upper-bounds check on  <paramref name="start" />.  </remarks> 
		</member>
		<member name="M:copy_1" syntax="copy_1(&amp;dest, source[], start)">
			<stacksize value="1"/>
			<referrer name="GetAmxHeaderNow"/>
			<param name="dest">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
		</member>
		<member name="M:copy_2" syntax="copy_2(&amp;dest, source[], start)">
			<stacksize value="1"/>
			<referrer name="GetAmxHeaderNow"/>
			<param name="dest">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
		</member>
		<member name="M:copy_4" syntax="copy_4(&amp;dest, source[], start)">
			<stacksize value="1"/>
			<referrer name="GetAmxHeaderNow"/>
			<param name="dest">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
		</member>
		<member name="M:deref" syntax="deref(v)">
			<stacksize value="1"/>
			<dependency name="deref"/>
			<param name="v">
			</param>
		</member>
		<member name="M:dm_Kick" syntax="dm_Kick(playerid)">
			<stacksize value="7"/>
			<referrer name="pc_cmd_spawn"/>
			<dependency name="ArenaTime"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="Killstreak"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SetCameraBehindPlayer"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetTimerEx"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="false"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:endofline" syntax="endofline(line[], pos)">
			<stacksize value="3"/>
			<dependency name="cellmin"/>
			<dependency name="strlen"/>
			<param name="line">
				<paraminfo> [] </paraminfo>
				String to check.
			</param>
			<param name="pos">
				Postion to start from.
			</param>
			    <remarks>  Checks if the current point in a line is the end of non-whitespace data.  </remarks> 
		</member>
		<member name="M:expr_const" syntax="expr_const(value, tag_id)">
			<tagname value="Expression"/>
			<attribute name="native"/>
			<referrer name="Expression:operator=(_:)"/>
			<referrer name="Expression:operator=(Float:)"/>
			<referrer name="Expression:operator=(bool:)"/>
			<param name="value">
				<paraminfo> {_,bool,Float,Variant,String,List,LinkedList,Map,Pool,Iter,Handle,Task,Expression} </paraminfo>
			</param>
			<param name="tag_id">
				<paraminfo> {_,tag_uid} </paraminfo>
			</param>
		</member>
		<member name="M:fclose" syntax="fclose(handle)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="ftouch"/>
			<referrer name="DisasmWrite"/>
			<param name="handle">
				<paraminfo>File </paraminfo>
			</param>
		</member>
		<member name="M:fexist" syntax="fexist(pattern[])">
			<attribute name="native"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="ftouch"/>
			<param name="pattern">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:float" syntax="float(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<referrer name="operator+(Float:,_:)"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="__TU"/>
			<referrer name="RandomFloat"/>
			<param name="value">
			</param>
		</member>
		<member name="M:floatabs" syntax="floatabs(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="SetCustomFallDamage"/>
			<referrer name="OnPlayerKeyStateChange"/>
			<referrer name="IsPlayerBehindPlayer"/>
			<referrer name="internal_BS_GPATP"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<referrer name="GetSpeed"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatadd" syntax="floatadd(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator+(Float:,_:)"/>
			<referrer name="internal_BS_GPATP"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatcmp" syntax="floatcmp(oper1, oper2)">
			<attribute name="native"/>
			<referrer name="operator==(Float:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,Float:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,Float:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatcos" syntax="floatcos(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="PosInFront"/>
			<referrer name="internal_BS_GXYIFOP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
			</param>
		</member>
		<member name="M:floatdiv" syntax="floatdiv(dividend, divisor)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="PTime"/>
			<param name="dividend">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="divisor">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatfract" syntax="floatfract(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="ProcessDamage"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatmul" syntax="floatmul(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatpower" syntax="floatpower(value, exponent)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="RandomFloat"/>
			<referrer name="GetSpeed"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="exponent">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatround" syntax="floatround(value, method)">
			<attribute name="native"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="RandomFloat"/>
			<referrer name="GetSpeed"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="method">
				<paraminfo>floatround_method </paraminfo>
			</param>
		</member>
		<member name="M:floatsin" syntax="floatsin(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="PosInFront"/>
			<referrer name="internal_BS_GXYIFOP"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
			</param>
		</member>
		<member name="M:floatsqroot" syntax="floatsqroot(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="internal_BS_DCTTL"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<referrer name="GetSpeed"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floatstr" syntax="floatstr(string[])">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="LoadModelSelectionMenu"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:floatsub" syntax="floatsub(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<referrer name="internal_BS_GPATP"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:floordiv" syntax="floordiv(numerator, denominator)">
			<stacksize value="1"/>
			<param name="numerator">
				The top of the division.
			</param>
			<param name="denominator">
				The bottom of the division.
			</param>
			<summary>  floordiv(numerator, denominator);  </summary>      <returns>  (numerator / denominator) rounded down.  </returns>  <remarks>  Normal integer division ALWAYS rounds down - this also always rounds down,  making it a little pointless, but also more explicit in function.  </remarks> 
		</member>
		<member name="M:fopen" syntax="fopen(name[], mode)">
			<tagname value="File"/>
			<attribute name="native"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="ftouch"/>
			<referrer name="DisasmWrite"/>
			<referrer name="LoadModelSelectionMenu"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="mode">
				<paraminfo>filemode </paraminfo>
			</param>
		</member>
		<member name="M:forfeitPlayerDuel" syntax="forfeitPlayerDuel(playerid)">
			<stacksize value="57"/>
			<referrer name="@yH_OnPlayerDisconnect@012"/>
			<referrer name="@yH_OnPlayerDeath@012"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="ClearDuelInvites"/>
			<dependency name="E_PLAYER"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerDueling"/>
			<dependency name="SetPlayerSpawnAfterDuel"/>
			<dependency name="g_duelData"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:format" syntax="format(output[], len, format[], ...)">
			<attribute name="native"/>
			<referrer name="GetRejectedHit"/>
			<referrer name="WC_GetWeaponName"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="Debug_PrintArray"/>
			<referrer name="__TU"/>
			<referrer name="va_return"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="Admini"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
			<referrer name="Premiums"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="banInfo"/>
			<referrer name="ipCheck"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_cc"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_stats"/>
			<referrer name="pc_cmd_dm"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDamage"/>
			<referrer name="ShowRegisterDialog"/>
			<referrer name="ShowEmailDialog"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="UpdateLoginTime"/>
			<referrer name="topQuery"/>
			<referrer name="number_format"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="ShowPlayerDuelMenu"/>
			<referrer name="OnDuelTimer"/>
			<referrer name="PTime"/>
			<referrer name="OnPlayerText"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="SaveAccount"/>
			<referrer name="checkIPUnban"/>
			<referrer name="CheckAccountIsRegForLogin"/>
			<referrer name="OnDialogResponse"/>
			<param name="output">
				<paraminfo> [] </paraminfo>
				The string to output the result to
			</param>
			<param name="len">
				The maximum length output can contain
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format string
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				Indefinite number of arguments of any tag
			</param>
			<summary>Formats a string to include variables and other strings inside it.</summary>     <seealso name="print"/> <seealso name="printf"/> <remarks>This function doesn't support <a href="#strpack">packed strings</a>.</remarks> <remarks> <b>Format Specifiers:</b><p/> <ul> <li><b><c>%i</c></b> - integer (whole number)</li> <li><b><c>%d</c></b> - integer (whole number).</li> <li><b><c>%s</c></b> - string</li> <li><b><c>%f</c></b> - floating-point number (Float: tag)</li> <li><b><c>%c</c></b> - ASCII character</li> <li><b><c>%x</c></b> - hexadecimal number</li> <li><b><c>%b</c></b> - binary number</li> <li><b><c>%%</c></b> - literal <b><c>%</c></b></li> <li><b><c>%q</c></b> - escape a text for SQLite. (Added in <b>0.3.7 R2</b>)</li> </ul> </remarks> <remarks>The values for the placeholders follow in the exact same order as parameters in the call. For example, <b><c>"I am %i years old"</c></b> - the <b><c>%i</c></b> will be replaced with an Integer variable, which is the person's age.</remarks> <remarks>You may optionally put a number between the <b><c>%</c></b> and the letter of the placeholder code. This number indicates the field width; if the size of the parameter to print at the position of the placeholder is smaller than the field width, the field is expanded with spaces. To cut the number of decimal places beeing shown of a float, you can add <b><c>.&lt;max number&gt;</c></b> between the <b><c>%</c></b> and the <b><c>f</c></b>. (example: <b><c>%.2f</c></b>)</remarks>
		</member>
		<member name="M:fr_CheckValidWeapons" syntax="fr_CheckValidWeapons(playerid, wid)">
			<stacksize value="5"/>
			<referrer name="pc_cmd_gun"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<param name="playerid">
			</param>
			<param name="wid">
			</param>
		</member>
		<member name="M:fread" syntax="fread(handle, string[], size, pack)">
			<attribute name="native"/>
			<referrer name="LoadModelSelectionMenu"/>
			<param name="handle">
				<paraminfo>File </paraminfo>
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:free" syntax="free(slot)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Slot of memory to free up.
			</param>
			  <remarks>  Displays errors in secure mode.  </remarks> 
		</member>
		<member name="M:ftouch" syntax="ftouch(filename[])">
			<stacksize value="5"/>
			<dependency name="fclose"/>
			<dependency name="fexist"/>
			<dependency name="fopen"/>
			<dependency name="io_write"/>
			<param name="filename">
				<paraminfo> [] </paraminfo>
				The file to "touch".
			</param>
			<summary>  ftouch(filename);  </summary>    <returns>  0 - File already exists.  1 - File was created.  -1 - File was not created.  </returns>  <remarks>  This "touches" a file in the Unix sense of creating it but not opening or  editing it in any way.  </remarks> 
		</member>
		<member name="M:funcidx" syntax="funcidx(name[])">
			<attribute name="native"/>
			<referrer name="GetFunctionAddress"/>
			<referrer name="Indirect_Call"/>
			<referrer name="Indirect_Callstring"/>
			<referrer name="Indirect_Callvoid"/>
			<referrer name="Indirect_Array"/>
			<referrer name="CGen_GetAddr"/>
			<referrer name="CGen_OnCodeInit"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:fwrite" syntax="fwrite(handle, string[])">
			<attribute name="native"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="DisasmWriteDataRowChar"/>
			<referrer name="DisasmWriteDataRowHex"/>
			<referrer name="DisasmWriteData"/>
			<referrer name="va_fprintf"/>
			<param name="handle">
				<paraminfo>File </paraminfo>
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:g_CheckWeapons" syntax="g_CheckWeapons(playerid)">
			<stacksize value="4"/>
			<referrer name="CheckPlayerWeapons"/>
			<dependency name="GetPlayerWeapon"/>
			<dependency name="ResetPlayerWeapons"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:getarg" syntax="getarg(arg, index)">
			<attribute name="native"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="L@"/>
			<referrer name="T@"/>
			<referrer name="AsmEmitInstruction"/>
			<referrer name="CodeScanMatcherPattern_"/>
			<referrer name="ShuffleDeepArray_Entry"/>
			<referrer name="ResetDeepArray_Entry"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<param name="arg">
			</param>
			<param name="index">
			</param>
		</member>
		<member name="M:getdate" syntax="getdate(&amp;year, &amp;month, &amp;day)">
			<attribute name="native"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="TextdrawSetup"/>
			<referrer name="OnDialogResponse"/>
			<param name="year">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="month">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="day">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:getproperty" syntax="getproperty(id, name[], value, string[])">
			<attribute name="native"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="S@"/>
			<referrer name="Z@"/>
			<param name="id">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="value">
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:gettime" syntax="gettime(&amp;hour, &amp;minute, &amp;second)">
			<attribute name="native"/>
			<referrer name="OnPlayerEnterVehicle"/>
			<referrer name="InflictDamage"/>
			<referrer name="AddRejectedHit"/>
			<referrer name="y_profile_WTF"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="UpdateLoginTime"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="ClearDuelInvites"/>
			<referrer name="PTime"/>
			<referrer name="OnDialogResponse"/>
			<param name="hour">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="minute">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="second">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:handle_alive" syntax="handle_alive(handle)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="operator!(Handle:)"/>
			<param name="handle">
				<paraminfo>Handle </paraminfo>
			</param>
		</member>
		<member name="M:hexstr" syntax="hexstr(string[])">
			<stacksize value="4"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				String to convert to a number.
			</param>
			  <returns>  value of the passed hex string.  </returns>  <remarks>  Now stops on invalid characters.  </remarks> 
		</member>
		<member name="M:internal_BS_DCTTL" syntax="internal_BS_DCTTL(CamX, CamY, CamZ, ObjX, ObjY, ObjZ, FrX, FrY, FrZ)">
			<tagname value="Float"/>
			<stacksize value="3"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="floatsqroot"/>
			<param name="CamX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="CamY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="CamZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ObjX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ObjY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ObjZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="FrX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="FrY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="FrZ">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:internal_BS_GPATP" syntax="internal_BS_GPATP(x2, y2, X, Y)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator==(Float:,Float:)"/>
			<dependency name="operator==(Float:,_:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,_:)"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,_:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="atan"/>
			<dependency name="floatabs"/>
			<dependency name="floatadd"/>
			<dependency name="floatsub"/>
			<param name="x2">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y2">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="X">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Y">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:internal_BS_GXYIFOP" syntax="internal_BS_GXYIFOP(&amp;x, &amp;y, angle, distance)">
			<stacksize value="4"/>
			<referrer name="internal_BS_IsCameraAimingAt"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="distance">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:internal_BS_IsCameraAimingAt" syntax="internal_BS_IsCameraAimingAt(weaponid, x, y, z, vector_x, vector_y, vector_z, camera_x, camera_y, camera_z, radius)">
			<stacksize value="16"/>
			<referrer name="rAgc_OnPlayerWeaponShot"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="BustAim_g_DCTTL_temp"/>
			<dependency name="degrees"/>
			<dependency name="false"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<dependency name="floatsqroot"/>
			<dependency name="internal_BS_DCTTL"/>
			<dependency name="internal_BS_GPATP"/>
			<dependency name="internal_BS_GXYIFOP"/>
			<dependency name="true"/>
			<param name="weaponid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="vector_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="vector_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="vector_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="camera_x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="camera_y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="camera_z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="radius">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:ipCheck" syntax="ipCheck(extraID)">
			<attribute name="public"/>
			<stacksize value="334"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cache_get_row_count"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="format"/>
			<dependency name="pLang"/>
			<dependency name="va_SendClientMessage"/>
			<param name="extraID">
			</param>
		</member>
		<member name="M:isAltChatToggled" syntax="isAltChatToggled(playerid)">
			<stacksize value="1"/>
			<dependency name="altchatToggled"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:iseven" syntax="iseven(value)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="value">
				Value to check if is even.
			</param>
			 
		</member>
		<member name="M:ishex" syntax="ishex(str[])">
			<stacksize value="3"/>
			<dependency name="cellmin"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to check.
			</param>
			  <returns>  true/false.  </returns> 
		</member>
		<member name="M:isnull" syntax="isnull(str[])">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to check if is null.
			</param>
			  <remarks>  Uses a new shorter and branchless method, which also works with offsets so  this is valid:  <code>  new str[32]; isnull(str[5]);  </code>  </remarks> 
		</member>
		<member name="M:isnumeric" syntax="isnumeric(str[])">
			<stacksize value="2"/>
			<dependency name="cellmin"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to check
			</param>
			  <remarks>  Checks if a given string is numeric.  </remarks> 
		</member>
		<member name="M:isodd" syntax="isodd(value)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="value">
				Value to check if is odd.
			</param>
			 
		</member>
		<member name="M:iterfunc" syntax="iterfunc(params)">
			<stacksize value="1"/>
			<param name="params">
				The iterator function's parameters.
			</param>
			  <remarks>  Used to declare a special iterator function.  Examples:  <code>  iterfunc stock OnlyZero(cur)                                                    <br />  {                                                                               <br /><indent />  if (cur == -1)                                                              <br /><indent /><indent />  return 0;                                                               <br /><indent />  return -1;                                                                  <br />  }                                                                               <br />  </code>  <code>  iterfunc stock AlsoOnlyZero[cellmin](cur)                                       <br />  {                                                                               <br /><indent />  if (cur == cellmin)                                                         <br /><indent /><indent />  return 0;                                                               <br /><indent />  return cellmin;                                                             <br />  }                                                                               <br />  </code>  <code>  iterfunc stock OneToTen[cellmin](cur)                                           <br />  {                                                                               <br /><indent />  if (cur == cellmin)                                                         <br /><indent /><indent />  return 1;                                                               <br /><indent />  if (cur == 10)                                                              <br /><indent /><indent />  return cellmin;                                                         <br /><indent />  return cur + 1;                                                             <br />  }                                                                               <br />  </code>  <code>  iterfunc stock OneToN(cur, n)                                                   <br />  {                                                                               <br /><indent />  if (n &lt; 1)                                                               <br /><indent /><indent />  return -1;                                                              <br /><indent />  if (cur == -1)                                                              <br /><indent /><indent />  return 1;                                                               <br /><indent />  if (cur == n)                                                               <br /><indent /><indent />  return -1;                                                              <br /><indent />  return cur + 1;                                                             <br />  }                                                                               <br />  </code>  </remarks> 
		</member>
		<member name="M:mS_CreateCurrentPageTextDraw" syntax="mS_CreateCurrentPageTextDraw(playerid, Xpos, Ypos)">
			<tagname value="PlayerText"/>
			<stacksize value="8"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawUseBox"/>
			<param name="playerid">
			</param>
			<param name="Xpos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Ypos">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:mS_CreateMPTextDraw" syntax="mS_CreateMPTextDraw(playerid, modelindex, Xpos, Ypos, Xrot, Yrot, Zrot, mZoom, width, height, bgcolor)">
			<tagname value="PlayerText"/>
			<stacksize value="10"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawSetPreviewMode"/>
			<dependency name="WC_PlayerTextDrawSetPreviewRot"/>
			<dependency name="WC_PlayerTextDrawSetSelectable"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawTextSize"/>
			<param name="playerid">
			</param>
			<param name="modelindex">
			</param>
			<param name="Xpos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Ypos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Xrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Yrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Zrot">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="mZoom">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="width">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="bgcolor">
			</param>
		</member>
		<member name="M:mS_CreatePlayerBGTextDraw" syntax="mS_CreatePlayerBGTextDraw(playerid, Xpos, Ypos, Width, Height, bgcolor)">
			<tagname value="PlayerText"/>
			<stacksize value="8"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawBoxColor"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawTextSize"/>
			<dependency name="WC_PlayerTextDrawUseBox"/>
			<param name="playerid">
			</param>
			<param name="Xpos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Ypos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Width">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Height">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="bgcolor">
			</param>
		</member>
		<member name="M:mS_CreatePlayerDialogButton" syntax="mS_CreatePlayerDialogButton(playerid, Xpos, Ypos, Width, Height, button_text[])">
			<tagname value="PlayerText"/>
			<stacksize value="8"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawAlignment"/>
			<dependency name="WC_PlayerTextDrawBackgroundColo"/>
			<dependency name="WC_PlayerTextDrawBoxColor"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetSelectable"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawTextSize"/>
			<dependency name="WC_PlayerTextDrawUseBox"/>
			<param name="playerid">
			</param>
			<param name="Xpos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Ypos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Width">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Height">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="button_text">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:mS_CreatePlayerHeaderTextDraw" syntax="mS_CreatePlayerHeaderTextDraw(playerid, Xpos, Ypos, header_text[])">
			<tagname value="PlayerText"/>
			<stacksize value="8"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="WC_PlayerTextDrawColor"/>
			<dependency name="WC_PlayerTextDrawFont"/>
			<dependency name="WC_PlayerTextDrawLetterSize"/>
			<dependency name="WC_PlayerTextDrawSetOutline"/>
			<dependency name="WC_PlayerTextDrawSetShadow"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="WC_PlayerTextDrawUseBox"/>
			<param name="playerid">
			</param>
			<param name="Xpos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Ypos">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="header_text">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:mS_DestroyPlayerMPs" syntax="mS_DestroyPlayerMPs(playerid)">
			<stacksize value="6"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<dependency name="WC_PlayerTextDrawDestroy"/>
			<dependency name="gSelectionItems"/>
			<dependency name="gSelectionItems"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_DestroySelectionMenu" syntax="mS_DestroySelectionMenu(playerid)">
			<stacksize value="5"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="HideModelSelectionMenu"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<dependency name="DeletePVar"/>
			<dependency name="GetPVarInt"/>
			<dependency name="SetPVarInt"/>
			<dependency name="WC_PlayerTextDrawDestroy"/>
			<dependency name="gBackgroundTextDrawId"/>
			<dependency name="gCancelButtonTextDrawId"/>
			<dependency name="gCurrentPageTextDrawId"/>
			<dependency name="gHeaderTextDrawId"/>
			<dependency name="gNextButtonTextDrawId"/>
			<dependency name="gPrevButtonTextDrawId"/>
			<dependency name="mS_DestroyPlayerMPs"/>
			<dependency name="mS_GetPlayerCurrentListID"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_GetAmountOfListItems" syntax="mS_GetAmountOfListItems(ListID)">
			<stacksize value="1"/>
			<referrer name="mS_GetNumberOfPages"/>
			<dependency name="gLists"/>
			<param name="ListID">
			</param>
		</member>
		<member name="M:mS_GetAmountOfListItemsEx" syntax="mS_GetAmountOfListItemsEx(playerid)">
			<stacksize value="4"/>
			<referrer name="mS_GetNumberOfPagesEx"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<dependency name="GetPVarInt"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_GetNumberOfPages" syntax="mS_GetNumberOfPages(ListID)">
			<stacksize value="5"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="mS_GetAmountOfListItems"/>
			<param name="ListID">
			</param>
		</member>
		<member name="M:mS_GetNumberOfPagesEx" syntax="mS_GetNumberOfPagesEx(playerid)">
			<stacksize value="5"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="mS_GetAmountOfListItemsEx"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_GetPlayerCurrentListID" syntax="mS_GetPlayerCurrentListID(playerid)">
			<stacksize value="4"/>
			<referrer name="mS_ShowPlayerMPs"/>
			<referrer name="mS_UpdatePageTextDraw"/>
			<referrer name="mS_DestroySelectionMenu"/>
			<referrer name="OnPlayerClickTextDraw"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="GetPVarInt"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_ShowPlayerMPs" syntax="mS_ShowPlayerMPs(playerid)">
			<stacksize value="26"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="GetPVarFloat"/>
			<dependency name="GetPVarInt"/>
			<dependency name="gCustomList"/>
			<dependency name="gCustomList"/>
			<dependency name="gItemList"/>
			<dependency name="gItemList"/>
			<dependency name="gLists"/>
			<dependency name="gRotZoom"/>
			<dependency name="gRotZoom"/>
			<dependency name="gSelectionItems"/>
			<dependency name="gSelectionItems"/>
			<dependency name="gSelectionItemsTag"/>
			<dependency name="gSelectionItemsTag"/>
			<dependency name="mS_CreateMPTextDraw"/>
			<dependency name="mS_DestroyPlayerMPs"/>
			<dependency name="mS_GetAmountOfListItemsEx"/>
			<dependency name="mS_GetPlayerCurrentListID"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_UpdatePageTextDraw" syntax="mS_UpdatePageTextDraw(playerid)">
			<stacksize value="75"/>
			<referrer name="ShowModelSelectionMenu"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="OnPlayerClickPlayerTextDraw"/>
			<dependency name="GetPVarInt"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="format"/>
			<dependency name="gCurrentPageTextDrawId"/>
			<dependency name="mS_GetNumberOfPages"/>
			<dependency name="mS_GetNumberOfPagesEx"/>
			<dependency name="mS_GetPlayerCurrentListID"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:mS_strtok" syntax="mS_strtok(string[], &amp;index)">
			<stacksize value="23"/>
			<referrer name="LoadModelSelectionMenu"/>
			<dependency name="EOS"/>
			<dependency name="mS_strtok"/>
			<dependency name="strlen"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="index">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:main" syntax="main()">
			<attribute name="entry"/>
			<stacksize value="5"/>
			<dependency name="printf"/>
		</member>
		<member name="M:malloc" syntax="malloc(size)">
			<tagname value="Alloc"/>
			<stacksize value="1"/>
			<param name="size">
				Size of memory to allocate.
			</param>
			  <returns>  0 on fail or a data handle on sucess.  </returns>  <remarks>  Displays errors in secure mode.  </remarks> 
		</member>
		<member name="M:max" syntax="max(value1, value2)">
			<attribute name="native"/>
			<referrer name="SetRespawnTime"/>
			<referrer name="YVA2_FoundPush"/>
			<referrer name="YHNPS_Push"/>
			<param name="value1">
			</param>
			<param name="value2">
			</param>
		</member>
		<member name="M:memcmp" syntax="memcmp(arr1[], arr2[], count)">
			<stacksize value="3"/>
			<param name="arr1">
				<paraminfo> [] </paraminfo>
				First array to compare.
			</param>
			<param name="arr2">
				<paraminfo> [] </paraminfo>
				Second array to compare.
			</param>
			<param name="count">
				How many cells to compare.
			</param>
			      <returns>  The difference (0 if the same).  </returns> 
		</member>
		<member name="M:memcpy" syntax="memcpy(dest[], source[], index, numbytes, maxlength)">
			<attribute name="native"/>
			<referrer name="StripL"/>
			<referrer name="Strip"/>
			<referrer name="CodeScanCheck"/>
			<referrer name="Indirect_Array"/>
			<referrer name="Malloc_GetA"/>
			<referrer name="Malloc_SetA"/>
			<referrer name="Malloc_SetVAA"/>
			<referrer name="realloc"/>
			<referrer name="YVA2_DoPush"/>
			<referrer name="Iter_Init_Internal"/>
			<referrer name="Iter_YieldLoop"/>
			<referrer name="Iter_YieldReturn"/>
			<referrer name="BS_GetTeleportStats"/>
			<referrer name="BS_GetRandomAimStats"/>
			<referrer name="BS_GetRangeStats"/>
			<referrer name="number_format"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="index">
			</param>
			<param name="numbytes">
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:memset" syntax="memset(arr[], val, size)">
			<stacksize value="7"/>
			<referrer name="Malloc_Allocate"/>
			<dependency name="rawMemset"/>
			<param name="arr">
				<paraminfo> [] </paraminfo>
				Array or address to set to a value.
			</param>
			<param name="val">
			</param>
			<param name="size">
			</param>
			  <param name="iValue">What to set the cells to.</param>  <param name="iSize">Number of cells to fill.</param>  <remarks>  Based on code by Slice:  <a href="http://forum.sa-mp.com/showthread.php?p=1606781#post1606781" />  Modified to use binary flags instead of a loop.  "memset" takes an array, the size of the array, and a value to fill it with  and sets the whole array to that value.  "rawmemset" is similar, but takes an AMX data segment address instead and  the size is in bytes, not cells.  However, the size must still be a multiple  of 4.  </remarks> 
		</member>
		<member name="M:mget" syntax="mget(slot, index)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				The allocation unit to get data from.
			</param>
			<param name="index">
				The location in the unit to get.
			</param>
			    <returns>  The data  </returns>  <remarks>  Shorthand for <symbolref name="Malloc_Get" />.  </remarks> 
		</member>
		<member name="M:mgeta" syntax="mgeta(target[], length, array, index)">
			<stacksize value="1"/>
			<param name="target">
				<paraminfo> [] </paraminfo>
				Target for the string.
			</param>
			<param name="length">
				Length of the target.
			</param>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			        <returns>  The data  </returns>  <remarks>  Displays errors in secure mode.  Gets an array.  Shorthand for <symbolref name="Malloc_GetA" />.  </remarks> 
		</member>
		<member name="M:mgets" syntax="mgets(target[], length, array, index, pack)">
			<stacksize value="1"/>
			<param name="target">
				<paraminfo> [] </paraminfo>
				Target for the string.
			</param>
			<param name="length">
				Length of the target.
			</param>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				Return the string packed?
			</param>
			          <returns>  The data  </returns>  <remarks>  Displays errors in secure mode.  Gets a string.  Shorthand for <symbolref name="Malloc_GetS" />.  </remarks> 
		</member>
		<member name="M:min" syntax="min(value1, value2)">
			<attribute name="native"/>
			<referrer name="Base64Decode"/>
			<referrer name="DoLevenshteinDistance"/>
			<referrer name="DisasmWriteData"/>
			<referrer name="CodeScanAddJumpTarget"/>
			<referrer name="CodeScanAddSwitchTarget"/>
			<param name="value1">
			</param>
			<param name="value2">
			</param>
		</member>
		<member name="M:mset" syntax="mset(slot, index, value)">
			<stacksize value="1"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				The allocation unit to set in.
			</param>
			<param name="index">
				Where in the unit to set.
			</param>
			<param name="value">
				The value to save.
			</param>
			      <remarks>  Shorthand for <symbolref name="Malloc_Set" />.  </remarks> 
		</member>
		<member name="M:mseta" syntax="mseta(array, index, str[], len)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
				Array to insert.
			</param>
			<param name="len">
				Length of the array.
			</param>
			        <remarks>  Displays errors in secure mode.  Inserts an array.  Shorthand for <symbolref name="Malloc_SetA" />.  </remarks> 
		</member>
		<member name="M:msets" syntax="msets(array, index, str[], pack)">
			<stacksize value="1"/>
			<param name="array">
				<paraminfo>Alloc </paraminfo>
				Data unit to put information in.
			</param>
			<param name="index">
				Index in the unit.
			</param>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to insert
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				Should the string be packed in?
			</param>
			        <remarks>  Displays errors in secure mode.  Inserts a string.  Shorthand for <symbolref name="Malloc_SetS" />.  </remarks> 
		</member>
		<member name="M:mysql_connect" syntax="mysql_connect(host[], user[], password[], database[], option_id)">
			<tagname value="MySQL"/>
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="host">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="user">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="password">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="database">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="option_id">
				<paraminfo>MySQLOpt </paraminfo>
			</param>
		</member>
		<member name="M:mysql_errno" syntax="mysql_errno(handle)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="handle">
				<paraminfo>MySQL </paraminfo>
			</param>
		</member>
		<member name="M:mysql_format" syntax="mysql_format(handle, output[], max_len, format[], ...)">
			<attribute name="native"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="aliasCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="unbanIP"/>
			<referrer name="sql_user_update_integer"/>
			<referrer name="sql_user_update_string"/>
			<referrer name="sql_user_update_float"/>
			<referrer name="SaveAccount"/>
			<referrer name="CheckUnban"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="check_account_registered"/>
			<referrer name="sql_LoadPlayerData"/>
			<referrer name="OnDialogResponse"/>
			<param name="handle">
				<paraminfo>MySQL </paraminfo>
			</param>
			<param name="output">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="max_len">
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:mysql_log" syntax="mysql_log(loglevel)">
			<attribute name="native"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<param name="loglevel">
				<paraminfo>E_LOGLEVEL </paraminfo>
			</param>
		</member>
		<member name="M:mysql_tquery" syntax="mysql_tquery(handle, query[], callback[], format[], ...)">
			<attribute name="native"/>
			<referrer name="@yH_OnPlayerConnect@003"/>
			<referrer name="pc_cmd_admins"/>
			<referrer name="pc_cmd_premiums"/>
			<referrer name="pc_cmd_banlist"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="aliasCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="unbanIP"/>
			<referrer name="sql_user_update_integer"/>
			<referrer name="sql_user_update_string"/>
			<referrer name="sql_user_update_float"/>
			<referrer name="topCheck"/>
			<referrer name="SaveAccount"/>
			<referrer name="CheckUnban"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<referrer name="check_account_registered"/>
			<referrer name="sql_LoadPlayerData"/>
			<referrer name="OnDialogResponse"/>
			<param name="handle">
				<paraminfo>MySQL </paraminfo>
			</param>
			<param name="query">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="callback">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:numargs" syntax="numargs()">
			<attribute name="native"/>
			<referrer name="SetWeaponDamage"/>
			<referrer name="L@"/>
			<referrer name="T@"/>
			<referrer name="ref"/>
			<referrer name="AsmEmitInstruction"/>
			<referrer name="CodeScanMatcherPattern_"/>
			<referrer name="refabs"/>
			<referrer name="ShuffleDeepArray_Entry"/>
			<referrer name="ResetDeepArray_Entry"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<referrer name="Indirect_Ref_"/>
			<referrer name="Indirect_Ptr_"/>
			<referrer name="Indirect_DeRef_"/>
			<referrer name="Indirect_DePtr_"/>
		</member>
		<member name="M:number_format" syntax="number_format(variable, prefix, decimals, thousand_seperator, decimal_point, tag)">
			<stacksize value="7"/>
			<dependency name="EOS"/>
			<dependency name="cellbits"/>
			<dependency name="format"/>
			<dependency name="memcpy"/>
			<dependency name="number_format"/>
			<dependency name="strcat"/>
			<dependency name="strfind"/>
			<dependency name="strins"/>
			<dependency name="strlen"/>
			<param name="variable">
				<paraminfo> {_,Float,Text3D,Menu,Text,DB,DBResult,bool,File} </paraminfo>
			</param>
			<param name="prefix">
			</param>
			<param name="decimals">
			</param>
			<param name="thousand_seperator">
			</param>
			<param name="decimal_point">
			</param>
			<param name="tag">
			</param>
		</member>
		<member name="M:pc_cmd_a" syntax="pc_cmd_a(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="229"/>
			<dependency name="AMessage"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="sscanf"/>
			<dependency name="strcmp"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_admins" syntax="pc_cmd_admins(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_adminstats" syntax="pc_cmd_adminstats(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="ConstAmxString:operator=(String:)"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SPD"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="cellmin"/>
			<dependency name="dialog_ADMINSTATS"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pDutyTime"/>
			<dependency name="pJails"/>
			<dependency name="pKicks"/>
			<dependency name="pLang"/>
			<dependency name="pMutes"/>
			<dependency name="str_format"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_aduty" syntax="pc_cmd_aduty(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="ConstAmxString:operator=(String:)"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="Iterator@Player"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendFormatMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="false"/>
			<dependency name="pAdmin"/>
			<dependency name="str_format"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_alias" syntax="pc_cmd_alias(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="159"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_altchat" syntax="pc_cmd_altchat(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="altchatToggled"/>
			<dependency name="false"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="toggleAltChat"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_ban" syntax="pc_cmd_ban(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="418"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerIp"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="getdate"/>
			<dependency name="gettime"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pLang"/>
			<dependency name="sql_user_update_integer"/>
			<dependency name="sscanf"/>
			<dependency name="t_Kick"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_banlist" syntax="pc_cmd_banlist(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_cc" syntax="pc_cmd_cc(playerid)">
			<attribute name="public"/>
			<stacksize value="135"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="AdminDuty"/>
			<dependency name="ClearFPlayer"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="Iterator@Player"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_changepassword" syntax="pc_cmd_changepassword(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="31"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pPass"/>
			<dependency name="sscanf"/>
			<dependency name="strlen"/>
			<dependency name="udb_hash"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_checkadminstats" syntax="pc_cmd_checkadminstats(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="ConstAmxString:operator=(String:)"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SPD"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="dialog_CADMINSTATS"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pDutyTime"/>
			<dependency name="pJails"/>
			<dependency name="pKicks"/>
			<dependency name="pLang"/>
			<dependency name="pMutes"/>
			<dependency name="sscanf"/>
			<dependency name="str_format"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_checkip" syntax="pc_cmd_checkip(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="89"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerIp"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_color" syntax="pc_cmd_color(playerid)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="DIALOG_NCOLOR"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pAdmin"/>
			<dependency name="pPremium"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_dm" syntax="pc_cmd_dm(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="512"/>
			<dependency name="DIALOG_DM"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="cellmin"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pFPS"/>
			<dependency name="pJailed"/>
			<dependency name="pLang"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_duel" syntax="pc_cmd_duel(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="58"/>
			<dependency name="ClearDuelInvites"/>
			<dependency name="E_ARMOUR"/>
			<dependency name="E_COUNTDOWN"/>
			<dependency name="E_HEALTH"/>
			<dependency name="E_LOCATION_ID"/>
			<dependency name="E_PLAYER"/>
			<dependency name="E_POS_ONE"/>
			<dependency name="E_POS_TWO"/>
			<dependency name="E_TIMER"/>
			<dependency name="E_WEAPON"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="InFreeroam"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerDueling"/>
			<dependency name="PI"/>
			<dependency name="RemovePlayerFromVehicle"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetCameraBehindPlayer"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetTimerEx"/>
			<dependency name="ShowPlayerDuelMenu"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="g_duelLocationData"/>
			<dependency name="gettime"/>
			<dependency name="pLang"/>
			<dependency name="p_duelInvitation"/>
			<dependency name="p_duelInvitation"/>
			<dependency name="p_playerDueling"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="sscanf"/>
			<dependency name="strcmp"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_fps" syntax="pc_cmd_fps(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pFPS"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_freeroam" syntax="pc_cmd_freeroam(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="FreeroamSpawn"/>
			<dependency name="FreeroamSpawn"/>
			<dependency name="InDM"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<dependency name="random"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_gun" syntax="pc_cmd_gun(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cellmax"/>
			<dependency name="cellmin"/>
			<dependency name="fr_CheckValidWeapons"/>
			<dependency name="pLang"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="sscanf"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_help" syntax="pc_cmd_help(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="DIALOG_HELP"/>
			<dependency name="PI"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_hostname" syntax="pc_cmd_hostname(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="209"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendRconCommand"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_id" syntax="pc_cmd_id(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_jail" syntax="pc_cmd_jail(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="141"/>
			<dependency name="AdminDuty"/>
			<dependency name="ArenaTime"/>
			<dependency name="GetName"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="JAIL"/>
			<dependency name="JAIL"/>
			<dependency name="JAILED_VW"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="pAdmin"/>
			<dependency name="pJailed"/>
			<dependency name="pJails"/>
			<dependency name="pLang"/>
			<dependency name="random"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_kick" syntax="pc_cmd_kick(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="139"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pAdmin"/>
			<dependency name="pKicks"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="t_Kick"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_lang" syntax="pc_cmd_lang(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="dialog_CHOOSELANG"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_lobby" syntax="pc_cmd_lobby(playerid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="_:operator=(_no_itertag:)"/>
			<dependency name="ArenaTime"/>
			<dependency name="GetName"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InFreeroam"/>
			<dependency name="Iter_DestroyVehicle"/>
			<dependency name="Iterator@Player"/>
			<dependency name="Killed"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetCbugAllowed"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SpawnSetup"/>
			<dependency name="ToggleTeleport"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_GetPlayerArmour"/>
			<dependency name="WC_GetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="false"/>
			<dependency name="fr_SpawnedVehicle"/>
			<dependency name="fr_VehicleID"/>
			<dependency name="pJailed"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_makeadmin" syntax="pc_cmd_makeadmin(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="113"/>
			<dependency name="AMessage"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerAdmin"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pACode"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="random"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_makepremium" syntax="pc_cmd_makepremium(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pPremium"/>
			<dependency name="sql_user_update_integer"/>
			<dependency name="sscanf"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_mute" syntax="pc_cmd_mute(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="163"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="pMutes"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_offban" syntax="pc_cmd_offban(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="285"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerID"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="getdate"/>
			<dependency name="gettime"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_pl" syntax="pc_cmd_pl(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="NetStats_PacketLossPercent"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_pm" syntax="pc_cmd_pm(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="341"/>
			<dependency name="AMessage"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="lastPM"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_premiums" syntax="pc_cmd_premiums(playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_r" syntax="pc_cmd_r(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="262"/>
			<dependency name="AMessage"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="format"/>
			<dependency name="lastPM"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_report" syntax="pc_cmd_report(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="DIALOG_REPORT"/>
			<dependency name="PI"/>
			<dependency name="ReportCooldown"/>
			<dependency name="ReportedID"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="gettime"/>
			<dependency name="pJailed"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_resetaltchat" syntax="pc_cmd_resetaltchat(playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="resetAltChat"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_screenshare" syntax="pc_cmd_screenshare(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="AdminDuty"/>
			<dependency name="ArenaTime"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="Killstreak"/>
			<dependency name="PI"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_skin" syntax="pc_cmd_skin(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="137"/>
			<dependency name="InDM"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerSkinn"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pSQLID"/>
			<dependency name="pSkin"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_spawn" syntax="pc_cmd_spawn(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="63"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_GetPlayerArmour"/>
			<dependency name="WC_GetPlayerHealth"/>
			<dependency name="dm_Kick"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_spec" syntax="pc_cmd_spec(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetPlayerInterior"/>
			<dependency name="InDM"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="TakeSpectateID"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_GetPlayerVirtualWorld"/>
			<dependency name="WC_PlayerSpectatePlayer"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_specoff" syntax="pc_cmd_specoff(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerSkinn"/>
			<dependency name="TakeSpectateID"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="false"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pSkin"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_stats" syntax="pc_cmd_stats(playerid)">
			<attribute name="public"/>
			<stacksize value="500"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="DIALOG_NOTHING"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="floatdiv"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pDeaths"/>
			<dependency name="pHours"/>
			<dependency name="pKills"/>
			<dependency name="pPremium"/>
			<dependency name="pRank"/>
			<dependency name="pRegistrationDate"/>
			<dependency name="pSkin"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:pc_cmd_teleports" syntax="pc_cmd_teleports(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_toggletp" syntax="pc_cmd_toggletp(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ToggleTeleport"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_toghud" syntax="pc_cmd_toghud(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="GUI"/>
			<dependency name="GUI"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="TogHud"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_PlayerTextDrawHide"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="false"/>
			<dependency name="pLang"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_tpto" syntax="pc_cmd_tpto(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="11"/>
			<dependency name="GetName"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="ToggleTeleport"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_unban" syntax="pc_cmd_unban(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="332"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_unbanip" syntax="pc_cmd_unbanip(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="332"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_unfreeze" syntax="pc_cmd_unfreeze(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="AdminDuty"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_TogglePlayerControllable"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_unjail" syntax="pc_cmd_unjail(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="110"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="AMessage"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SpawnSetup"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="cellmin"/>
			<dependency name="format"/>
			<dependency name="pAdmin"/>
			<dependency name="pJailed"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_unmute" syntax="pc_cmd_unmute(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="AdminDuty"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="pAdmin"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_veh" syntax="pc_cmd_veh(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="16"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="InFreeroam"/>
			<dependency name="Iter_CreateVehicle"/>
			<dependency name="Iter_DestroyVehicle"/>
			<dependency name="PI"/>
			<dependency name="PutPlayerInVehicle"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="fr_SpawnedVehicle"/>
			<dependency name="fr_VehicleID"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessage"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_world" syntax="pc_cmd_world(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="InFreeroam"/>
			<dependency name="PI"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cellmin"/>
			<dependency name="pLang"/>
			<dependency name="sscanf"/>
			<dependency name="va_SendClientMessage"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pp_on_error" syntax="pp_on_error(source[], message[], level, &amp;retval)">
			<stacksize value="1"/>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="message">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="level">
				<paraminfo>error_level </paraminfo>
			</param>
			<param name="retval">
				<paraminfo> &amp; </paraminfo>
			</param>
		</member>
		<member name="M:print" syntax="print(string[])">
			<attribute name="native"/>
			<referrer name="PrintArg"/>
			<referrer name="SortArrayUsingComparator_Entry"/>
			<referrer name="SortArrayUsingCompInto_Entry"/>
			<referrer name="va_print"/>
			<referrer name="ShowModelSelectionMenuEx"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="topQuery"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The string to print
			</param>
			<summary>Prints a string to the server console (not in-game chat) and logs (server_log.txt).</summary>  <seealso name="printf"/>
		</member>
		<member name="M:printf" syntax="printf(format[], ...)">
			<attribute name="native"/>
			<referrer name="ScriptInit"/>
			<referrer name="UpdateHealthBar"/>
			<referrer name="DamageFeedUpdate"/>
			<referrer name="DamageFeedUpdateText"/>
			<referrer name="Debug_Print0"/>
			<referrer name="AMX_DumpHeader"/>
			<referrer name="PrintAmxHeader"/>
			<referrer name="CodeScanRunFast"/>
			<referrer name="ScriptInit_OnRuntimeError"/>
			<referrer name="LoadModelSelectionMenu"/>
			<referrer name="OnQueryError"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnPlayerCommandPerformed"/>
			<referrer name="main"/>
			<referrer name="sql_OnAccountCreate"/>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format string
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
				Indefinite number of arguments of any tag
			</param>
			<summary>Outputs a formatted string on the console (the server window, not the in-game chat).</summary>   <seealso name="print"/> <seealso name="format"/> <remarks>The format string or its output should not exceed 1024 characters. Anything beyond that length can lead to a server to crash.</remarks> <remarks>This function doesn't support <a href="#strpack">packed</a> strings.</remarks> <remarks> <b>Format Specifiers:</b><p/> <ul> <li><b><c>%i</c></b> - integer (whole number)</li> <li><b><c>%d</c></b> - integer (whole number).</li> <li><b><c>%s</c></b> - string</li> <li><b><c>%f</c></b> - floating-point number (Float: tag)</li> <li><b><c>%c</c></b> - ASCII character</li> <li><b><c>%x</c></b> - hexadecimal number</li> <li><b><c>%b</c></b> - binary number</li> <li><b><c>%%</c></b> - literal <b><c>%</c></b></li> <li><b><c>%q</c></b> - escape a text for SQLite. (Added in <b>0.3.7 R2</b>)</li> </ul> </remarks> <remarks>The values for the placeholders follow in the exact same order as parameters in the call. For example, <b><c>"I am %i years old"</c></b> - the <b><c>%i</c></b> will be replaced with an Integer variable, which is the person's age.</remarks> <remarks>You may optionally put a number between the <b><c>%</c></b> and the letter of the placeholder code. This number indicates the field width; if the size of the parameter to print at the position of the placeholder is smaller than the field width, the field is expanded with spaces. To cut the number of decimal places beeing shown of a float, you can add <b><c>.&lt;max number&gt;</c></b> between the <b><c>%</c></b> and the <b><c>f</c></b>. (example: <b><c>%.2f</c></b>)</remarks>
		</member>
		<member name="M:rAgc_DelayRapid" syntax="rAgc_DelayRapid(playerid, weapon, ammo)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="rAgcAntibugTicks"/>
			<dependency name="rAgcFirstShot"/>
			<dependency name="rAgcSecondShot"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<param name="playerid">
			</param>
			<param name="weapon">
			</param>
			<param name="ammo">
			</param>
		</member>
		<member name="M:rAgc_Detector" syntax="rAgc_Detector(playerid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="GetPlayerWeaponData"/>
			<dependency name="SetPlayerAmmo"/>
			<dependency name="rAgcASWarns"/>
			<dependency name="rAgcAmmoImmu"/>
			<dependency name="rAgcPlayerAmmo"/>
			<dependency name="rAgcPlayerWeapons"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_GetWeaponSlot"/>
			<dependency name="rAgc_IsPlayerPaused"/>
			<dependency name="rAgc_IsWeaponAmmoable"/>
			<dependency name="rAgc_IsWeaponSys"/>
			<dependency name="rAgc_IsWeaponValid"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_ResetPlayerWeapons"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="rAgc_Weapons"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_GetWeaponSlot" syntax="rAgc_GetWeaponSlot(weaponid)">
			<stacksize value="1"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_Detector"/>
			<param name="weaponid">
			</param>
		</member>
		<member name="M:rAgc_GivePlayerWeapon" syntax="rAgc_GivePlayerWeapon(playerid, weaponid, ammo)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="GetPlayerWeaponData"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<dependency name="rAgcAmmoImmu"/>
			<dependency name="rAgcNewAmmo"/>
			<dependency name="rAgcOldAmmo"/>
			<dependency name="rAgcPlayerAmmo"/>
			<dependency name="rAgcPlayerWeapons"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_GetWeaponSlot"/>
			<dependency name="rAgc_IsWeaponAmmoable"/>
			<dependency name="rAgc_IsWeaponValid"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="ammo">
			</param>
		</member>
		<member name="M:rAgc_IsPlayerPaused" syntax="rAgc_IsPlayerPaused(playerid)">
			<stacksize value="2"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="rAgc_Detector"/>
			<dependency name="GetTickCount"/>
			<dependency name="rAgcUpdateTicks"/>
			<dependency name="rAgc_Player"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_IsWeaponAmmoable" syntax="rAgc_IsWeaponAmmoable(Weapon)">
			<stacksize value="1"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_Detector"/>
			<param name="Weapon">
			</param>
		</member>
		<member name="M:rAgc_IsWeaponSys" syntax="rAgc_IsWeaponSys(Weapon)">
			<stacksize value="1"/>
			<referrer name="rAgc_Detector"/>
			<param name="Weapon">
			</param>
		</member>
		<member name="M:rAgc_IsWeaponValid" syntax="rAgc_IsWeaponValid(Weapon)">
			<stacksize value="1"/>
			<referrer name="rAgc_SetPlayerAmmo"/>
			<referrer name="rAgc_GivePlayerWeapon"/>
			<referrer name="rAgc_Detector"/>
			<param name="Weapon">
			</param>
		</member>
		<member name="M:rAgc_IsWepRapid" syntax="rAgc_IsWepRapid(Weapon)">
			<stacksize value="1"/>
			<referrer name="WC_OnPlayerWeaponShot"/>
			<param name="Weapon">
			</param>
		</member>
		<member name="M:rAgc_OnPlayerConnect" syntax="rAgc_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="BustAim_g_ContinousShots"/>
			<dependency name="BustAim_g_IntrnlPlayerSettings"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_OutOfRangeShots"/>
			<dependency name="BustAim_g_PlayerSettings"/>
			<dependency name="BustAim_g_RandomAimShots"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TeleportShots"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="CHECK_FOR_CONTINOUS_SHOTS"/>
			<dependency name="CHECK_FOR_OUT_OF_RANGE_SHOTS"/>
			<dependency name="CHECK_FOR_PROAIM_TELEPORT"/>
			<dependency name="CHECK_FOR_RANDOM_AIM_SHOTS"/>
			<dependency name="Fill68"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_OnPlayerDisconnect" syntax="rAgc_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="31"/>
			<dependency name="ArenaTime"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="InDM"/>
			<dependency name="InDM1"/>
			<dependency name="InDM2"/>
			<dependency name="InDM3"/>
			<dependency name="InDM4"/>
			<dependency name="InDM5"/>
			<dependency name="InDM6"/>
			<dependency name="InDM7"/>
			<dependency name="Killed"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SaveAccount"/>
			<dependency name="UlogovanProvera"/>
			<dependency name="false"/>
			<dependency name="pSQLID"/>
			<dependency name="true"/>
			<dependency name="va_SendClientMessageToAll"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:rAgc_OnPlayerSpawn" syntax="rAgc_OnPlayerSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="8"/>
			<dependency name="GHOST2"/>
			<dependency name="GHOST2"/>
			<dependency name="GHOST2_VW"/>
			<dependency name="GTOWN"/>
			<dependency name="GTOWN"/>
			<dependency name="GTOWN_VW"/>
			<dependency name="GunSpawn"/>
			<dependency name="InDM"/>
			<dependency name="InFreeroam"/>
			<dependency name="JAIL"/>
			<dependency name="JAIL"/>
			<dependency name="JAILED_VW"/>
			<dependency name="Killed"/>
			<dependency name="LVPD"/>
			<dependency name="LVPD"/>
			<dependency name="LVPD2"/>
			<dependency name="LVPD2"/>
			<dependency name="LVPD2_VW"/>
			<dependency name="LVPD_VW"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="RCBTF_VW"/>
			<dependency name="RCRAND"/>
			<dependency name="RCRAND"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetCbugAllowed"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SetPlayerSkinn"/>
			<dependency name="ShowFreeroamTextDraws"/>
			<dependency name="SoarArena"/>
			<dependency name="SoarArena"/>
			<dependency name="TextdrawSetup"/>
			<dependency name="TogHud"/>
			<dependency name="WC_SetPlayerArmour"/>
			<dependency name="WC_SetPlayerHealth"/>
			<dependency name="WC_SetPlayerPos"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="WHOUSE"/>
			<dependency name="WHOUSE"/>
			<dependency name="WHOUSE_VW"/>
			<dependency name="cellmin"/>
			<dependency name="false"/>
			<dependency name="pJailed"/>
			<dependency name="pLang"/>
			<dependency name="pSkin"/>
			<dependency name="rAgc_GivePlayerWeapon"/>
			<dependency name="random"/>
			<dependency name="true"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_OnPlayerUpdate" syntax="rAgc_OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="BustAim_g_LastUpdateTick"/>
			<dependency name="GetTickCount"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_OnPlayerWeaponShot" syntax="rAgc_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="16"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,_:)"/>
			<dependency name="operator&gt;(_:,Float:)"/>
			<dependency name="BustAim_g_AimWarningStats"/>
			<dependency name="BustAim_g_AimWarningStats"/>
			<dependency name="BustAim_g_ContinousShots"/>
			<dependency name="BustAim_g_DCTTL_temp"/>
			<dependency name="BustAim_g_IntrnlPlayerSettings"/>
			<dependency name="BustAim_g_LastUpdateTick"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_MaxContinousShots"/>
			<dependency name="BustAim_g_OutOfRangeShots"/>
			<dependency name="BustAim_g_PlayerPrevWeapon"/>
			<dependency name="BustAim_g_PlayerSettings"/>
			<dependency name="BustAim_g_RandomAimShots"/>
			<dependency name="BustAim_g_RangeWarningStats"/>
			<dependency name="BustAim_g_RangeWarningStats"/>
			<dependency name="BustAim_g_ShotsFired"/>
			<dependency name="BustAim_g_ShotsHit"/>
			<dependency name="BustAim_g_TeleportShots"/>
			<dependency name="BustAim_g_TeleportWarningStats"/>
			<dependency name="BustAim_g_TeleportWarningStats"/>
			<dependency name="BustAim_g_TotalOutOfRangeWarns"/>
			<dependency name="BustAim_g_TotalRandomAimWarns"/>
			<dependency name="BustAim_g_TotalTeleportWarns"/>
			<dependency name="BustAim_g_WeaponRange"/>
			<dependency name="CHECK_FOR_CONTINOUS_SHOTS"/>
			<dependency name="CHECK_FOR_OUT_OF_RANGE_SHOTS"/>
			<dependency name="CHECK_FOR_PROAIM_TELEPORT"/>
			<dependency name="CHECK_FOR_RANDOM_AIM_SHOTS"/>
			<dependency name="GetPlayerCameraFrontVector"/>
			<dependency name="GetPlayerCameraPos"/>
			<dependency name="GetPlayerLastShotVectors"/>
			<dependency name="GetPlayerPing"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerSurfingVehicleID"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetSpeed"/>
			<dependency name="GetTickCount"/>
			<dependency name="IGNORE_PLAYER"/>
			<dependency name="IsPlayerInAnyVehicle"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="NetStats_PacketLossPercent"/>
			<dependency name="OnPlayerSuspectedForAimbot"/>
			<dependency name="PREVIOUS_SHOT_DID_DAMAGE"/>
			<dependency name="VectorSize"/>
			<dependency name="WARNING_CONTINOUS_SHOTS"/>
			<dependency name="WARNING_OUT_OF_RANGE_SHOT"/>
			<dependency name="WARNING_PROAIM_TELEPORT"/>
			<dependency name="WARNING_RANDOM_AIM"/>
			<dependency name="floatabs"/>
			<dependency name="internal_BS_IsCameraAimingAt"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="hittype">
			</param>
			<param name="hitid">
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:rAgc_ProtHandler" syntax="rAgc_ProtHandler(handleid, handletype)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<dependency name="false"/>
			<dependency name="rAgcAmmoImmu"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<param name="handleid">
			</param>
			<param name="handletype">
			</param>
		</member>
		<member name="M:rAgc_ResetPlayerWeapons" syntax="rAgc_ResetPlayerWeapons(playerid)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<referrer name="MP_OPC"/>
			<referrer name="WC_OnPlayerSpawn"/>
			<referrer name="rAgc_Detector"/>
			<dependency name="ResetPlayerWeapons"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<dependency name="rAgcPlayerAmmo"/>
			<dependency name="rAgcPlayerWeapons"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:rAgc_SetPlayerAmmo" syntax="rAgc_SetPlayerAmmo(playerid, weaponid, ammo)">
			<attribute name="public"/>
			<stacksize value="9"/>
			<dependency name="SetPlayerAmmo"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<dependency name="rAgcNewAmmo"/>
			<dependency name="rAgcOldAmmo"/>
			<dependency name="rAgcPlayerAmmo"/>
			<dependency name="rAgcWepImmu"/>
			<dependency name="rAgc_IsWeaponAmmoable"/>
			<dependency name="rAgc_IsWeaponValid"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Player"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="rAgc_Weapons"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="ammo">
			</param>
		</member>
		<member name="M:random" syntax="random(max)">
			<attribute name="native"/>
			<referrer name="Random"/>
			<referrer name="RandomFloat"/>
			<referrer name="ShuffleDeepArray_Entry"/>
			<referrer name="Iter_Random_Internal"/>
			<referrer name="Iter_RandomFree_InternalC"/>
			<referrer name="Iter_Func@Random"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="@yH_OnPlayerClickPlayerTD@008"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<param name="max">
			</param>
		</member>
		<member name="M:rawMemcpy_" syntax="rawMemcpy_(dest, src, index, numbytes, maxlength)">
			<attribute name="native"/>
			<referrer name="YHNPS_Insert"/>
			<referrer name="YHNPS_Push"/>
			<param name="dest">
				Destination address.
			</param>
			<param name="src">
				Source data.
			</param>
			<param name="index">
			</param>
			<param name="numbytes">
				Number of bytes to copy.
			</param>
			<param name="maxlength">
			</param>
			<summary>  rawMemcpy  </summary>        <remarks>  Like memcpy, but takes addresses instead of arrays.  Also far less secure  because it doesn't check the destination size - it just assumes it is large  enough.  </remarks> 
		</member>
		<member name="M:rawMemset" syntax="rawMemset(iAddress, iValue, iSize)">
			<stacksize value="1"/>
			<referrer name="memset"/>
			<param name="iAddress">
				Array or address to set to a value.
			</param>
			<param name="iValue">
				What to set the cells to.
			</param>
			<param name="iSize">
				Number of cells to fill.
			</param>
			      <remarks>  Based on code by Slice:  <a href="http://forum.sa-mp.com/showthread.php?p=1606781#post1606781" />  Modified to use binary flags instead of a loop.  "memset" takes an array, the size of the array, and a value to fill it with  and sets the whole array to that value.  "rawmemset" is similar, but takes an AMX data segment address instead and  the size is in bytes, not cells.  However, the size must still be a multiple  of 4.  </remarks> 
		</member>
		<member name="M:realloc" syntax="realloc(slot, size, clear)">
			<tagname value="Alloc"/>
			<stacksize value="8"/>
			<dependency name="Malloc_Allocate"/>
			<dependency name="Malloc_Free"/>
			<dependency name="YSI_gMallocMemory"/>
			<dependency name="cellbits"/>
			<dependency name="memcpy"/>
			<param name="slot">
				<paraminfo>Alloc </paraminfo>
				Slot to resize.
			</param>
			<param name="size">
				New size of the memory.
			</param>
			<param name="clear">
				<paraminfo>bool </paraminfo>
				Should we erase the memory first?
			</param>
			      <remarks>  Displays errors in secure mode.  </remarks> 
		</member>
		<member name="M:ref" syntax="ref(...)">
			<stacksize value="2"/>
			<referrer name="AsmRaiseError"/>
			<referrer name="AsmInit"/>
			<referrer name="CodeScanAddMatcher"/>
			<referrer name="AddressofResolve"/>
			<referrer name="YVA2_CodeGenMainCleanup"/>
			<referrer name="Hooks_WriteFunction"/>
			<referrer name="_yH@"/>
			<referrer name="Hooks_GenerateContinue"/>
			<dependency name="numargs"/>
			<param name="...">
			</param>
		</member>
		<member name="M:refabs" syntax="refabs(...)">
			<stacksize value="5"/>
			<referrer name="GetAmxAddress"/>
			<dependency name="RelToAbs"/>
			<dependency name="numargs"/>
			<param name="...">
			</param>
		</member>
		<member name="M:regex_match" syntax="regex_match(string[], expression[])">
			<attribute name="native"/>
			<referrer name="OnDialogResponse"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="expression">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:resetAltChat" syntax="resetAltChat(playerid)">
			<stacksize value="8"/>
			<referrer name="pc_cmd_resetaltchat"/>
			<dependency name="AltChatTD_Player"/>
			<dependency name="AltChatTD_Text"/>
			<dependency name="AltChatTD_Text"/>
			<dependency name="MAX_LINES"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="strmid"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:returnstringarg" syntax="returnstringarg(idx)">
			<stacksize value="145"/>
			<dependency name="returnstringarg"/>
			<dependency name="strcat"/>
			<param name="idx">
				Index of the string in the parameters.
			</param>
			  <returns>  string  </returns>  <remarks>  Is passed the result of getarg, which will be the address of a string (in  theory) and uses that for DMA to get the string.  </remarks> 
		</member>
		<member name="M:sendAltChatMessage" syntax="sendAltChatMessage(message[])">
			<stacksize value="9"/>
			<referrer name="OnPlayerSuspectedForAimbot"/>
			<dependency name="AltChatTD_Player"/>
			<dependency name="AltChatTD_Text"/>
			<dependency name="AltChatTD_Text"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="MAX_LINES"/>
			<dependency name="PI"/>
			<dependency name="WC_PlayerTextDrawSetString"/>
			<dependency name="pAdmin"/>
			<dependency name="strmid"/>
			<dependency name="true"/>
			<param name="message">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:setarg" syntax="setarg(arg, index, value)">
			<attribute name="native"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="Iter_Clear_InternalC"/>
			<param name="arg">
			</param>
			<param name="index">
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:setproperty" syntax="setproperty(id, name[], value, string[])">
			<attribute name="native"/>
			<referrer name="C@"/>
			<referrer name="D@"/>
			<referrer name="L@"/>
			<referrer name="T@"/>
			<referrer name="S@"/>
			<referrer name="X@"/>
			<referrer name="E@"/>
			<referrer name="Z@"/>
			<referrer name="R@"/>
			<param name="id">
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="value">
			</param>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:sql_LoadPlayerData" syntax="sql_LoadPlayerData(playerid)">
			<attribute name="public"/>
			<stacksize value="233"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_get_value_name_float"/>
			<dependency name="cache_get_value_name_int"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pACode"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pCash"/>
			<dependency name="pColor"/>
			<dependency name="pDeaths"/>
			<dependency name="pDutyTime"/>
			<dependency name="pHours"/>
			<dependency name="pInClan"/>
			<dependency name="pJailed"/>
			<dependency name="pJails"/>
			<dependency name="pKicks"/>
			<dependency name="pKills"/>
			<dependency name="pLang"/>
			<dependency name="pMuted"/>
			<dependency name="pMutes"/>
			<dependency name="pPass"/>
			<dependency name="pPlayerIP"/>
			<dependency name="pPremium"/>
			<dependency name="pRank"/>
			<dependency name="pRegistrationDate"/>
			<dependency name="pSQLID"/>
			<dependency name="pSkin"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:sql_OnAccountCreate" syntax="sql_OnAccountCreate(playerid)">
			<attribute name="public"/>
			<stacksize value="30"/>
			<dependency name="GetName"/>
			<dependency name="GetName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="PlayerWhoInvite"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="WC_TogglePlayerSpectating"/>
			<dependency name="cache_insert_id"/>
			<dependency name="false"/>
			<dependency name="pACode"/>
			<dependency name="pAdmin"/>
			<dependency name="pBans"/>
			<dependency name="pCash"/>
			<dependency name="pClanMembers"/>
			<dependency name="pColor"/>
			<dependency name="pCreatedClan"/>
			<dependency name="pDeaths"/>
			<dependency name="pDutyTime"/>
			<dependency name="pHours"/>
			<dependency name="pInClan"/>
			<dependency name="pJailed"/>
			<dependency name="pJails"/>
			<dependency name="pKicks"/>
			<dependency name="pKills"/>
			<dependency name="pMuted"/>
			<dependency name="pMutes"/>
			<dependency name="pPremium"/>
			<dependency name="pRank"/>
			<dependency name="pSQLID"/>
			<dependency name="pSkin"/>
			<dependency name="pSmrti"/>
			<dependency name="pUbistva"/>
			<dependency name="printf"/>
			<dependency name="wc_SetPlayerVirtualWorld"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:sql_checkIP" syntax="sql_checkIP(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:sql_returnbanned" syntax="sql_returnbanned(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:sql_user_update_float" syntax="sql_user_update_float(playerid, field[], val)">
			<attribute name="public"/>
			<stacksize value="137"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pSQLID"/>
			<param name="playerid">
			</param>
			<param name="field">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="val">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:sql_user_update_integer" syntax="sql_user_update_integer(playerid, field[], value)">
			<attribute name="public"/>
			<stacksize value="137"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="WC_OnPlayerDeath"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pSQLID"/>
			<param name="playerid">
			</param>
			<param name="field">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="value">
			</param>
		</member>
		<member name="M:sql_user_update_string" syntax="sql_user_update_string(playerid, field[], val[])">
			<attribute name="public"/>
			<stacksize value="137"/>
			<dependency name="PI"/>
			<dependency name="PI"/>
			<dependency name="SQL"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<dependency name="pSQLID"/>
			<param name="playerid">
			</param>
			<param name="field">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="val">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:sscanf" syntax="sscanf(data[], format[], ...)">
			<attribute name="native"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_gun"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_checkip"/>
			<referrer name="pc_cmd_unfreeze"/>
			<referrer name="pc_cmd_hostname"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_alias"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_unban"/>
			<referrer name="pc_cmd_unbanip"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_report"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="OnDialogResponse"/>
			<param name="data">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {Float,_} </paraminfo>
			</param>
		</member>
		<member name="M:sscanf_vehicle" syntax="sscanf_vehicle(string[])">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="strcmp"/>
			<dependency name="strval"/>
			<dependency name="true"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:sscanf_weapon" syntax="sscanf_weapon(string[])">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="strcmp"/>
			<dependency name="strval"/>
			<dependency name="true"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:str_format" syntax="str_format(format[], ...)">
			<tagname value="String"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_aduty"/>
			<referrer name="pc_cmd_adminstats"/>
			<referrer name="pc_cmd_checkadminstats"/>
			<param name="format">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,bool,Float,Variant,String,List,LinkedList,Map,Pool,Iter,Handle,Task,Expression} </paraminfo>
			</param>
		</member>
		<member name="M:strcat" syntax="strcat(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="returnstringarg"/>
			<referrer name="DisasmGetInsnName"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="CodeScanGetMatchName"/>
			<referrer name="Indirect_Tag"/>
			<referrer name="Malloc_SetVAS"/>
			<referrer name="va_getstring"/>
			<referrer name="Hooks_GetPreHooks"/>
			<referrer name="Hooks_GetDefaultReturn"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="Hooks_Ordinal"/>
			<referrer name="Admini"/>
			<referrer name="Premiums"/>
			<referrer name="banInfo"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="number_format"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strcmp" syntax="strcmp(string1[], string2[], ignorecase, length)">
			<attribute name="native"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<referrer name="YVers_Callback"/>
			<referrer name="AMX_GetEntry"/>
			<referrer name="AMX_GetName"/>
			<referrer name="boolstr"/>
			<referrer name="LevenshteinDistance"/>
			<referrer name="_SortDeepArray"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="pc_cmd_a"/>
			<referrer name="aliasCheck"/>
			<referrer name="GetPlayerID"/>
			<referrer name="GetPlayerIdFromName"/>
			<referrer name="pc_cmd_duel"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="ignorecase">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="length">
			</param>
		</member>
		<member name="M:strcpy" syntax="strcpy(dest[], src[], len)">
			<stacksize value="1"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
				Destination string.
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
				Source string.
			</param>
			<param name="len">
				(Implicit) maximum length of the destination.
			</param>
			     
		</member>
		<member name="M:strcpy_undefined__" syntax="strcpy_undefined__()">
			<stacksize value="1"/>
		</member>
		<member name="M:strdel" syntax="strdel(string[], start, end)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="Hooks_IsolateName"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="end">
			</param>
		</member>
		<member name="M:strfind" syntax="strfind(string[], sub[], ignorecase, pos)">
			<attribute name="native"/>
			<referrer name="YVers_Callback"/>
			<referrer name="AMX_GetEntry"/>
			<referrer name="AMX_GetName"/>
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="Hooks_IsolateName"/>
			<referrer name="number_format"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="sub">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="ignorecase">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="pos">
			</param>
		</member>
		<member name="M:strins" syntax="strins(string[], substr[], pos, maxlength)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="Hooks_MakeLongName"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="number_format"/>
			<referrer name="WC_OnPlayerDeath"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="substr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="pos">
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strlen" syntax="strlen(string[])">
			<attribute name="native"/>
			<referrer name="StripNL"/>
			<referrer name="StripL"/>
			<referrer name="Strip"/>
			<referrer name="endofline"/>
			<referrer name="chrfind"/>
			<referrer name="unpack"/>
			<referrer name="Base64Decode"/>
			<referrer name="LevenshteinDistance"/>
			<referrer name="DisasmWriteCode"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="Malloc_SetS"/>
			<referrer name="Malloc_SetVAS"/>
			<referrer name="va_strlen"/>
			<referrer name="Hooks_MakeShortName"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_Collate"/>
			<referrer name="_Hooks_AddReplacement"/>
			<referrer name="_Timer_S"/>
			<referrer name="mS_strtok"/>
			<referrer name="aliasCheck"/>
			<referrer name="GetPlayerID"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="udb_hash"/>
			<referrer name="number_format"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:strmid" syntax="strmid(dest[], source[], start, end, maxlength)">
			<attribute name="native"/>
			<referrer name="resetAltChat"/>
			<referrer name="sendAltChatMessage"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="start">
			</param>
			<param name="end">
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strpack" syntax="strpack(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="Malloc_GetS"/>
			<referrer name="Malloc_SetS"/>
			<referrer name="Hooks_GetPointerRewrite"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strunpack" syntax="strunpack(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="SetWeaponName"/>
			<referrer name="WC_GetWeaponName"/>
			<referrer name="AMX_DumpHeader"/>
			<referrer name="C@"/>
			<referrer name="S@"/>
			<referrer name="unpack"/>
			<referrer name="Malloc_NewS"/>
			<referrer name="Malloc_GetS"/>
			<referrer name="Malloc_SetS"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<referrer name="Hooks_GetAllHooks"/>
			<referrer name="Hooks_Collate"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:strval" syntax="strval(string[])">
			<attribute name="native"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<referrer name="IPToInt"/>
			<referrer name="LoadModelSelectionMenu"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:swapchars" syntax="swapchars(c)">
			<attribute name="native"/>
			<referrer name="AMX_ReadString"/>
			<referrer name="Cell_ReverseBits"/>
			<referrer name="Cell_ReverseNibbles"/>
			<referrer name="Cell_ReverseBytes"/>
			<param name="c">
			</param>
		</member>
		<member name="M:t_Kick" syntax="t_Kick(playerid)">
			<stacksize value="6"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="PTime"/>
			<referrer name="t_Kick@_yT"/>
			<referrer name="check_banned_account"/>
			<referrer name="banned_account"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="Kick"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:t_Kick@_yT" syntax="t_Kick@_yT(__r, playerid)">
			<tagname value="@Yj"/>
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="t_Kick"/>
			<param name="__r">
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:t_Kick_yT@" syntax="t_Kick_yT@(playerid)">
			<stacksize value="8"/>
			<dependency name="I@"/>
			<dependency name="J@"/>
			<dependency name="O@"/>
			<dependency name="_Timer_C"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:task_await" syntax="task_await(task)">
			<stacksize value="4"/>
			<dependency name="task_get_result"/>
			<dependency name="task_wait"/>
			<param name="task">
				<paraminfo>Task </paraminfo>
			</param>
		</member>
		<member name="M:task_await_arr" syntax="task_await_arr(TASK__, result[], size)">
			<stacksize value="5"/>
			<dependency name="task_get_result_arr"/>
			<dependency name="task_wait"/>
			<param name="TASK__">
				<paraminfo>Task </paraminfo>
			</param>
			<param name="result">
				<paraminfo> {_,bool,Float,Variant,String,List,LinkedList,Map,Pool,Iter,Handle,Task,Expression} [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:task_await_var" syntax="task_await_var(task)">
			<tagname value="Variant"/>
			<stacksize value="3"/>
			<dependency name="task_get_result_var"/>
			<dependency name="task_wait"/>
			<param name="task">
				<paraminfo>Task </paraminfo>
			</param>
		</member>
		<member name="M:task_get_result" syntax="task_get_result(task, offset)">
			<attribute name="native"/>
			<referrer name="task_await"/>
			<param name="task">
				<paraminfo>Task </paraminfo>
			</param>
			<param name="offset">
			</param>
		</member>
		<member name="M:task_get_result_arr" syntax="task_get_result_arr(TASK__, result[], size)">
			<attribute name="native"/>
			<referrer name="task_await_arr"/>
			<param name="TASK__">
				<paraminfo>Task </paraminfo>
			</param>
			<param name="result">
				<paraminfo> {_,bool,Float,Variant,String,List,LinkedList,Map,Pool,Iter,Handle,Task,Expression} [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:task_get_result_var" syntax="task_get_result_var(task)">
			<tagname value="Variant"/>
			<attribute name="native"/>
			<referrer name="task_await_var"/>
			<param name="task">
				<paraminfo>Task </paraminfo>
			</param>
		</member>
		<member name="M:task_wait" syntax="task_wait(task)">
			<tagname value="task_state"/>
			<attribute name="native"/>
			<referrer name="task_await"/>
			<referrer name="task_await_arr"/>
			<referrer name="task_await_var"/>
			<param name="task">
				<paraminfo>Task </paraminfo>
			</param>
		</member>
		<member name="M:toggleAltChat" syntax="toggleAltChat(playerid, toggle)">
			<stacksize value="6"/>
			<referrer name="pc_cmd_altchat"/>
			<dependency name="AltChatTD_Player"/>
			<dependency name="MAX_LINES"/>
			<dependency name="WC_PlayerTextDrawHide"/>
			<dependency name="WC_PlayerTextDrawShow"/>
			<dependency name="altchatToggled"/>
			<param name="playerid">
			</param>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:tolower" syntax="tolower(c)">
			<attribute name="native"/>
			<referrer name="StrToLower"/>
			<param name="c">
			</param>
		</member>
		<member name="M:topCheck" syntax="topCheck()">
			<attribute name="public"/>
			<stacksize value="6"/>
			<dependency name="SQL"/>
			<dependency name="mysql_tquery"/>
		</member>
		<member name="M:topQuery" syntax="topQuery()">
			<attribute name="public"/>
			<stacksize value="174"/>
			<dependency name="CreateDynamic3DTextLabel"/>
			<dependency name="CreateDynamicActor"/>
			<dependency name="DestroyDynamic3DTextLabel"/>
			<dependency name="DestroyDynamicActor"/>
			<dependency name="IsValidDynamic3DTextLabel"/>
			<dependency name="IsValidDynamicActor"/>
			<dependency name="SPAWN_VW"/>
			<dependency name="SetDynamicActorInvulnerable"/>
			<dependency name="cache_get_row_count"/>
			<dependency name="cache_get_value_name"/>
			<dependency name="cache_get_value_name_int"/>
			<dependency name="cellmin"/>
			<dependency name="format"/>
			<dependency name="print"/>
			<dependency name="repeatspawn"/>
			<dependency name="tfActor"/>
			<dependency name="tfLabel"/>
			<dependency name="true"/>
		</member>
		<member name="M:toupper" syntax="toupper(c)">
			<attribute name="native"/>
			<referrer name="StrToUpper"/>
			<param name="c">
			</param>
		</member>
		<member name="M:u@" syntax="u@(u[])">
			<stacksize value="1"/>
			<param name="u">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:udb_hash" syntax="udb_hash(buf[])">
			<stacksize value="5"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="strlen"/>
			<param name="buf">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:unbanIP" syntax="unbanIP(user_ip[])">
			<stacksize value="135"/>
			<referrer name="checkIPUnban"/>
			<dependency name="SQL"/>
			<dependency name="mysql_format"/>
			<dependency name="mysql_tquery"/>
			<param name="user_ip">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:unpack" syntax="unpack(str[])">
			<stacksize value="149"/>
			<referrer name="Hooks_IsolateName"/>
			<referrer name="Hooks_GetPreloadLibraries"/>
			<dependency name="strlen"/>
			<dependency name="strunpack"/>
			<dependency name="unpack"/>
			<param name="str">
				<paraminfo> [] </paraminfo>
				String to unpack
			</param>
			  <returns>  unpacked string  </returns>  <remarks>  Mainly used for debugging.  </remarks> 
		</member>
		<member name="M:va_CreatePlayerTextDraw" syntax="va_CreatePlayerTextDraw(playerid, x, y, fmat[], ...)">
			<tagname value="PlayerText"/>
			<stacksize value="160"/>
			<dependency name="WC_CreatePlayerTextDraw"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="playerid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_GameTextForAll" syntax="va_GameTextForAll(fmat[], time, style, ...)">
			<stacksize value="157"/>
			<dependency name="GameTextForAll"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="time">
			</param>
			<param name="style">
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_GameTextForPlayer" syntax="va_GameTextForPlayer(playerid, fmat[], time, style, ...)">
			<stacksize value="158"/>
			<dependency name="GameTextForPlayer"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="playerid">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="time">
			</param>
			<param name="style">
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_SendClientMessage" syntax="va_SendClientMessage(playerid, colour, fmat[], ...)">
			<stacksize value="159"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_tpto"/>
			<referrer name="pc_cmd_veh"/>
			<referrer name="pc_cmd_makepremium"/>
			<referrer name="pc_cmd_makeadmin"/>
			<referrer name="pc_cmd_pl"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="ipCheck"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_mute"/>
			<referrer name="pc_cmd_unmute"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_unjail"/>
			<referrer name="pc_cmd_pm"/>
			<referrer name="pc_cmd_r"/>
			<referrer name="pc_cmd_id"/>
			<referrer name="pc_cmd_skin"/>
			<referrer name="pc_cmd_fps"/>
			<referrer name="pc_cmd_lobby"/>
			<referrer name="pc_cmd_changepassword"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="OnPlayerModelSelection"/>
			<referrer name="@yH_OnDialogResponse@012"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="checkIPUnban"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="SendClientMessage"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="playerid">
			</param>
			<param name="colour">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_SendClientMessageToAll" syntax="va_SendClientMessageToAll(colour, fmat[], ...)">
			<stacksize value="158"/>
			<referrer name="pc_cmd_kick"/>
			<referrer name="pc_cmd_ban"/>
			<referrer name="pc_cmd_spawn"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_offban"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="forfeitPlayerDuel"/>
			<referrer name="rAgc_OnPlayerDisconnect"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="CheckUnban"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="colour">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_SendPlayerMessageToAll" syntax="va_SendPlayerMessageToAll(senderid, fmat[], ...)">
			<stacksize value="158"/>
			<dependency name="SendPlayerMessageToAll"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="senderid">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_SendPlayerMessageToPlayer" syntax="va_SendPlayerMessageToPlayer(playerid, senderid, fmat[], ...)">
			<stacksize value="159"/>
			<dependency name="SendPlayerMessageToPlayer"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="playerid">
			</param>
			<param name="senderid">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_SendRconCommand" syntax="va_SendRconCommand(command[], ...)">
			<stacksize value="157"/>
			<dependency name="SendRconCommand"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="command">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_TextDrawCreate" syntax="va_TextDrawCreate(x, y, fmat[], ...)">
			<tagname value="Text"/>
			<stacksize value="159"/>
			<dependency name="WC_TextDrawCreate"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_formatex" syntax="va_formatex(output[], size, fmat[], STATIC_ARGS)">
			<stacksize value="1"/>
			<param name="output">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="STATIC_ARGS">
				<paraminfo>va_ </paraminfo>
			</param>
		</member>
		<member name="M:va_fprintf" syntax="va_fprintf(fhnd, fmat[], ...)">
			<stacksize value="158"/>
			<referrer name="y_profile_WTF"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="fwrite"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="fhnd">
				<paraminfo>File </paraminfo>
			</param>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_getstring" syntax="va_getstring(dest[], arg, len)">
			<stacksize value="1"/>
			<dependency name="strcat"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="arg">
			</param>
			<param name="len">
			</param>
		</member>
		<member name="M:va_print" syntax="va_print(fmat[], ...)">
			<stacksize value="157"/>
			<dependency name="YVA2_DummyPush"/>
			<dependency name="print"/>
			<dependency name="va_return"/>
			<dependency name="va_return"/>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
			</param>
		</member>
		<member name="M:va_return" syntax="va_return(fmat[], ...)">
			<stacksize value="145"/>
			<referrer name="va_CreatePlayerTextDraw"/>
			<referrer name="va_TextDrawCreate"/>
			<referrer name="va_SendClientMessage"/>
			<referrer name="va_SendClientMessageToAll"/>
			<referrer name="va_SendPlayerMessageToPlayer"/>
			<referrer name="va_SendPlayerMessageToAll"/>
			<referrer name="va_GameTextForPlayer"/>
			<referrer name="va_GameTextForAll"/>
			<referrer name="va_print"/>
			<referrer name="va_fprintf"/>
			<referrer name="va_SendRconCommand"/>
			<dependency name="format"/>
			<dependency name="va_return"/>
			<param name="fmat">
				<paraminfo> [] </paraminfo>
				String format.
			</param>
			<param name="...">
				<paraminfo> {_,Language,Bit,Text,Menu,Style,XML,Bintree,Group,Timer,File,Float,Text3D} </paraminfo>
				Parameters.
			</param>
			    <returns>  Formatted string.  </returns>  <remarks>  Just wraps `format` and returns a string instead.  Has extra code to ensure that it works correct on the old compiler.  </remarks> 
		</member>
		<member name="M:va_strlen" syntax="va_strlen(arg)">
			<stacksize value="1"/>
			<dependency name="strlen"/>
			<param name="arg">
			</param>
		</member>
		<member name="M:valstr" syntax="valstr(dest[], value, pack)">
			<attribute name="native"/>
			<referrer name="Hooks_Ordinal"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="value">
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:wc_SetPlayerVirtualWorld" syntax="wc_SetPlayerVirtualWorld(playerid, worldid)">
			<stacksize value="4"/>
			<referrer name="pc_cmd_freeroam"/>
			<referrer name="pc_cmd_world"/>
			<referrer name="pc_cmd_screenshare"/>
			<referrer name="pc_cmd_jail"/>
			<referrer name="pc_cmd_spec"/>
			<referrer name="pc_cmd_specoff"/>
			<referrer name="@yH_OnDialogResponse@007"/>
			<referrer name="dm_Kick"/>
			<referrer name="SpawnSetup"/>
			<referrer name="SetPlayerSpawnAfterDuel"/>
			<referrer name="pc_cmd_duel"/>
			<referrer name="WC_OnPlayerDeath"/>
			<referrer name="rAgc_OnPlayerSpawn"/>
			<referrer name="WC_OnPlayerRequestClass"/>
			<referrer name="sql_OnAccountCreate"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="SetPlayerVirtualWorld"/>
			<dependency name="s_IsDying"/>
			<dependency name="s_World"/>
			<param name="playerid">
			</param>
			<param name="worldid">
			</param>
		</member>
		<member name="M:y_profile_WTF" syntax="y_profile_WTF(name[], timings[], iters, size)">
			<stacksize value="11"/>
			<dependency name="Debug_Print0"/>
			<dependency name="fclose"/>
			<dependency name="fexist"/>
			<dependency name="fopen"/>
			<dependency name="fwrite"/>
			<dependency name="gettime"/>
			<dependency name="io_append"/>
			<dependency name="io_write"/>
			<dependency name="va_fprintf"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the profile.
			</param>
			<param name="timings">
				<paraminfo> [] </paraminfo>
				The raw profiling results.
			</param>
			<param name="iters">
				The number of iterations per run.
			</param>
			<param name="size">
				The number of repeats.
			</param>
			        <remarks>  "WTF" here stands for "Write To File".  The output looks like:  <code>  timestamp,runs,repeats,results (ms)  1546082820,10,1000000,122,121,121,120,121,121,121,119,119,121  1546082822,10,1000000,123,124,123,123,121,121,121,120,122,122  </code>  The timestamp is the unix timestamp at which the line was WRITTEN, not the  time at which the profilings started or ended.  "runs" is the number of times the whole profile was repeated.  "repeats" is the number of times the code was run for each repeat.  "results" are the total times for each repeat, in milliseconds.  The time  for an individual piece of code is <c>result[n] / repeats</c>.  This is  equivalent to:  <code>  for (new i = 0; i != runs; ++i)  {  start = GetTickCount();  for (new i = 0; i != repeats; ++i)  {  USER_CODE_HERE();  }  end = GetTickCount();  WriteToFile(end - start);  }  </code>  The repeats help to time very short pieces of code.  The runs help to  average.  The console reports average results (mean, mode, median, range).  Thus the even more accurate result for a single iteration would be:  <c>sum(results) / (runs * repeats)</c>.  </remarks> 
		</member>

	</members>
</doc>
